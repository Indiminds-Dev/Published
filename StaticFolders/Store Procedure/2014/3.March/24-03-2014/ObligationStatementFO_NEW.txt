
ALTER procedure [dbo].[ObligationStatementFO_NEW]
@fromdate varchar(50),
@todate varchar(50),
@ClientsID varchar(MAX),
@segment varchar(50),
@MasterSegment varchar(50),
@Companyid varchar(30),
@Finyear varchar(50),
@grptype varchar(50),
@grpid varchar(max),
@RESULTMODE VARCHAR(50),
@userbranchHierarchy varchar(max),
@ChkCollateralDeposit varchar(5),
@Header varchar(max),
@Footer varchar(max),
@Broker varchar(5)

----declare @client varchar(max)
----set @client='''CLT0000107'''
----exec [ObligationStatementFO_NEW] '2013-02-18','2013-02-18','''CLT0000107''',77,'20','COR0000002','2012-2013 ','BRANCH','ALL','SHOW','129,130,131,133,134,135,137,139,142,143,145,149,150,153,157,161,162,164,166,167,169,170,174,178,180,185,186,188,189,190,191,192,193,196,197,198,199,200,204,1','true','','','NA'
----exec [ObligationStatementFO_NEW] '2013-01-09','2013-01-09','''CLM0000353''',25,'2','COR0000002','2012-2013 ','BRANCH','ALL','SHOW','129,130,131,133,134,135,137,139,142,143,145,149,150,153,157,161,162,164,166,167,169,170,174,178,180,185,186,188,189,190,191,192,193,196,197,198,199,200,204,1','true','','','NA'



AS
BEGIN
SET NOCOUNT ON
			DECLARE @EFFECTDATE varchar(50),@SQL varchar(max),@SEG varchar(6),@EXCHANGE varchar(10),@SEGNAME varchar(12),@POABenefit char(1)

			select @POABenefit=(select DISTINCT 1 from Config_RiskProfile where RiskProfile_SegmentID=@segment and isnull(RiskProfile_ConsiderPOA,'0')='1')
			
			IF @todate='NA'
				BEGIN
						SELECT @todate=@fromdate
						SELECT @EFFECTDATE=@fromdate
				END
			ELSE
				BEGIN
						SELECT @EFFECTDATE=@todate
				END
			SELECT @SEG = (SELECT EXCH_SEGMENTID FROM TBL_MASTER_COMPANYEXCHANGE WHERE EXCH_INTERNALID=@segment)
			SELECT @EXCHANGE = (SELECT EXCH_EXCHID FROM TBL_MASTER_COMPANYEXCHANGE WHERE EXCH_INTERNALID=@segment)
			SELECT @SEGNAME=
				(case when (@EXCHANGE='EXN0000002' AND @SEG='FO') THEN 'NSE - FO' 
						when (@EXCHANGE='EXB0000001' AND @SEG='FO') THEN 'BSE - FO' 
						when (@EXCHANGE='EXM0000002' AND @SEG='FO') THEN 'MCXSX - FO' END)

			----------CREATE TABLE BEGIN
			CREATE TABLE #TEMPALLDATA (	CUSTID VARCHAR(50),ORIGINALTRANSACTIONID VARCHAR(50),
										PRODUCTID VARCHAR(50),CUSTOMERID VARCHAR(50),TRADEDATE1 dateTime,
										SYMBOL VARCHAR(50),Identifier VARCHAR(20),EXPIRYDATE DATETIME,STRIKEPRICE NUMERIC(28,2),
										CLIENTNAME VARCHAR(500),UCC VARCHAR(50),GRPID VARCHAR(50),GRPNAME VARCHAR(500),EMAIL VARCHAR(500),
										BUYQTY NUMERIC(28,0),SELLQTY NUMERIC(28,0),
										MKTRATE NUMERIC(28,2),NETRATE NUMERIC(28,2),BRKG NUMERIC(28,4),
										NETAMNTDR NUMERIC(28,2),NETAMNTCR NUMERIC(28,2),SETTPRICE NUMERIC(28,2),
										BFQTY NUMERIC(28,0),BFSETTPRICE NUMERIC(28,4),BFVALUE NUMERIC(28,2),
										CFQTY NUMERIC(28,0),CFSETTPRICE NUMERIC(28,4),CFVALUE NUMERIC(28,2),
										TradeNumber VARCHAR(50),TRADECATEGORY VARCHAR(50),
									    SETTLEMENTNAME VARCHAR(500),MTMDR NUMERIC(28,2),MTMCR NUMERIC(28,2),
										FINALSETTLEMENTNAME VARCHAR(500),FINALSETTLEMENTDR NUMERIC(28,2),FINALSETTLEMENTCR NUMERIC(28,2),
										MTMSETTLEMENTNAME VARCHAR(500),MTMSETTLEMENTDR NUMERIC(28,2),MTMSETTLEMENTCR NUMERIC(28,2),
										NETMTMSETTLEMENTNAME VARCHAR(500),NETMTMSETTLEMENTDR NUMERIC(28,2),NETMTMSETTLEMENTCR NUMERIC(28,2),
										NETPRMSETTLEMENTNAME VARCHAR(500),NETPRMSETTLEMENTDR NUMERIC(28,2),NETPRMSETTLEMENTCR NUMERIC(28,2),
										NETOPTIONSETTLEMENTNAME VARCHAR(500),NETOPTIONSETTLEMENTDR NUMERIC(28,2),NETOPTIONSETTLEMENTCR NUMERIC(28,2),
										TOTALOBLIGATIONNAME VARCHAR(500),TOTALOBLIGATIONDR NUMERIC(28,2),TOTALOBLIGATIONCR NUMERIC(28,2),
										SRVTAXONBRKG NUMERIC(28,2),TRANCHARGE NUMERIC(28,2),STTAXTRANCHARGE NUMERIC(28,2),CLRINGCHARGE NUMERIC(28,2),STTAXCLRINGCHARGE NUMERIC(28,2),
										OTHERCHARGE NUMERIC(28,2),STTAXOTHERCHARGE NUMERIC(28,2),
										STAMP NUMERIC(28,2),STTAX NUMERIC(28,2),TOTALCHARGE NUMERIC(28,2),SEBI NUMERIC(28,2),
										NETBILLAMNTDR NUMERIC(28,2),NETBILLAMNTCR NUMERIC(28,2),
										NETFUNDNAME VARCHAR(500),NETFUNDDR NUMERIC(28,2),NETFUNDCR NUMERIC(28,2),
										NETOPENINGNAME VARCHAR(500),STATEMENTNAME VARCHAR(100),NETOPENINGDR NUMERIC(28,2),NETOPENINGCR NUMERIC(28,2),
										SPANMRGN NUMERIC(28,2),PRMMRGN NUMERIC(28,2),TOTMRGN NUMERIC(28,2),EXPOSURMRGN NUMERIC(28,2),
										APPMRGN NUMERIC(28,2),CASHDEP NUMERIC(28,2),COLLATERAL NUMERIC(28,2),TOTDEP NUMERIC(28,2),
										SHORTAGE NUMERIC(28,2),EXCESS NUMERIC(28,2),
										CLIENTNETAMNTNAME VARCHAR(500),CLIENTNETAMNTDR NUMERIC(28,2),CLIENTNETAMNTCR NUMERIC(28,2),
										CLIENTLASTNAME VARCHAR(500),CLIENTLASTDR NUMERIC(28,2),CLIENTLASTCR NUMERIC(28,2),CASHDEPnew1 NUMERIC(28,2) , CASHDEPnew NUMERIC(28,2),Header varchar(max),
									    Footer varchar(max))

			CREATE TABLE #TEMP_QTY(CUSTOMERID1 VARCHAR(50),PRODUCTID1 VARCHAR(50),QTY1 NUMERIC(28,0),AMNT NUMERIC(28,6))						
			CREATE TABLE #MARGIN(MRGNCUSTOMERID varchar(500),SPANMRGN1 numeric(28,6),PRMMRGN1 numeric(28,6),
									EXPOSURMRGN1 numeric(28,6),TOTMRGN1 numeric(28,6),APPMRGN1 numeric(28,6),
										COLLATERAL1 numeric(28,6),CASHDEP1 NUMERIC(28,2),TOTDEP1 NUMERIC(28,2),
										  SHORTAGE1 NUMERIC(28,2),EXCESS1 NUMERIC(28,2),CASHDEP123 NUMERIC(28,2),CASHDEP456 NUMERIC(28,2))

			CREATE TABLE #MARGINSTOCKS(Clientid varchar(50),Stocksresult numeric(28,6),Quantity numeric(28,6),
										productid varchar(500),closeprice  numeric(28,6),
										varmargin numeric(28,6))

			
			
			----------CREATE TABLE END
			----------FETCH CLIENT DETAILS
				CREATE TABLE #TABCLIENT (CLIENTID1 VARCHAR(50),CLIENTNAME1 VARCHAR(500),UCC1 VARCHAR(50),
										 GROUPID1 VARCHAR(50),GRPNAME1 VARCHAR(500),EMAIL1 varchar(500))
				
				SELECT @SQL=''
				SELECT @sql=''
						SELECT @sql='Select distinct cnt_internalid,(isnull(rtrim(cnt_firstName),'+char(39)+''+char(39)+') +'
									+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_middleName),'+char(39)+''+char(39)+')+'
									+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_lastName),'+char(39)+''+char(39)+')),
									rtrim(cnt_UCC) AS UCC,'
						if(@grptype='BRANCH')
								BEGIN
									Select @sql=@sql+'branch_id,isnull(rtrim(branch_description),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(branch_code),'+char(39)+''+char(39)+')+'']'',branch_cpEmail'
								END
						ELSE 
							BEGIN
									Select @sql=@sql+'gpm_id,isnull(rtrim(GPM_DESCRIPTION),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(GPM_CODE),'+char(39)+''+char(39)+')+'']'',gpm_emailID'
							END
						Select @sql=@sql+'
						from tbl_master_contact,TBL_MASTER_CONTACTEXCHANGE,'
						if(@grptype='BRANCH')
							BEGIN
								Select @sql=@sql+'tbl_master_branch 
								where cnt_branchid=branch_id'
								IF(@grpid<>'ALL')
								BEGIN
									Select @sql=@sql+' AND cnt_branchid IN ('+@grpid+')'	
								END
							END
						ELSE
							BEGIN
								Select @sql=@sql+'tbl_master_groupmaster,tbl_trans_group
								where cnt_internalid=grp_contactid
								AND gpm_type='''+@grptype+'''
								AND grp_groupmaster=gpm_id
								AND GRP_GROUPTYPE='''+@grptype+''''
								IF(@grpid<>'ALL')
								BEGIN
									Select @sql=@sql+' AND grp_groupmaster IN ('+@grpid+')'	
								END
							END
						IF @ClientsID<>'ALL'
						 BEGIN
								SELECT @SQL=@SQL+' and CNT_INTERNALID in('+@ClientsID+')'
						 END
						 if @Broker='NA'
						Begin
						Select @sql=@sql+' AND CNT_BRANCHID IN ('+@userbranchHierarchy+') 
						AND CRG_CNTID=CNT_INTERNALID AND CNT_INTERNALID LIKE ''CL%'' 
						AND CRG_EXCHANGE='''+@SEGNAME+''''
						End
						if @Broker='BO'
						Begin
						Select @sql=@sql+' AND CNT_BRANCHID IN ('+@userbranchHierarchy+') AND 
						CRG_CNTID=CNT_INTERNALID AND CNT_INTERNALID LIKE ''BO%'' 
						AND CRG_EXCHANGE='''+@SEGNAME+''''
						End
				INSERT INTO #TABCLIENT EXEC(@sql)

				

			
			----------SELECT ALL RECORD AT FIRST TIME
			SELECT @SQL=''
			SELECT @SQL='SELECT CustomerTrades_ID,CustomerTrades_OriginalTransactionID,
								CustomerTrades_ProductSeriesID,
								CustomerTrades_CustomerID,CustomerTrades_TradeDate,
								CASE WHEN Equity_EffectUntil is null
									 THEN isnull(rtrim(Equity_TickerSymbol),'''')+'' ''+isnull(rtrim(Equity_Series),''[''+rtrim(Equity_tickercode)+'']'')
									 ELSE isnull(rtrim(Equity_TickerSymbol),'''')+'' ''+isnull(rtrim(Equity_Series),''[''+rtrim(Equity_tickercode)+'']'')+'' ''+convert(varchar(9),Equity_EffectUntil,6)
								end as tabSymbol,
								substring(Equity_FOIdentifier,1,3) as Identifier,
								Equity_EffectUntil,cast(round(Equity_StrikePrice,2) as numeric(28,2)),
								CustomerTrades_UnitPrice,CustomerTrades_UnitBrokerage,CustomerTrades_NetRatePerUnit,CustomerTrades_SettPrice,
								case when CustomerTrades_UnitPriceQuantity<0 then abs(CustomerTrades_UnitPriceQuantity) else null end ,
								case when CustomerTrades_UnitPriceQuantity>0 then abs(CustomerTrades_UnitPriceQuantity) else null end,
								case when CustomerTrades_UnitPriceQuantity<0 then abs(CustomerTrades_NetValue) else null end ,
								case when CustomerTrades_UnitPriceQuantity>0 then abs(CustomerTrades_NetValue) else null end,
								CustomerTrades_TradeCategory,
								case when CustomerTrades_TradeCategory=''EXP'' then ''Expiry'' ELSE NULL END
								from Trans_CustomerTrades,Master_Equity
								where CustomerTrades_ProductSeriesID in
																	(   select distinct Equity_SeriesID from Master_Equity
																		where Equity_EffectUntil>='''+@fromdate+'''
																		and Equity_SeriesID=CustomerTrades_ProductSeriesID
																		and Equity_ExchSegmentID='''+@MasterSegment+'''
																	)
								and Equity_ExchSegmentID='''+@MasterSegment+'''
								and Equity_SeriesID=CustomerTrades_ProductSeriesID
								and CustomerTrades_CustomerID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
								and CustomerTrades_TradeDate BETWEEN '''+@fromdate+''' AND '''+@todate+'''
								and CustomerTrades_ExchangeSegment='''+@segment+'''
								and CustomerTrades_CompanyID='''+@Companyid+''''
			
			--PRINT @Sql
								 INSERT INTO #TEMPALLDATA 
										(CUSTID,ORIGINALTRANSACTIONID,
										PRODUCTID,CUSTOMERID,TRADEDATE1,
										SYMBOL,Identifier,EXPIRYDATE,STRIKEPRICE,
										MKTRATE,BRKG,NETRATE,SETTPRICE,
										BUYQTY,SELLQTY,NETAMNTDR,NETAMNTCR,TRADECATEGORY,TradeNumber)
										EXEC(@SQL)
			-------------SELECT ALL RECORD FROM WHERE BF QTY IS EXISTS
			-----------------------------------UPDATE BF/QTY 
				
				SELECT @SQL=''
				SELECT @SQL='SELECT CustomerTrades_CustomerID,
						CustomerTrades_ProductSeriesID,
						sum(isnull(CustomerTrades_UnitPriceQuantity,0)) as Quantity
						from Trans_CustomerTrades where 
						CustomerTrades_CustomerID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
						and CustomerTrades_ProductSeriesID in
																	(   select distinct Equity_SeriesID from Master_Equity
																		where Equity_EffectUntil>='''+@fromdate+'''
																		and Equity_SeriesID=CustomerTrades_ProductSeriesID
																		and Equity_ExchSegmentID='''+@MasterSegment+'''
																		and substring(Equity_FOIdentifier,1,3)=''FUT''
																	)
						and CustomerTrades_TradeDate<'''+@fromdate+'''
						and CustomerTrades_ExchangeSegment='''+@segment+'''
						and CustomerTrades_CompanyID='''+@Companyid+'''
						group by CustomerTrades_CustomerID,CustomerTrades_ProductSeriesID
						having sum(isnull(CustomerTrades_UnitPriceQuantity,0))<>0'---Condition btn Tab_Minus & Tab_Positive
						
						INSERT INTO #TEMP_QTY(CUSTOMERID1,PRODUCTID1,QTY1) exec(@sql)
					
					
					UPDATE #TEMPALLDATA SET CUSTOMERID=CUSTOMERID1,PRODUCTID=PRODUCTID1,
											BFQTY=CASE WHEN ISNULL(QTY1,0)=0.0 THEN NULL ELSE QTY1 END
					FROM #TEMP_QTY
					WHERE (CUSTOMERID1=CUSTOMERID and  PRODUCTID1=PRODUCTID)
					AND Identifier='FUT'

					INSERT INTO #TEMPALLDATA(CUSTOMERID,PRODUCTID,BFQTY,Identifier) 
					SELECT CUSTOMERID1,PRODUCTID1,CASE WHEN QTY1=0.0 THEN NULL ELSE QTY1 END,'FUT'
					FROM #TEMP_QTY
					WHERE NOT EXISTS (SELECT 1 FROM #TEMPALLDATA WHERE CUSTOMERID1=CUSTOMERID and  PRODUCTID1=PRODUCTID)


				DELETE FROM #TEMP_QTY
				
				-----------FETCH  SettlementPrice FOR BF QTY
				UPDATE #TEMPALLDATA set BFSETTPRICE=DailyStat_SettlementPrice,
										BFVALUE=DailyStat_SettlementPrice*ISNULL(BFQTY,0)
				FROM Trans_DailyStatistics,
													(
														select max(DailyStat_DateTime) AS DATE,
															   DailyStat_ProductSeriesID AS PRID
														from Trans_DailyStatistics,#TEMPALLDATA
														where DailyStat_DateTime<@fromdate
														AND ISNULL(BFQTY ,0)<>0.00
														AND DailyStat_ProductSeriesID=PRODUCTID
														AND DailyStat_ExchangeSegmentID=@MasterSegment
														group by DailyStat_ProductSeriesID
													) AS KK
				WHERE ISNULL(BFQTY ,0)<>0.00
				AND DailyStat_ProductSeriesID=PRODUCTID
				AND DailyStat_ProductSeriesID=PRID
				AND PRID=PRODUCTID
				AND DailyStat_DateTime=DATE
				AND DailyStat_ExchangeSegmentID=@MasterSegment

				
				-----------------------------------UPDATE CF/QTY 
			
				Update #TEMPALLDATA set CFQTY=
				Case When (isnull(Result,0)+isnull(BFQTY,0))>0 
					 Then (-1)*(isnull(Result,0)+isnull(BFQTY,0))
				Else abs((isnull(Result,0)+isnull(BFQTY,0)))
				End
				From 
				 (Select Sum(isnull(SELLQTY,0)-isnull(BUYQTY,0)) as Result,
				 PRODUCTID AS PRODUCTID2,CUSTOMERID AS CUSTOMERID2 
				 From #TEMPALLDATA Group By PRODUCTID,CUSTOMERID) as kk
				 Where PRODUCTID=PRODUCTID2 and CUSTOMERID=CUSTOMERID2
				 AND Identifier='FUT' 
				
				-----------FETCH  SettlementPrice FOR CF QTY
				UPDATE #TEMPALLDATA set CFSETTPRICE=DailyStat_SettlementPrice,
										CFVALUE=DailyStat_SettlementPrice*ISNULL(CFQTY,0)
				FROM Trans_DailyStatistics
				WHERE ISNULL(CFQTY ,0)<>0.00
				AND DailyStat_ProductSeriesID=PRODUCTID
				AND DailyStat_DateTime=@EFFECTDATE
				AND DailyStat_ExchangeSegmentID=@MasterSegment

----------------------------Generate For Client WithOut Position But Having Collateral Deposit Begin----------------
If @ChkCollateralDeposit='true'
Begin
				------------FETCH MARGIN SUMMARY BEGIN
				SELECT @SQL=''
				SELECT @SQL='
				select case when margincustid is null then tbcashdep.closingclinet else margincustid end,
				SpanMargin,BuyPremium,ExposureMargin,TotalMargin,ApplicableMargin,
				closingTRADE,closingTRADE1,closingTRADE2
				From
				(select DailyFOMargin_CustomerID as margincustid,
				cast(isnull(DailyFOMargin_SpanMargin,0.0) as varchar)as SpanMargin,
				cast(isnull(DailyFOMargin_BuyPremium,0.0) as varchar) as BuyPremium,
				cast(isnull(DailyFOMargin_ExposureMargin,0.0) as varchar) as ExposureMargin,
				cast(isnull(DailyFOMargin_TotalMargin,0.0) as varchar) as TotalMargin,

				case when DailyFOMargin_ApplicableMargin is null then 
				isnull(DailyFOMargin_TotalMargin,0.0)+ISNULL(DailyFOMargin_ExposureMargin,0.0)
				else isnull(DailyFOMargin_ApplicableMargin,0.0)  end as ApplicableMargin
				
				from Trans_DailyFOMargin
				where 
				DailyFOMargin_Date='''+@EFFECTDATE+'''
				and DailyFOMargin_CustomerID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				and DailyFOMargin_ExchangeSegmentID='''+@segment+'''
				and DailyFOMargin_CompanyID='''+@Companyid+''') as tbappmargin

				Full Outer Join
				
				 (select AccountsLedger_SubAccountID as closingclinet,
				 sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
				 from trans_accountsledger where
				 accountsledger_mainaccountid IN (''SYSTM00002'',''SYSTM00003'')
				 AND AccountsLedger_SubAccountID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				 AND AccountsLedger_ExchangeSegmentID='''+@segment+'''
				 AND AccountsLedger_TransactionDate<='''+@EFFECTDATE+'''
				 AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
				 AND AccountsLedger_CompanyID='''+@Companyid+'''
				 group by AccountsLedger_SubAccountID
				 having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0.0) as tbcashdep
				
				on(closingclinet=margincustid) 
				Full Outer Join
				(select AccountsLedger_SubAccountID as closingclinet,
				 sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE1
				 from trans_accountsledger where
				 accountsledger_mainaccountid IN (''SYSTM00002'')
				 AND AccountsLedger_SubAccountID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				 AND AccountsLedger_ExchangeSegmentID='''+@segment+'''
				 AND AccountsLedger_TransactionDate<='''+@EFFECTDATE+'''
				 AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
				 AND AccountsLedger_CompanyID='''+@Companyid+'''
				 group by AccountsLedger_SubAccountID
				 having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0.0) as tbcashdep1
				
				on(tbcashdep1.closingclinet=margincustid) 

					Full Outer Join
				(select AccountsLedger_SubAccountID as closingclinet,
				 sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE2
				 from trans_accountsledger where
				 accountsledger_mainaccountid IN (''SYSTM00003'')
				 AND AccountsLedger_SubAccountID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				 AND AccountsLedger_ExchangeSegmentID='''+@segment+'''
				 AND AccountsLedger_TransactionDate<='''+@EFFECTDATE+'''
				 AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
				 AND AccountsLedger_CompanyID='''+@Companyid+'''
				 group by AccountsLedger_SubAccountID
				 having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0.0) as tbcashdep2
				
				on(tbcashdep2.closingclinet=margincustid) 



						'

				


					
				INSERT INTO #MARGIN(MRGNCUSTOMERID,SPANMRGN1,PRMMRGN1,EXPOSURMRGN1,TOTMRGN1,APPMRGN1,CASHDEP1,CASHDEP123,CASHDEP456) 
				
				EXEC(@SQL)
				print @SQL
				---------------------------------*********************COLLETERAL BEGIN
				select * into #ABC from
				(select isnull(DematTransactions_Quantity,0) as QuantityS,
				DematTransactions_CustomerID as CustomerIDS,
				DematTransactions_ProductSeriesID as ProductSeriesIDS,
				DematTransactions_SegmentID as SegmentIDS,
				DematTransactions_SettlementNumberS as SettlementNumberS,
				DematTransactions_SettlementNumberT as SettlementNumberT,
				DematTransactions_SourceSegmentId as SourceSegmentId
				from Trans_DematTransactions where
				DematTransactions_Date<=@EFFECTDATE 
				and DematTransactions_FinYear=@Finyear
				and isnull(DematTransactions_TransferType,'H')<>'CF'
				and DematTransactions_CustomerID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				and (DematTransactions_SegmentID=@segment or DematTransactions_SourceSegmentId=@segment)
				and DematTransactions_CompanyID=@Companyid)as tab

				select * into #t from 
				(select * from #ABC where SourceSegmentId is not null) as tab 
				delete from #ABC where SourceSegmentId is not null

				insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
				SettlementNumberS,SettlementNumberT,SourceSegmentId)
				select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
				SettlementNumberT,null
				from #t where SourceSegmentId<>SegmentIDS


				insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
				SettlementNumberS,SettlementNumberT,SourceSegmentId)
				select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
				SettlementNumberS,null,null
				from #t where SourceSegmentId<>SegmentIDS
	

				delete from #ABC where SegmentIDS<>@segment
				-----------------------MARGIN STOCKS
				INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
				select 
				case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
				case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
				(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
				from
				(select  sum(isnull(QuantityS,0)) as QuantityS,
				CustomerIDS as CustomerIDS,
				ProductSeriesIDS as ProductSeriesIDS
				from #ABC where rtrim(ltrim(SettlementNumberS))='Margin'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabS
				
				full outer join

				(select  sum(isnull(QuantityS,0)) as QuantityT,
				CustomerIDS as CustomerIDT,
				ProductSeriesIDS as ProductSeriesIDT
				from #ABC where rtrim(ltrim(SettlementNumberT))='Margin'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabT
				
				on(CustomerIDS=CustomerIDT
					and ProductSeriesIDS=ProductSeriesIDT)

				--------------------------HOLDBACK STOCKS
				INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
				select 
				case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
				case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
				(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
				from
				(select  sum(isnull(QuantityS,0)) as QuantityS,
				CustomerIDS as CustomerIDS,
				ProductSeriesIDS as ProductSeriesIDS
				from #ABC where
				rtrim(ltrim(SettlementNumberS))='HLDBK'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabS
				
				full outer join

				(select  sum(isnull(QuantityS,0)) as QuantityT,
				CustomerIDS as CustomerIDT,
				ProductSeriesIDS as ProductSeriesIDT
				from #ABC where
				rtrim(ltrim(SettlementNumberT))='HLDBK'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabT
				
				on(CustomerIDS=CustomerIDT
					and ProductSeriesIDS=ProductSeriesIDT)
				-------------------FETCH CLOSE PRICE				
				UPDATE #MARGINSTOCKS set closeprice=DailyStat_Close
				FROM Trans_DailyStatistics,
													(
														select max(DailyStat_DateTime) AS DATE,
															   DailyStat_ProductSeriesID AS PRID
														from Trans_DailyStatistics,#MARGINSTOCKS
														where DailyStat_DateTime<=@EFFECTDATE
														AND DailyStat_ProductSeriesID=productid
														group by DailyStat_ProductSeriesID
													) AS KK
				WHERE DailyStat_ProductSeriesID=productid
				AND DailyStat_ProductSeriesID=PRID
				AND PRID=PRODUCTID
				AND DailyStat_DateTime=DATE

				----------------FETCH VARMARGIN
				UPDATE #MARGINSTOCKS set varmargin=DailyVar_AppMargin
				FROM Trans_DailyVar,
													(
														select max(DailyVar_Date) AS DATE,
															   DailyVar_ProductSeriesID AS PRID
														from Trans_DailyVar,#MARGINSTOCKS
														where DailyVar_Date<=@EFFECTDATE
														AND DailyVar_ProductSeriesID=productid
														group by DailyVar_ProductSeriesID
													) AS KK
				WHERE DailyVar_ProductSeriesID=productid
				AND DailyVar_ProductSeriesID=PRID
				AND PRID=PRODUCTID
				AND DailyVar_Date=DATE

				update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)
				
				-------------App Margin Update In main Tab
				update #MARGIN set COLLATERAL1=Stocksresult from 
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,Clientid from	#MARGINSTOCKS 	
				 group by Clientid) as tab where Clientid=MRGNCUSTOMERID
				
				INSERT INTO #MARGIN(COLLATERAL1,MRGNCUSTOMERID) 		
				select Stocksresult,Clientid From
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,Clientid from	#MARGINSTOCKS 	
				group by Clientid) as tb
				WHERE (
						 Clientid NOT IN (SELECT DISTINCT MRGNCUSTOMERID FROM #MARGIN)
					  )

---- POA Holding Value Calculation
---- We calculate the value of Stocks in POA Accounts in case the user follows the practice of considering POA holding as Margin Stocks
If @POABenefit=1
BEGIN
	Alter table #MARGIN		Add		POAHolding numeric(22,2) null,
									DPID varchar(8) null,
									ClientID2 varchar(10) null,
									RiskProfile varchar(15) null
						  
	Create table #POAHld (CustomerID varchar(10) null,DPID varchar(8) null,ClientID varchar(10) null,ISIN varchar(12) null,Quantity numeric(18,3) null,
							HCutRate numeric(8,4) null,Price numeric(15,4) null,Value numeric(22,2) null,AssetID bigint null,SeriesID bigint null)

	Update #MARGIN Set RiskProfile=	ProfileMember_Code	
									from Trans_ProfileMember 
									where ProfileMember_Type=1 
									and ProfileMember_CustomerID=MRGNCUSTOMERID
									and @EFFECTDATE between ProfileMember_DateFrom and isnull(ProfileMember_DateTo,'2200-12-31')
									
	Update #MARGIN Set RiskProfile='DEFAULTRSK' where RiskProfile is NULL

	Update #MARGIN Set DPID=dpd_dpCode,	ClientID2=dpd_ClientId 
										from tbl_master_contactDPDetails,Config_RiskProfile 
										where dpd_accountType='Default'
										and dpd_POA=1 and MRGNCUSTOMERID=dpd_cntId
										and RiskProfile_SegmentID=@segment
										and @EFFECTDATE between RiskProfile_DateFrom and isnull(RiskProfile_DateTo,'2200-12-31')
										and RiskProfile_Code=RiskProfile
										and RiskProfile_ConsiderPOA='1'
	
	-- Fetch Records for NSDL accounts
	Insert into #POAHld (CustomerID,DPID,ClientID,ISIN,Quantity)
	Select MRGNCUSTOMERID,#MARGIN.DPID,#MARGIN.ClientID2,NsdlHolding_ISIN,NsdlHolding_Free 
	from trans_nsdlholding,#MARGIN
	where LEFT(#MARGIN.DPID,2)='IN'
	and #MARGIN.ClientID2=NsdlHolding_BenAccountNumber
	and NsdlHolding_HoldingDateTime=@EFFECTDATE
	
	-- Fetch Records for CDSL accounts
	Insert into #POAHld (CustomerID,DPID,ClientID,ISIN,Quantity)
	Select MRGNCUSTOMERID,#MARGIN.DPID,#MARGIN.ClientID2,CdslHolding_ISIN,CdslHolding_FreeBalance 
	from Trans_CdslHolding,#MARGIN
	where LEFT(#MARGIN.DPID,2)<>'IN'
	and #MARGIN.ClientID2=CdslHolding_BenAccountNumber
	and CdslHolding_HoldingDateTime=@EFFECTDATE

	-- Find Rates for the ISINs which are there in any of the three CM segments
	Update #POAHld Set AssetID=(select top 1 ISIN_ProductID from Master_ISIN where ISIN_Number=ISIN)
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=1 and Equity_ProductID=AssetID)
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=4 and Equity_ProductID=AssetID)
									where SeriesID is NULL
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=19 and Equity_ProductID=AssetID)
									where SeriesID is NULL
	
	Update #POAHld Set HCutRate=DailyVar_AppMargin 
								from Trans_DailyVar,(SELECT DailyVar_ProductSeriesID AS PRDID,MAX(DailyVar_Date)AS DATE
													   FROM Trans_DailyVar,#POAHld 
													   WHERE DailyVar_ProductSeriesID=SeriesID
													   AND DailyVar_Date<=@EFFECTDATE
													   GROUP BY DailyVar_ProductSeriesID) AS JK 
								where DailyVar_ProductSeriesID=SeriesID
								AND DailyVar_ProductSeriesID=PRDID
								AND SeriesID=PRDID
								and DailyVar_Date=DATE

	Update #POAHld Set Price=DailyStat_Close 
								from Trans_DailyStatistics,(SELECT DailyStat_ProductSeriesID AS PRDID,MAX(DailyStat_DateTime)AS DATE
															   FROM Trans_DailyStatistics,#POAHld 
															   WHERE DailyStat_ProductSeriesID=SeriesID
															   AND DailyStat_DateTime<=@EFFECTDATE
															   GROUP BY DailyStat_ProductSeriesID) AS JK
 								where DailyStat_ProductSeriesID=SeriesID
 								AND DailyStat_ProductSeriesID=PRDID
 								AND SeriesID=PRDID
 								and DailyStat_DateTime=DATE

	Update #POAHld Set Value=Price*Quantity*(1-(HCutRate/100))
	Update #MARGIN Set POAHolding=PVal.Val
	From (	Select CustomerID As CId,sum(isnull(Value,0)) As Val 
			from #POAHld
			Group by CustomerID) As PVal
	where MRGNCUSTOMERID=CId
	
	--- Finally add this value to already calculated collateral value
	Update #MARGIN Set COLLATERAL1=isnull(COLLATERAL1,0)+isnull(POAHolding,0)
					where DPID IS not NULL
	
	
	Drop table #POAHld

END
----   End POA Holding Value


----

				update #MARGIN set TOTDEP1=ISNULL(COLLATERAL1,0)+ISNULL(CASHDEP1,0)
				------EXCESS AND SHORTAGE FETCH
				UPDATE #MARGIN SET  SHORTAGE1=CASE WHEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0)<0 THEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0) ELSE 0.0 END,
									EXCESS1=CASE WHEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0)>0 THEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0) ELSE 0.0 END
				------------------------------------------------------------------------------------
				------------------------------------
					UPDATE #TEMPALLDATA SET CASHDEPnew=CASHDEP123 FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID)
					-----------------------------------
					UPDATE #TEMPALLDATA SET CASHDEPnew1=CASHDEP456 FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID)
					------------------------------------
				
				DROP table #MARGINSTOCKS
				DROP TABLE #ABC
				DROP TABLE #t
				-----------MARGIN OBLIGATION
				UPDATE #TEMPALLDATA SET			SPANMRGN=SPANMRGN1,PRMMRGN=PRMMRGN1,EXPOSURMRGN=EXPOSURMRGN1,
												TOTMRGN=TOTMRGN1,APPMRGN=APPMRGN1,COLLATERAL=COLLATERAL1,
												CASHDEP=CASHDEP1,TOTDEP=TOTDEP1,SHORTAGE=ABS(SHORTAGE1),
												EXCESS=ABS(EXCESS1)
						FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID) 

						
						INSERT INTO #TEMPALLDATA(CUSTOMERID,SPANMRGN,PRMMRGN,EXPOSURMRGN,TOTMRGN,APPMRGN,COLLATERAL,
												 CASHDEP,TOTDEP,SHORTAGE,EXCESS,CASHDEPnew,CASHDEPnew1) 
						SELECT MRGNCUSTOMERID,
						SPANMRGN1,PRMMRGN1,EXPOSURMRGN1,TOTMRGN1,APPMRGN1,COLLATERAL1,CASHDEP1,TOTDEP1,SHORTAGE1,EXCESS1,CASHDEP123,CASHDEP456
						FROM #MARGIN
						WHERE (
							   MRGNCUSTOMERID NOT IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
							  )
				------------FETCH MARGIN SUMMARY END

End
----------------------------Generate For Client WithOut Position But Having Collateral Deposit End----------------
----------------------------Generate For Client Only Position Have [If Collateral Then Oke] Begin----------------
If @ChkCollateralDeposit='false'
Begin
				------------FETCH MARGIN SUMMARY BEGIN
				
				INSERT INTO #MARGIN(MRGNCUSTOMERID,SPANMRGN1,PRMMRGN1,EXPOSURMRGN1,TOTMRGN1,APPMRGN1) 
				Select DailyFOMargin_CustomerID as margincustid,
				cast(isnull(DailyFOMargin_SpanMargin,0.0) as varchar)as SpanMargin,
				cast(isnull(DailyFOMargin_BuyPremium,0.0) as varchar) as BuyPremium,
				cast(isnull(DailyFOMargin_ExposureMargin,0.0) as varchar) as ExposureMargin,
				cast(isnull(DailyFOMargin_TotalMargin,0.0) as varchar) as TotalMargin,

				case when DailyFOMargin_ApplicableMargin is null then 
				isnull(DailyFOMargin_TotalMargin,0.0)+ISNULL(DailyFOMargin_ExposureMargin,0.0)
				else isnull(DailyFOMargin_ApplicableMargin,0.0)  end as ApplicableMargin
				
				from Trans_DailyFOMargin
				where 
				DailyFOMargin_Date=@EFFECTDATE
				and DailyFOMargin_CustomerID in (SELECT DISTINCT CLIENTID1 FROM #TABCLIENT)
				and DailyFOMargin_ExchangeSegmentID=@segment
				and DailyFOMargin_CompanyID=@Companyid
				
				

				---------------If Cash Deposit Is Check
				UPDATE #MARGIN SET CASHDEP1=closingTRADE FROM
							 (Select AccountsLedger_SubAccountID as closingclinet,
							  Sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
							  From trans_accountsledger Where
							  accountsledger_mainaccountid IN ('SYSTM00002','SYSTM00003')
							  AND AccountsLedger_SubAccountID in (Select DISTINCT MRGNCUSTOMERID FROM #MARGIN)
							  AND AccountsLedger_ExchangeSegmentID=@segment
							  AND AccountsLedger_TransactionDate<=@EFFECTDATE
							  AND AccountsLedger_CompanyID=@Companyid and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
							  Group by AccountsLedger_SubAccountID
							  Having sum(isnull(accountsledger_amountCr,0)-isnull(accountsledger_amountDr,0.0))<>0) AS JJ
				WHERE closingclinet=MRGNCUSTOMERID

			----------------------------------------------------------------
			UPDATE #MARGIN SET CASHDEP123=closingTRADE FROM
							 (Select AccountsLedger_SubAccountID as closingclinet,
							  Sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
							  From trans_accountsledger Where
							  accountsledger_mainaccountid IN ('SYSTM00002')
							  AND AccountsLedger_SubAccountID in (Select DISTINCT MRGNCUSTOMERID FROM #MARGIN)
							  AND AccountsLedger_ExchangeSegmentID=@segment
							  AND AccountsLedger_TransactionDate<=@EFFECTDATE
							  AND AccountsLedger_CompanyID=@Companyid and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
							  Group by AccountsLedger_SubAccountID
							  Having sum(isnull(accountsledger_amountCr,0)-isnull(accountsledger_amountDr,0.0))<>0) AS JJ
				WHERE closingclinet=MRGNCUSTOMERID
			----------------------------------------------------------------

			------------------------------------------------------------------
UPDATE #MARGIN SET CASHDEP456=closingTRADE FROM
							 (Select AccountsLedger_SubAccountID as closingclinet,
							  Sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
							  From trans_accountsledger Where
							  accountsledger_mainaccountid IN ('SYSTM00003')
							  AND AccountsLedger_SubAccountID in (Select DISTINCT MRGNCUSTOMERID FROM #MARGIN)
							  AND AccountsLedger_ExchangeSegmentID=@segment
							  AND AccountsLedger_TransactionDate<=@EFFECTDATE
							  AND AccountsLedger_CompanyID=@Companyid and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
							  Group by AccountsLedger_SubAccountID
							  Having sum(isnull(accountsledger_amountCr,0)-isnull(accountsledger_amountDr,0.0))<>0) AS JJ
				WHERE closingclinet=MRGNCUSTOMERID
			
			--------------------------------------------------------------------
				
				
				---------------------------------*********************COLLETERAL BEGIN
				select * into #ABC1 from
				(select isnull(DematTransactions_Quantity,0) as QuantityS,
				DematTransactions_CustomerID as CustomerIDS,
				DematTransactions_ProductSeriesID as ProductSeriesIDS,
				DematTransactions_SegmentID as SegmentIDS,
				DematTransactions_SettlementNumberS as SettlementNumberS,
				DematTransactions_SettlementNumberT as SettlementNumberT,
				DematTransactions_SourceSegmentId as SourceSegmentId
				from Trans_DematTransactions where
				DematTransactions_Date<=@EFFECTDATE 
				and DematTransactions_FinYear=@Finyear
				and isnull(DematTransactions_TransferType,'H')<>'CF'
				and DematTransactions_CustomerID in (SELECT DISTINCT MRGNCUSTOMERID FROM #MARGIN)
				and (DematTransactions_SegmentID=@segment or DematTransactions_SourceSegmentId=@segment)
				and DematTransactions_CompanyID=@Companyid)as tab

				select * into #t1 from 
				(select * from #ABC1 where SourceSegmentId is not null) as tab 
				delete from #ABC1 where SourceSegmentId is not null

				insert into #ABC1(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
				SettlementNumberS,SettlementNumberT,SourceSegmentId)
				select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
				SettlementNumberT,null
				from #t1 where SourceSegmentId<>SegmentIDS


				insert into #ABC1(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
				SettlementNumberS,SettlementNumberT,SourceSegmentId)
				select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
				SettlementNumberS,null,null
				from #t1 where SourceSegmentId<>SegmentIDS
	

				delete from #ABC1 where SegmentIDS<>@segment
				-----------------------MARGIN STOCKS
				INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
				select 
				case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
				case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
				(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
				from
				(select  sum(isnull(QuantityS,0)) as QuantityS,
				CustomerIDS as CustomerIDS,
				ProductSeriesIDS as ProductSeriesIDS
				from #ABC1 where rtrim(ltrim(SettlementNumberS))='Margin'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabS
				
				full outer join

				(select  sum(isnull(QuantityS,0)) as QuantityT,
				CustomerIDS as CustomerIDT,
				ProductSeriesIDS as ProductSeriesIDT
				from #ABC1 where rtrim(ltrim(SettlementNumberT))='Margin'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabT
				
				on(CustomerIDS=CustomerIDT
					and ProductSeriesIDS=ProductSeriesIDT)

				--------------------------HOLDBACK STOCKS
				INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
				select 
				case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
				case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
				(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
				from
				(select  sum(isnull(QuantityS,0)) as QuantityS,
				CustomerIDS as CustomerIDS,
				ProductSeriesIDS as ProductSeriesIDS
				from #ABC1 where
				rtrim(ltrim(SettlementNumberS))='HLDBK'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabS
				
				full outer join

				(select  sum(isnull(QuantityS,0)) as QuantityT,
				CustomerIDS as CustomerIDT,
				ProductSeriesIDS as ProductSeriesIDT
				from #ABC1 where
				rtrim(ltrim(SettlementNumberT))='HLDBK'
				and SegmentIDS=@segment group by CustomerIDS,ProductSeriesIDS) as tabT
				
				on(CustomerIDS=CustomerIDT
					and ProductSeriesIDS=ProductSeriesIDT)
				-------------------FETCH CLOSE PRICE				
				UPDATE #MARGINSTOCKS set closeprice=DailyStat_Close
				FROM Trans_DailyStatistics,
													(
														select max(DailyStat_DateTime) AS DATE,
															   DailyStat_ProductSeriesID AS PRID
														from Trans_DailyStatistics,#MARGINSTOCKS
														where DailyStat_DateTime<=@EFFECTDATE
														AND DailyStat_ProductSeriesID=productid
														group by DailyStat_ProductSeriesID
													) AS KK
				WHERE DailyStat_ProductSeriesID=productid
				AND DailyStat_ProductSeriesID=PRID
				AND PRID=PRODUCTID
				AND DailyStat_DateTime=DATE

				----------------FETCH VARMARGIN
				UPDATE #MARGINSTOCKS set varmargin=DailyVar_AppMargin
				FROM Trans_DailyVar,
													(
														select max(DailyVar_Date) AS DATE,
															   DailyVar_ProductSeriesID AS PRID
														from Trans_DailyVar,#MARGINSTOCKS
														where DailyVar_Date<=@EFFECTDATE
														AND DailyVar_ProductSeriesID=productid
														group by DailyVar_ProductSeriesID
													) AS KK
				WHERE DailyVar_ProductSeriesID=productid
				AND DailyVar_ProductSeriesID=PRID
				AND PRID=PRODUCTID
				AND DailyVar_Date=DATE

				update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)
				
				-------------App Margin Update In main Tab
				Update #MARGIN set COLLATERAL1=Stocksresult from 
				(Select sum(isnull(Stocksresult,0.0)) as Stocksresult,Clientid from	#MARGINSTOCKS 	
				 Group by Clientid) as tab where Clientid=MRGNCUSTOMERID
				
				update #MARGIN set TOTDEP1=ISNULL(COLLATERAL1,0)+ISNULL(CASHDEP1,0)
				------EXCESS AND SHORTAGE FETCH
				UPDATE #MARGIN SET  SHORTAGE1=CASE WHEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0)<0 THEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0) ELSE 0.0 END,
									EXCESS1=CASE WHEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0)>0 THEN ISNULL(TOTDEP1,0)-ISNULL(APPMRGN1,0) ELSE 0.0 END
				
				
				DROP table #MARGINSTOCKS
				DROP TABLE #ABC1
				DROP TABLE #t1
				-----------MARGIN OBLIGATION
				UPDATE #TEMPALLDATA SET			SPANMRGN=SPANMRGN1,PRMMRGN=PRMMRGN1,EXPOSURMRGN=EXPOSURMRGN1,
												TOTMRGN=TOTMRGN1,APPMRGN=APPMRGN1,COLLATERAL=COLLATERAL1,
												CASHDEP=CASHDEP1,TOTDEP=TOTDEP1,SHORTAGE=ABS(SHORTAGE1),
												EXCESS=ABS(EXCESS1)
						FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID) 
					------------------------------------
					UPDATE #TEMPALLDATA SET CASHDEPnew=CASHDEP123 FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID)
					-----------------------------------
					UPDATE #TEMPALLDATA SET CASHDEPnew1=CASHDEP456 FROM #MARGIN
						WHERE (MRGNCUSTOMERID=CUSTOMERID)
					------------------------------------
						
				INSERT INTO #TEMPALLDATA(CUSTOMERID,SPANMRGN,PRMMRGN,EXPOSURMRGN,TOTMRGN,APPMRGN,COLLATERAL,
										 CASHDEP,TOTDEP,SHORTAGE,EXCESS,CASHDEPnew1,CASHDEPnew) 
				SELECT MRGNCUSTOMERID,
				SPANMRGN1,PRMMRGN1,EXPOSURMRGN1,TOTMRGN1,APPMRGN1,COLLATERAL1,CASHDEP1,TOTDEP1,SHORTAGE1,EXCESS1,CASHDEP123,CASHDEP456
				FROM #MARGIN
				WHERE (
					   MRGNCUSTOMERID NOT IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
					  )
				------------FETCH MARGIN SUMMARY END
End
----------------------------Generate For Client Only Position Have [If Collateral Then Oke] End----------------

				----------OPENING BALANCE CALCULATION
				SELECT @SQL=''
				SELECT @SQL='select AccountsLedger_SubAccountID as closingclinet,
									sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
									from trans_accountsledger where
									accountsledger_mainaccountid=''SYSTM00001''
									AND AccountsLedger_SubAccountID IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
									AND AccountsLedger_ExchangeSegmentID='''+@segment+''''
									IF MONTH(CAST(@FROMDATE AS DATETIME))=4 AND  DAY(CAST(@FROMDATE AS DATETIME))=1
									BEGIN
											SELECT @SQL=@SQL +' AND accountsledger_transactiondate<='''+@fromdate+'''
																AND AccountsLedger_TransactionType=''OpeningBalance'''
									END
									ELSE
									BEGIN
											SELECT @SQL=@SQL +' AND accountsledger_transactiondate<'''+@fromdate+''''
									END
									SELECT @SQL=@SQL +'
									AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
									AND AccountsLedger_CompanyID='''+@Companyid+'''
									group by AccountsLedger_SubAccountID
									having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0.0'
					
					INSERT INTO #TEMP_QTY(CUSTOMERID1,AMNT) exec(@SQL)
					
					UPDATE #TEMPALLDATA SET NETOPENINGNAME='Opening Balance As On  '+convert(varchar(9),CAST(@fromdate AS DATETIME),6),
											NETOPENINGDR=CASE WHEN ISNULL(AMNT,0)<0.0 THEN ABS(ISNULL(AMNT,0)) ELSE NULL END,
											NETOPENINGCR=CASE WHEN ISNULL(AMNT,0)>0.0 THEN ABS(ISNULL(AMNT,0)) ELSE NULL END,
											STATEMENTNAME='Obligation Cum Margin Statement In:  '+'[ '+@SEGNAME+' ]'

					FROM #TEMP_QTY
					WHERE CUSTOMERID=CUSTOMERID1

					DELETE FROM #TEMP_QTY
					----------Net Fund Adjustment
					SELECT @SQL=''
					SELECT @SQL='select AccountsLedger_SubAccountID as closingclinet,
										sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closingTRADE
										from trans_accountsledger where
										accountsledger_mainaccountid=''SYSTM00001''
										AND AccountsLedger_SubAccountID IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
										AND Left(AccountsLedger_TransactionReferenceID,1) not in(''X'') 
										AND  accountsledger_TransactionType<>''OpeningBalance''
										AND AccountsLedger_ExchangeSegmentID='''+@segment+'''
										AND AccountsLedger_TransactionDate BETWEEN '''+@fromdate+''' AND '''+@todate+'''
										AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
										AND AccountsLedger_CompanyID='''+@Companyid+'''
										group by AccountsLedger_SubAccountID
										having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0.0'
						
						INSERT INTO #TEMP_QTY(CUSTOMERID1,AMNT) exec(@SQL)

						UPDATE #TEMPALLDATA SET CUSTOMERID=CUSTOMERID1,
												NETFUNDNAME=CASE WHEN CAST(@todate AS DATETIME)<>CAST(@fromdate AS DATETIME) THEN 'Net Fund Adjustment For The Period :' ELSE 'Net Fund Adjustment For The Day :' END,
												NETFUNDDR=CASE WHEN ISNULL(AMNT,0)<0.0 THEN ABS(ISNULL(AMNT,0)) ELSE NULL END,
												NETFUNDCR=CASE WHEN ISNULL(AMNT,0)>0.0 THEN ABS(ISNULL(AMNT,0)) ELSE NULL END
						FROM #TEMP_QTY
						WHERE (CUSTOMERID1=CUSTOMERID) 

				-----------FETCH SCRIP NAME
				UPDATE #TEMPALLDATA SET SYMBOL=case when Equity_EffectUntil is null
												 then isnull(rtrim(Equity_TickerSymbol),' ')+' '+isnull(rtrim(Equity_Series),' ['+rtrim(Equity_tickercode)+' ]')
												 else 
													  isnull(rtrim(Equity_TickerSymbol),' ')+' '+isnull(rtrim(Equity_Series),' ['+rtrim(Equity_tickercode)+' ]')+' '+convert(varchar(9),Equity_EffectUntil,6)
												 end,
									    Identifier=substring(Equity_FOIdentifier,1,3),
										EXPIRYDATE=Equity_EffectUntil,
										STRIKEPRICE=cast(round(Equity_StrikePrice,2) as numeric(28,2)),
										CLIENTNAME=(
													isnull(rtrim(cnt_firstName),' ')+isnull(rtrim(cnt_middleName),' ')+isnull(rtrim(cnt_lastName),' ')
												   ),
										UCC=isnull(rtrim(cnt_UCC),' ')
				FROM Master_Equity,tbl_master_contact
				WHERE SYMBOL IS NULL
				AND CNT_INTERNALID=CUSTOMERID
				AND Equity_ExchSegmentID=@MasterSegment
				AND Equity_SeriesID=PRODUCTID

				
				----------------FETCH TRADE NO FROM EXCHANGETRADES
				SELECT @SQL=''
				SELECT @SQL='UPDATE #TEMPALLDATA SET TradeNumber=ExchangeTrades_TradeNumber
							 FROM
									 (SELECT ExchangeTrades_TradeNumber,EXCHANGEID,CUSTTRANSACTIONID
									  FROM Trans_ExchangeTrades,
															   (
																   SELECT MIN(EXCHANGETRADES_ID) AS EXCHANGEID,
																   ExchangeTrades_CUSTTRANSACTIONID AS CUSTTRANSACTIONID
																   FROM Trans_ExchangeTrades,#TEMPALLDATA
																   WHERE ExchangeTrades_CUSTTRANSACTIONID=CUSTID
																   AND ExchangeTrades_CustomerID=CUSTOMERID
																   AND (CUSTID  IS NOT NULL OR ORIGINALTRANSACTIONID IS NOT NULL)
																   AND TradeNumber IS NULL
																   AND ExchangeTrades_ProductSeriesID=PRODUCTID
																   AND ExchangeTrades_Segment='''+@segment+'''
																   AND ExchangeTrades_TradeDate=TRADEDATE1
																   AND ExchangeTrades_COMPANYID ='''+@Companyid+'''
																   GROUP BY ExchangeTrades_CUSTTRANSACTIONID
															   ) AS KK
										 WHERE EXCHANGETRADES_ID=EXCHANGEID
										 AND ExchangeTrades_Segment='''+@segment+'''
										 AND ExchangeTrades_TradeDate BETWEEN '''+@fromdate+''' AND '''+@todate+'''
										 AND ExchangeTrades_COMPANYID ='''+@Companyid+'''
									 ) AS JJ
							WHERE( 
									(CUSTID=CUSTTRANSACTIONID AND ORIGINALTRANSACTIONID is  null)
									OR 
									(ORIGINALTRANSACTIONID=CUSTTRANSACTIONID AND ORIGINALTRANSACTIONID is  not null)
								 ) 
							AND (CUSTID  IS NOT NULL OR ORIGINALTRANSACTIONID IS NOT NULL) AND TradeNumber IS NULL'
				EXEC(@SQL)
				
				------------UPDATE FOR DISPLAY PRM FIRST THE OPTION
				UPDATE #TEMPALLDATA SET TRADECATEGORY=NULL WHERE TRADECATEGORY='CA'
				------------------FOR SETTLEMENT RESULT FETCH(OPT AND FUT)/PER PRODUCT AND CLIENT
				UPDATE #TEMPALLDATA SET SETTLEMENTNAME=CASE WHEN Identifier='OPT' THEN 'Net Premium :'
													   ELSE
															CASE WHEN EXPIRYDATE=cast(@EFFECTDATE as datetime) THEN 'Final Settlement :' ELSE 'MTM Settlement :' 
													   END END,
										MTMDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										MTMCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT ISNULL(DBCR,0)+ISNULL(BFVALUE1,0)+ISNULL(CFVALUE1,0) AS RESULT,
											CASE WHEN PRODUCTID1 IS NULL THEN PRODUCTID2 ELSE PRODUCTID1 END AS PRODUCTID1,
											CASE WHEN CUSTOMERID1 IS NULL THEN CUSTOMERID2 ELSE CUSTOMERID1 END AS CUSTOMERID1
											FROM	
											(SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS DBCR,
													PRODUCTID AS PRODUCTID1,CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE  (TRADECATEGORY='EXP' OR TRADECATEGORY IS NULL)
													GROUP BY PRODUCTID,CUSTOMERID) AS KK
											 FULL OUTER JOIN
											(SELECT DISTINCT BFVALUE AS BFVALUE1,CFVALUE AS CFVALUE1,
															 PRODUCTID AS PRODUCTID2,CUSTOMERID AS CUSTOMERID2 
															 FROM #TEMPALLDATA WHERE (TRADECATEGORY='EXP' OR TRADECATEGORY IS NULL))AS KJ
											 ON(PRODUCTID2=PRODUCTID1 AND CUSTOMERID2=CUSTOMERID1)
										) AS PP
				WHERE  PRODUCTID=PRODUCTID1 AND CUSTOMERID=CUSTOMERID1

				------------------FOR FINAL SETTLEMENT RESULT FETCH
				UPDATE #TEMPALLDATA SET FINALSETTLEMENTNAME='Final Settlement of All Contracts :',
										FINALSETTLEMENTDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										FINALSETTLEMENTCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT ISNULL(DBCR,0)+ISNULL(BFVALUE1,0)+ISNULL(CFVALUE1,0) AS RESULT,
											CASE WHEN CUSTOMERID1 IS NULL THEN CUSTOMERID3 ELSE CUSTOMERID1 END AS CUSTOMERID1
											FROM	
											(SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS DBCR,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE Identifier='FUT' AND SETTLEMENTNAME='Final Settlement :'
													GROUP BY CUSTOMERID) AS KK
											 FULL OUTER JOIN
											 (SELECT SUM(ISNULL(BFVALUE1,0)) AS BFVALUE1,
													 SUM(ISNULL(CFVALUE1,0)) AS CFVALUE1,CUSTOMERID2 AS CUSTOMERID3 FROM 
												(SELECT DISTINCT BFVALUE AS BFVALUE1,CFVALUE AS CFVALUE1,CUSTOMERID AS CUSTOMERID2,
														PRODUCTID AS PRODUCTID2 FROM #TEMPALLDATA
																 WHERE Identifier='FUT' AND SETTLEMENTNAME='Final Settlement :')AS KJ
												GROUP BY CUSTOMERID2)AS JJ
											 ON(CUSTOMERID3=CUSTOMERID1)
										) AS PP
				WHERE --Identifier='FUT' AND SETTLEMENTNAME='Final Settlement :' AND 
				CUSTOMERID=CUSTOMERID1

				----------------FOR MTM RESULT FETCH
				UPDATE #TEMPALLDATA SET MTMSETTLEMENTNAME='MTM of All Contracts :',
										MTMSETTLEMENTDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										MTMSETTLEMENTCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT ISNULL(DBCR,0)+ISNULL(BFVALUE1,0)+ISNULL(CFVALUE1,0) AS RESULT,
											CASE WHEN CUSTOMERID1 IS NULL THEN CUSTOMERID3 ELSE CUSTOMERID1 END AS CUSTOMERID1
											FROM	
											(SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS DBCR,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE Identifier='FUT' AND SETTLEMENTNAME='MTM Settlement :'
													GROUP BY CUSTOMERID) AS KK
											 FULL OUTER JOIN
											 (SELECT SUM(ISNULL(BFVALUE1,0)) AS BFVALUE1,
													 SUM(ISNULL(CFVALUE1,0)) AS CFVALUE1,CUSTOMERID2 AS CUSTOMERID3 FROM 
												(SELECT DISTINCT BFVALUE AS BFVALUE1,CFVALUE AS CFVALUE1,CUSTOMERID AS CUSTOMERID2,
														PRODUCTID AS PRODUCTID2 FROM #TEMPALLDATA
																 WHERE Identifier='FUT' AND SETTLEMENTNAME='MTM Settlement :')AS KJ
												GROUP BY CUSTOMERID2)AS JJ
											 ON(CUSTOMERID3=CUSTOMERID1)
										) AS PP
				WHERE --Identifier='FUT' AND SETTLEMENTNAME='MTM Settlement :' AND 
				CUSTOMERID=CUSTOMERID1
				------------------FOR NET RESULT FETCH (FUT)
				UPDATE #TEMPALLDATA SET NETMTMSETTLEMENTNAME='Net MTM and Final Settlement of All Contracts :',
										NETMTMSETTLEMENTDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										NETMTMSETTLEMENTCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT ISNULL(DBCR,0)+ISNULL(BFVALUE1,0)+ISNULL(CFVALUE1,0) AS RESULT,
											CASE WHEN CUSTOMERID1 IS NULL THEN CUSTOMERID3 ELSE CUSTOMERID1 END AS CUSTOMERID1
											FROM	
											(SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS DBCR,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE Identifier='FUT'
													GROUP BY CUSTOMERID) AS KK
											 FULL OUTER JOIN
											 (SELECT SUM(ISNULL(BFVALUE1,0)) AS BFVALUE1,
													 SUM(ISNULL(CFVALUE1,0)) AS CFVALUE1,CUSTOMERID2 AS CUSTOMERID3 FROM 
												(SELECT DISTINCT BFVALUE AS BFVALUE1,CFVALUE AS CFVALUE1,CUSTOMERID AS CUSTOMERID2,
														PRODUCTID AS PRODUCTID2 FROM #TEMPALLDATA
																 WHERE Identifier='FUT')AS KJ
												GROUP BY CUSTOMERID2)AS JJ
											 ON(CUSTOMERID3=CUSTOMERID1)
										) AS PP
				WHERE CUSTOMERID=CUSTOMERID1 --AND Identifier='FUT'
				------------------FOR NET RESULT FETCH (OPT)
				UPDATE #TEMPALLDATA SET NETPRMSETTLEMENTNAME='Net Premium of All Contracts :',
										NETPRMSETTLEMENTDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										NETPRMSETTLEMENTCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
													SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS RESULT,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE Identifier='OPT' AND TRADECATEGORY IS NULL
													GROUP BY CUSTOMERID
											
										) AS PP
				WHERE CUSTOMERID=CUSTOMERID1 
				--AND SETTLEMENTNAME='Net Premium :' AND Identifier='OPT' AND (TRADECATEGORY is null or TRADECATEGORY='CA')
				------------------FOR NET RESULT FETCH (OPT-EXC,ASN)
				UPDATE #TEMPALLDATA SET NETOPTIONSETTLEMENTNAME='Net Options Final Settlement :',
										NETOPTIONSETTLEMENTDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										NETOPTIONSETTLEMENTCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS RESULT,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA WHERE Identifier='OPT' AND TRADECATEGORY in('EXC','ASN')
													GROUP BY CUSTOMERID
											 
										) AS PP
				WHERE CUSTOMERID=CUSTOMERID1 
				--AND Identifier='OPT' AND TRADECATEGORY in('EXC','ASN')
				----------------------FETCH TOTAL OBLIGATION
				UPDATE #TEMPALLDATA SET TOTALOBLIGATIONNAME=
										CASE WHEN @fromdate=@todate then 'Total Obligation For The Day :' ELSE
										'Total Obligation For The Period :' END, 
										TOTALOBLIGATIONDR=CASE WHEN ISNULL(RESULT,0)<0 THEN ABS(RESULT) ELSE NULL END ,
										TOTALOBLIGATIONCR=CASE WHEN ISNULL(RESULT,0)>0 THEN ABS(RESULT) ELSE NULL END 
				FROM
										(
											SELECT ISNULL(DBCR,0)+ISNULL(BFVALUE1,0)+ISNULL(CFVALUE1,0) AS RESULT,
											CASE WHEN CUSTOMERID1 IS NULL THEN CUSTOMERID3 ELSE CUSTOMERID1 END AS CUSTOMERID1
											FROM	
											(SELECT (SUM(ISNULL(NETAMNTCR,0))-SUM(ISNULL(NETAMNTDR,0))) AS DBCR,
													CUSTOMERID AS CUSTOMERID1
													FROM #TEMPALLDATA 
													GROUP BY CUSTOMERID) AS KK
											 FULL OUTER JOIN
											 (SELECT SUM(ISNULL(BFVALUE1,0)) AS BFVALUE1,
													 SUM(ISNULL(CFVALUE1,0)) AS CFVALUE1,CUSTOMERID2 AS CUSTOMERID3 FROM 
												(SELECT DISTINCT BFVALUE AS BFVALUE1,CFVALUE AS CFVALUE1,CUSTOMERID AS CUSTOMERID2,
														PRODUCTID AS PRODUCTID2 FROM #TEMPALLDATA)AS KJ
												GROUP BY CUSTOMERID2)AS JJ
											 ON(CUSTOMERID3=CUSTOMERID1)
										) AS PP
				WHERE CUSTOMERID=CUSTOMERID1
				---------SERVICE TAX 
				SELECT @SQL=''
				SELECT @SQL='UPDATE #TEMPALLDATA set SRVTAXONBRKG=Servicetax
				FROM
						(
						select CustomerTrades_CustomerID,
						sum(abs(isnull(CustomerTrades_ServiceTaxOnBrkg,0.0)))+
						sum(abs(isnull(CustomerTrades_EduCessOnBrkg,0.0)))+
						sum(abs(isnull(CustomerTrades_HgrEduCessOnBrkg,0.0))) as Servicetax
									                   
						from Trans_CustomerTrades where 
						CustomerTrades_CustomerID IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
						and CustomerTrades_TradeDate between '''+@fromdate+''' and '''+@todate+'''
						and CustomerTrades_ExchangeSegment='''+@segment+'''
						and CustomerTrades_CompanyID='''+@Companyid+'''
						group by CustomerTrades_CustomerID
						) as tab
				where CUSTOMERID=CustomerTrades_CustomerID'
				EXEC(@SQL)
				-----------CHARGES CALCULATION
				SELECT @SQL=''
				SELECT @SQL='UPDATE #TEMPALLDATA set TRANCHARGE=TRANCHARGE1,STTAXTRANCHARGE=STTAXTRANCHARGE1,
													 CLRINGCHARGE=CLRINGCHARGE1,STTAXCLRINGCHARGE=STTAXCLRINGCHARGE1,	
													 OTHERCHARGE=OTHERCHARGE1,STTAXOTHERCHARGE=STTAXOTHERCHARGE1,
													 SEBI=Sebi1,
													 STAMP=STAMP1,STTAX=STTAX1,TOTALCHARGE=TOTALCHARGE1+ISNULL(SRVTAXONBRKG,0)
													 
							 FROM
									(
										SELECT FOPositionSummary_CustomerExchangeID,
										sum(isnull(FOPositionSummary_TranCharges,0.0)) as TRANCHARGE1,

										sum(isnull(FOPositionSummary_ServiceTaxOnTranCharge,0.0))+
										sum(isnull(FOPositionSummary_EduCessOnTranCharge,0.0))+
										sum(isnull(FOPositionSummary_HgrEduCessOnTranCharge,0.0)) as STTAXTRANCHARGE1,
										
										sum(isnull(FOPositionSummary_ClearingCharge,0.0)) as CLRINGCHARGE1,

										sum(isnull(FOPositionSummary_ServTaxOnClearingCharge,0.0))+
										sum(isnull(FOPositionSummary_EduCessOnClearingCharge,0.0))+
										sum(isnull(FOPositionSummary_HgrEduCessOnClearingCharge,0.0)) as STTAXCLRINGCHARGE1,

										sum(isnull(FOPositionSummary_OtherCharges,0.0)) as OTHERCHARGE1,

										sum(isnull(FOPositionSummary_ServiceTaxOnOtherCharge,0.0))+
										sum(isnull(FOPositionSummary_EduCessOnOtherCharge,0.0))+
										sum(isnull(FOPositionSummary_HgrEduCessOnOtherCharge,0.0)) as STTAXOTHERCHARGE1,

										sum(isnull(FOPositionSummary_StampDuty,0.0)) as STAMP1,
										sum(isnull(FOPositionSummary_STT,0.0))+sum(isnull(FOPositionSummary_STTRoundOff,0.0)) as STTAX1,

										sum(isnull(FOPositionSummary_Sebifee,0.0)) as Sebi1,
										
										sum(isnull(FOPositionSummary_TranCharges,0.0))+sum(isnull(FOPositionSummary_ServiceTaxOnTranCharge,0.0))+
										sum(isnull(FOPositionSummary_EduCessOnTranCharge,0.0))+sum(isnull(FOPositionSummary_HgrEduCessOnTranCharge,0.0))+
										sum(isnull(FOPositionSummary_OtherCharges,0.0))+sum(isnull(FOPositionSummary_ServiceTaxOnOtherCharge,0.0))+
										sum(isnull(FOPositionSummary_EduCessOnOtherCharge,0.0))+sum(isnull(FOPositionSummary_HgrEduCessOnOtherCharge,0.0))+sum(isnull(FOPositionSummary_Sebifee,0.0))+
										sum(isnull(FOPositionSummary_StampDuty,0.0))+sum(isnull(FOPositionSummary_STT,0.0))+sum(isnull(FOPositionSummary_STTRoundOff,0.0)) AS TOTALCHARGE1
										
										from Trans_FOPositionSummary
										where FOPositionSummary_CustomerExchangeID IN (SELECT DISTINCT CUSTOMERID FROM #TEMPALLDATA)
										and FOPositionSummary_Date between '''+@fromdate+''' and '''+@todate+'''
										and FOPositionSummary_SegmentID='''+@segment+'''
										and FOPositionSummary_CompanyID='''+@Companyid+'''
										group by FOPositionSummary_CustomerExchangeID
									)AS DD
							WHERE FOPositionSummary_CustomerExchangeID=CUSTOMERID'
				
				EXEC(@SQL)
				
				----------NET BILL FETCH
				UPDATE #TEMPALLDATA set NETBILLAMNTDR=CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)<0 THEN ABS(ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)) ELSE NULL END,
										NETBILLAMNTCR=CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)>0 THEN ABS(ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)) ELSE NULL END,
										CLIENTNETAMNTNAME=CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)+ISNULL(NETFUNDCR,0)-ISNULL(NETFUNDDR,0)+ISNULL(NETOPENINGCR,0)-ISNULL(NETOPENINGDR,0)<0 THEN 'Net Amount Receivable By Us [With Op Balance] :' ELSE 'Net Amount Payable To You [With Op Balance] :' END,
										CLIENTNETAMNTDR=CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)+ISNULL(NETFUNDCR,0)-ISNULL(NETFUNDDR,0)+ISNULL(NETOPENINGCR,0)-ISNULL(NETOPENINGDR,0)<0 THEN ABS(ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)+ISNULL(NETFUNDCR,0)-ISNULL(NETFUNDDR,0)+ISNULL(NETOPENINGCR,0)-ISNULL(NETOPENINGDR,0)) ELSE NULL END,
										CLIENTNETAMNTCR=CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)+ISNULL(NETFUNDCR,0)-ISNULL(NETFUNDDR,0)+ISNULL(NETOPENINGCR,0)-ISNULL(NETOPENINGDR,0)>0 THEN ABS(ISNULL(TOTALOBLIGATIONCR,0)-ISNULL(TOTALOBLIGATIONDR,0)-ISNULL(TOTALCHARGE,0)+ISNULL(NETFUNDCR,0)-ISNULL(NETFUNDDR,0)+ISNULL(NETOPENINGCR,0)-ISNULL(NETOPENINGDR,0)) ELSE NULL END
													 
				
				--------AFTER CALULATING SHORTAGE AND EXCESS(Net Amount)
				UPDATE #TEMPALLDATA set
										CLIENTLASTNAME=CASE WHEN ISNULL(CLIENTNETAMNTCR,0)-ISNULL(CLIENTNETAMNTDR,0)-ABS(ISNULL(SHORTAGE,0))<0 THEN 'Net Amount Receivable By Us After Adjusting Margin Shortage :' ELSE 'Net Amount Payable  After Adjusting Margin Shortage :' END,
										CLIENTLASTDR=CASE WHEN ISNULL(CLIENTNETAMNTCR,0)-ISNULL(CLIENTNETAMNTDR,0)-ABS(ISNULL(SHORTAGE,0))<0 THEN ABS(ISNULL(CLIENTNETAMNTCR,0)-ISNULL(CLIENTNETAMNTDR,0)-ABS(ISNULL(SHORTAGE,0))) ELSE NULL END,
										CLIENTLASTCR=CASE WHEN ISNULL(CLIENTNETAMNTCR,0)-ISNULL(CLIENTNETAMNTDR,0)-ABS(ISNULL(SHORTAGE,0))>0 THEN ABS(ISNULL(CLIENTNETAMNTCR,0)-ISNULL(CLIENTNETAMNTDR,0)-ABS(ISNULL(SHORTAGE,0))) ELSE NULL END
				
				
				

				UPDATE #TEMPALLDATA SET CLIENTNAME=CLIENTNAME1,UCC=UCC1,GRPID=GROUPID1,GRPNAME=GRPNAME1,EMAIL=EMAIL1
				FROM #TABCLIENT WHERE CUSTOMERID=CLIENTID1	
				update #TEMPALLDATA set Header=(select HeaderFooter_Content from Master_HeaderFooter where HeaderFooter_ID=@Header)				
					
				update #TEMPALLDATA set Footer=(select HeaderFooter_Content from Master_HeaderFooter where HeaderFooter_ID=@Footer)
				
				----------FETCH ALL DETAILS
				SELECT @SQL=''
				SELECT @SQL='SELECT distinct CUSTID,ORIGINALTRANSACTIONID,PRODUCTID,CUSTOMERID,
									CLIENTNAME,UCC,GRPID,GRPNAME,EMAIL,'
				IF @RESULTMODE<>'SHOW'
					BEGIN
							SELECT @SQL=@SQL+'rtrim(CLIENTNAME)+'' [ ''+rtrim(UCC)+'' ]'' as clinameucc,
											(select Top 1(cmp_panNo) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmppanno,
											isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Work'' AND phf_cntId='''+@Companyid+'''),'''')as cmpphno,
											isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Fax'' AND phf_cntId='''+@Companyid+'''),'''')as cmpfax,
											(select Top 1(eml_email) from tbl_master_email where eml_cntid='''+@CompanyID+''' and eml_type=''Official'')as cmpemail,
											(select Top 1(cmp_Name) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmpname,
											(select top 1(isnull(add_address1,'' '')+'' ''+
														isnull(add_address2,'' '')+'' ''+isnull(add_address3,'' '')+'',''+
															isnull(city_name,'' '')+''-''+ isnull(add_pin,'' '')) 
																from tbl_master_address,tbl_master_company,tbl_master_city
																	where cmp_internalid=add_cntid and cmp_internalid='''+@CompanyID+'''
																		and add_city=city_id and add_cntID='''+@CompanyID+''' 
																			AND add_entity=''Company'' AND add_addressType=''Office'')as cmpaddress,
											(select top 1 (isnull(rtrim(ltrim(add_address1)),'''')+'' ''+isnull(rtrim(ltrim(add_address2)),''''))) AS CLIENTADDRESS1,
											(select top 1 (isnull(rtrim(ltrim(add_address3)),'''')+'' ''+isnull(rtrim(ltrim(add_pin)),'''')+'',''+
											(select top 1 isnull(city_name,'''') from tbl_master_city where city_id=add_city))) AS CLIENTADDRESS2,
											(select Top 1(cmp_serviceTaxNo) from tbl_master_company where cmp_internalid='''+@Companyid+''')as cmpservicetax , 
											''NSE-FO'' AS SEGMENTNAME,
											CASE WHEN '''+@todate+'''='''+@fromdate+''' THEN ''Bill Date :''+convert(varchar(9),cast('''+@fromdate+''' as datetime),6)
												 ELSE ''Bill Period :''+convert(varchar(9),cast('''+@fromdate+''' as datetime),6) +''-''+ convert(varchar(9),cast('''+@todate+''' as datetime),6) END AS DATE,
											(Select crg_number from tbl_master_contactregistration where crg_cntID=CUSTOMERID AND crg_Type=''PanCard'')as clientpancard,
											 CASE WHEN ISNULL(NETMTMSETTLEMENTDR,0)+ISNULL(NETMTMSETTLEMENTCR,0)<>0 AND Identifier=''FUT'' THEN ''0''
												  WHEN ISNULL(NETPRMSETTLEMENTDR,0)+ISNULL(NETPRMSETTLEMENTCR,0)<>0 AND Identifier=''OPT'' AND TRADECATEGORY IS NULL THEN ''1''
												  ELSE  ''2'' END AS PRSTATUS ,'	
					END
				SELECT @SQL=@SQL+ '
									NETOPENINGNAME,STATEMENTNAME,
									CASE WHEN ISNULL(NETOPENINGDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETOPENINGDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETOPENINGDR,
									CASE WHEN ISNULL(NETOPENINGCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETOPENINGCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETOPENINGCR,
									CASE WHEN ISNULL(BFQTY,0)=0 THEN NULL WHEN BFQTY<0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(BFQTY AS NUMERIC(28,0)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS BFQTYDR,
									CASE WHEN ISNULL(BFQTY,0)=0 THEN NULL WHEN BFQTY>0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(BFQTY AS NUMERIC(28,0)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS BFQTYCR,
									CASE WHEN ISNULL(BFSETTPRICE,0)=0 THEN NULL ELSE dbo.fn_FormatNumber(CAST(CAST(BFSETTPRICE  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS BFSETTPRICE,
									CASE WHEN ISNULL(BFVALUE,0)=0 THEN NULL WHEN BFVALUE<0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(BFVALUE AS NUMERIC(28,2)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS BFVALUEDR,
									CASE WHEN ISNULL(BFVALUE,0)=0 THEN NULL WHEN BFVALUE>0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(BFVALUE AS NUMERIC(28,2)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS BFVALUECR,
									SYMBOL,Identifier,EXPIRYDATE,STRIKEPRICE,convert(varchar(11),TRADEDATE1,106) as TRADEDATE,TradeNumber,
									CASE WHEN TRADECATEGORY=''ASN'' then ''Assigned'' WHEN TRADECATEGORY=''EXC'' THEN ''Exercised''  ELSE TRADECATEGORY END AS TRADECATEGORY,
									CASE WHEN NETOPTIONSETTLEMENTNAME=''Net Options Final Settlement :'' THEN CASE WHEN ISNULL(BUYQTY,0)=0 THEN dbo.fn_FormatNumber(CAST(SELLQTY AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(BUYQTY AS VARCHAR(8000)),''Y'') END ELSE CASE WHEN ISNULL(BUYQTY,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(BUYQTY AS VARCHAR(8000)),''Y'') END END AS BUYQTY,
									CASE WHEN NETOPTIONSETTLEMENTNAME=''Net Options Final Settlement :'' THEN dbo.fn_FormatNumber(CAST(SETTPRICE AS VARCHAR(8000)),''N'') ELSE CASE WHEN ISNULL(SELLQTY,0)=0 THEN NULL ELSE dbo.fn_FormatNumber(CAST(SELLQTY AS VARCHAR(8000)),''Y'') END END AS SELLQTY,
									CASE WHEN ISNULL(MKTRATE,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(MKTRATE  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS MKTRATE,
									CASE WHEN ISNULL(BRKG,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(BRKG  AS NUMERIC(28,4)) AS VARCHAR(8000)),''N'') END AS BRKG,
									CASE WHEN ISNULL(NETRATE,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETRATE  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETRATE,
									CASE WHEN ISNULL(NETAMNTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETAMNTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETAMNTDR,
									CASE WHEN ISNULL(NETAMNTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETAMNTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETAMNTCR,
									CASE WHEN ISNULL(CFQTY,0)=0 THEN NULL WHEN CFQTY<0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(CFQTY AS NUMERIC(28,0)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS CFQTYDR,
									CASE WHEN ISNULL(CFQTY,0)=0 THEN NULL WHEN CFQTY>0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(CFQTY AS NUMERIC(28,0)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS CFQTYCR,
									CASE WHEN ISNULL(CFSETTPRICE,0)=0 THEN NULL ELSE dbo.fn_FormatNumber(CAST(CAST(CFSETTPRICE  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CFSETTPRICE,
									CASE WHEN ISNULL(CFVALUE,0)=0 THEN NULL WHEN CFVALUE<0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(CFVALUE AS NUMERIC(28,2)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS CFVALUEDR,
									CASE WHEN ISNULL(CFVALUE,0)=0 THEN NULL WHEN CFVALUE>0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(CFVALUE AS NUMERIC(28,2)) ) AS VARCHAR(8000)),''N'') ELSE NULL END AS CFVALUECR,
									SETTLEMENTNAME,
									CASE WHEN ISNULL(MTMDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(MTMDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS MTMDR,
									CASE WHEN ISNULL(MTMCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(MTMCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS MTMCR,
									FINALSETTLEMENTNAME,
									CASE WHEN ISNULL(FINALSETTLEMENTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(FINALSETTLEMENTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS FINALSETTLEMENTDR,
									CASE WHEN ISNULL(FINALSETTLEMENTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(FINALSETTLEMENTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS FINALSETTLEMENTCR,
									MTMSETTLEMENTNAME,
									CASE WHEN ISNULL(MTMSETTLEMENTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(MTMSETTLEMENTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS MTMSETTLEMENTDR,
									CASE WHEN ISNULL(MTMSETTLEMENTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(MTMSETTLEMENTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS MTMSETTLEMENTCR,
									NETMTMSETTLEMENTNAME,
									CASE WHEN ISNULL(NETMTMSETTLEMENTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETMTMSETTLEMENTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETMTMSETTLEMENTDR,
									CASE WHEN ISNULL(NETMTMSETTLEMENTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETMTMSETTLEMENTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETMTMSETTLEMENTCR,
									NETPRMSETTLEMENTNAME,
									CASE WHEN ISNULL(NETPRMSETTLEMENTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETPRMSETTLEMENTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETPRMSETTLEMENTDR,
									CASE WHEN ISNULL(NETPRMSETTLEMENTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETPRMSETTLEMENTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETPRMSETTLEMENTCR,
									NETOPTIONSETTLEMENTNAME,
									CASE WHEN ISNULL(NETOPTIONSETTLEMENTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(NETOPTIONSETTLEMENTDR,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETOPTIONSETTLEMENTDR,
									CASE WHEN ISNULL(NETOPTIONSETTLEMENTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(NETOPTIONSETTLEMENTCR,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETOPTIONSETTLEMENTCR,
									TOTALOBLIGATIONNAME,
									CASE WHEN ISNULL(TOTALOBLIGATIONDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(TOTALOBLIGATIONDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS TOTALOBLIGATIONDR,
									CASE WHEN ISNULL(TOTALOBLIGATIONCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(TOTALOBLIGATIONCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS TOTALOBLIGATIONCR,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(SRVTAXONBRKG,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS SRVTAXONBRKG,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(TRANCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS TRANCHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(CLRINGCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS CLRINGCHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(OTHERCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS OTHERCHARGE,
									dbo.fn_FormatNumber(CAST(ISNULL(SEBI,0) AS VARCHAR(8000)),''N'')  AS SEBICHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(STTAXTRANCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS STTAXTRANCHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(STTAXCLRINGCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS STTAXCLRINGCHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(STTAXOTHERCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS STTAXOTHERCHARGE,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(STAMP ,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS STAMP ,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(STTAX,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS STTAX,
									dbo.fn_FormatNumber(CAST(CAST(ISNULL(TOTALCHARGE,0)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'')  AS TOTALCHARGE,
									CASE WHEN ISNULL(NETBILLAMNTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETBILLAMNTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETBILLAMNTDR,
									CASE WHEN ISNULL(NETBILLAMNTCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETBILLAMNTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETBILLAMNTCR,
									NETFUNDNAME,
									CASE WHEN ISNULL(NETFUNDDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETFUNDDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETFUNDDR,
									CASE WHEN ISNULL(NETFUNDCR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(NETFUNDCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS NETFUNDCR,
									CLIENTNETAMNTNAME,
									CASE WHEN ISNULL(CLIENTNETAMNTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(CLIENTNETAMNTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CLIENTNETAMNTDR,
									CASE WHEN ISNULL(CLIENTNETAMNTCR,0)=0 THEN CASE WHEN  ISNULL(CLIENTNETAMNTDR,0)=0 THEN ''0.00'' ELSE NULL END ELSE dbo.fn_FormatNumber(CAST(CAST(CLIENTNETAMNTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CLIENTNETAMNTCR,
									CASE WHEN ISNULL(SPANMRGN,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(SPANMRGN  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS SPANMRGN,
									CASE WHEN ISNULL(PRMMRGN,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(PRMMRGN  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS PRMMRGN,
									CASE WHEN ISNULL(TOTMRGN,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(TOTMRGN  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS TOTMRGN,
									CASE WHEN ISNULL(EXPOSURMRGN,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(EXPOSURMRGN  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS EXPOSURMRGN,
									CASE WHEN ISNULL(APPMRGN,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(APPMRGN  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS APPMRGN,
									CASE WHEN ISNULL(CASHDEP,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(CASHDEP  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CASHDEP,
									CASE WHEN ISNULL(COLLATERAL,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(COLLATERAL  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS COLLATERAL,
									CASE WHEN ISNULL(TOTDEP,0)=0 THEN NULL  WHEN ISNULL(TOTDEP,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(CAST(ABS(TOTDEP)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CAST(TOTDEP  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS TOTDEP,
									CASE WHEN ISNULL(SHORTAGE,0)=0 THEN NULL WHEN ISNULL(SHORTAGE,0)<0 THEN dbo.fn_FormatNumber(CAST(CAST(ABS(SHORTAGE)  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CAST(SHORTAGE  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS SHORTAGE,
									CASE WHEN ISNULL(EXCESS,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(EXCESS  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS EXCESS,
									CLIENTLASTNAME,
									CASE WHEN ISNULL(CLIENTLASTDR,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(CLIENTLASTDR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CLIENTLASTDR,
									CASE WHEN ISNULL(CLIENTLASTCR,0)=0 THEN CASE WHEN ISNULL(CLIENTLASTDR,0)=0 THEN ''0.00'' ELSE NULL END  ELSE dbo.fn_FormatNumber(CAST(CAST(CLIENTLASTCR  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CLIENTLASTCR,
									CASE WHEN ISNULL(CASHDEPnew1,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(CASHDEPnew1  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CASHDEPnew1,
									CASE WHEN ISNULL(CASHDEPnew,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(CASHDEPnew  AS NUMERIC(28,2)) AS VARCHAR(8000)),''N'') END AS CASHDEPnew,
									Header,Footer
									
									FROM #TEMPALLDATA '
						IF @RESULTMODE<>'SHOW'
								BEGIN
									Select @SQL=@SQL+'
													LEFT OUTER JOIN
									  tbl_master_address
										ON(add_cntID=CUSTOMERID AND add_entity=''Customer/Client'' AND 
												add_addressType=(select top 1 add_addressType from 
																(select add_addressType,
																  case when rtrim(ltrim(add_addressType))=''Correspondence'' then 1
																	when rtrim(ltrim(add_addressType))=''Registered'' then 2
																	when rtrim(ltrim(add_addressType))=''Residence'' then 3
																	else 4 end as addreorder
																	from tbl_master_address where 
																	add_cntID=CUSTOMERID
																	and add_entity=''Customer/Client'') tb
																	order by addreorder)
										)'
								END
								Select @SQL=@SQL +' ORDER BY Identifier,SYMBOL,EXPIRYDATE,STRIKEPRICE,TRADEDATE'
--				print @SQL
				EXEC(@SQL)
				--------------DISTINCT SCRIP
				
				DROP TABLE  #TEMP_QTY
				DROP TABLE  #TEMPALLDATA
				DROP TABLE #MARGIN
				DROP TABLE #TABCLIENT


END

--declare @client varchar(max)
--set @client='all'
--exec [ObligationStatementFO_NEW] '2010-10-28','NA',@client,'17','2','COR0000001','2010-2011','BRANCH','ALL','print','12,13,14,15,16,17,59,18,19,20,21,22,53,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,41,45,38,40,42,39,43,44,46,47,48,49,50,51,52,54,55,56,57,58,60,61,62,63,64,65,66,67,68,69,1'


