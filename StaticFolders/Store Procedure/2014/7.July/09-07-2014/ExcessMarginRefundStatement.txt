
ALTER procedure [dbo].[ExcessMarginRefundStatement]
@fordate varchar(35),
@ledgerbalndate varchar(35),
@cashdeptdate varchar(35),
@clients varchar(max),
@segment varchar(50),
@CompanyID varchar(15),
@Finyear varchar(15),
@WrkingDays int,
@markupappmrgn numeric(28,2),
@maintaincashcomp numeric(28,2),
@checkpartialrelease varchar(10),
@grptype varchar(30),
@branch varchar(max),
@grpval varchar(max),
@stockreleaseorder varchar(10),
@PRINTCHK varchar(20)

AS
BEGIN
set nocount on
----DECLARE @CLI VARCHAR(MAX)
------SELECT @CLI='''CLA0000121'''--,''CL 0000001'',''CLG0000013'',''CLV0000109'',''CLA0000464'',''CLS0000919'',''CLA0000389'''
----SELECT @CLI='ALL'
----EXEC [ExcessMarginRefundStatement] '2011-06-30','2011-06-30','2011-06-30',@CLI,'24,29','COR0000002','2011-2012','1',175.00,50.00,'UNCHK','BRANCH','135','NA','1','Print'
----

	Declare @TDay Varchar(20),@TM1Day Varchar(20),@ExchangeSegmentID int


	Select @TDay=dbo.fn_TDays_PreviousDay((DATEADD(dd, 0, DATEDIFF(dd, 0, @fordate))))
	Set @TM1Day=dbo.fn_TDays_PreviousDay(Cast(@TDay as DateTime)-1)


	declare @Sql varchar(max)
	create table #tab (clientid varchar(15),ledgerbaln numeric(28,6),cashmrfndept numeric(28,6),
					   fdrsbgs numeric(28,6),totaldept numeric(28,6),pendpur numeric(28,6),
					   pendsale numeric(28,6),hldbkstocks numeric(28,6),mrgnstocks numeric(28,6),
					   noncashdep numeric(28,6),netdeposit numeric(28,6),appmrgn numeric(28,6),
					   appmrgnwithmarkup numeric(28,6),excessshortage numeric(28,6),avgmargin numeric(28,6),
					   refundcash numeric(28,6),refundstocks numeric(28,6),appmrgnwithmarkupcash NUMERIC(28,6),
					   TDayFoBill numeric(28,6),TDayCDBill numeric(28,6),OtherRetention numeric(28,6),
					   TDayCMBill numeric(28,6),TM1DayCMBill numeric(28,6),TDayFOMargin numeric(28,6),
					   TDayCDMargin numeric(28,6),TDayCMMargin numeric(28,6),TDayCMDeliveryIN numeric(28,6),
					   TDayCMDeliveryOut numeric(28,6),TM1DayCMDeliveryIN numeric(28,6),TM1DayCMDeliveryOut numeric(28,6),
					   TDayCMTurnover numeric(28,6),TDayFOExposure numeric(28,6),TDayCDExposure numeric(28,6))

	DECLARE  @STOCKSRELEASE TABLE (CUSTOMER varchar(15),Stocksresult numeric(28,6),Quantity numeric(28,6),DpId varchar(40),
	productid varchar(500),closeprice  numeric(28,6),varmargin numeric(28,6),STKTYPE VARCHAR(50),ORDERSTOCKS VARCHAR(10),
	DPAC VARCHAR(40),PLEDGEAC VARCHAR(10),SCRIPNAME VARCHAR(500),RELEASE NUMERIC(28,6),STOCKSID INT IDENTITY(1,1),
	OwnDpId varchar(40),OwnClientId varchar(40),DpSegMentId varchar(50))

	CREATE TABLE #DISTINCTCLIENT (CLI VARCHAR(15))
	SELECT @SQL=''
	SELECT @SQL='SELECT DISTINCT CNT_INTERNALID FROM 
	tbl_master_contact,'
	if(@grptype='BRANCH')
		BEGIN
					Select @sql=@sql+'tbl_master_branch '
					IF(@branch='ALL')
						BEGIN
							Select @sql=@sql+ 'where cnt_branchid=branch_id
												AND cnt_branchid IN('+@grpval+')'
						END
					ELSE
						BEGIN
							Select @sql=@sql+ 'where cnt_branchid=branch_id
											   AND cnt_branchid IN('+@branch+')'
						END

			
		END
	ELSE
		BEGIN

				Select @sql=@sql+'tbl_master_groupmaster,tbl_trans_group '
					IF(@grpval='ALL')
						BEGIN
							Select @sql=@sql+ ' where cnt_internalid=grp_contactid
												AND cnt_branchid IN('+@branch+')
												AND gpm_type='''+@grptype+'''
												AND grp_groupmaster=gpm_id
												AND GRP_GROUPTYPE='''+@grptype+''''
						END
					ELSE
						BEGIN
							Select @sql=@sql+ ' where cnt_branchid IN('+@branch+')
												and cnt_internalid=grp_contactid
												AND gpm_type='''+@grptype+'''
												AND grp_groupmaster IN('+@grpval+')
												AND grp_groupmaster=gpm_id
												AND GRP_GROUPTYPE='''+@grptype+''''
						END
			
			
		END
		IF(@clients<>'ALL')
			BEGIN
							Select @sql=@sql+ 'and  cnt_internalid in('+@clients+')' 
			END
		Select @sql=@sql+ 'and  left(isnull(cnt_clienttype,''RET''),3) <>''PRO''' 
			
	INSERT INTO #DISTINCTCLIENT(CLI) EXEC(@sql)
	
	
	---Change : 1
	if(@PRINTCHK='DeletePosition')
	Begin
		Begin Transaction
		----Remove Clients Those are not exist in Relase Table
		Declare @TotalClient int,@TotalDelClient int,@TotalRemainClient int,@TotalNotExistClient int
		Select @TotalClient=COUNT(CLI) From #DISTINCTCLIENT
					
		Delete From #DISTINCTCLIENT Where CLI not in 
		(
			Select Cli From #DISTINCTCLIENT
			intersect
			Select Release_CustomerID From Trans_Release Where 
			Release_PositionDate=Cast(@fordate as DateTime)
		)
		
		Select @TotalNotExistClient=@TotalClient-COUNT(Cli) From #DISTINCTCLIENT
		
		Delete From Trans_ReleaseFunds Where ReleaseFunds_MainID in 
		(Select Release_ID from Trans_Release Where Release_CustomerID in (Select * from #DISTINCTCLIENT)
		and (Release_IsLockedFunds is null or Release_IsLockedFunds is null)
		and Release_PositionDate=Cast(@fordate as DateTime))
		IF @@ERROR != 0 
		BEGIN
			ROLLBACK TRANSACTION 
			RETURN
		END
		Else 
		Begin--------------1
			Delete From Trans_ReleaseStocks Where ReleaseStocks_MainID in 
			(Select Release_ID from Trans_Release Where Release_CustomerID in (Select * from #DISTINCTCLIENT)
			and (Release_IsLockedFunds is null or Release_IsLockedFunds is null)
			and Release_PositionDate=Cast(@fordate as DateTime))
			IF @@ERROR != 0 
			BEGIN
				ROLLBACK TRANSACTION 
				RETURN
			END
			Else
			Begin ----------------2
				Delete from Trans_Release Where Release_CustomerID in (Select * from #DISTINCTCLIENT)
				and (Release_IsLockedFunds is null or Release_IsLockedFunds is null)
				and Release_PositionDate=Cast(@fordate as DateTime)
				IF @@ERROR != 0 
				BEGIN
					ROLLBACK TRANSACTION 
					RETURN
				END
				BEGIN
					
					
					Select @TotalDelClient=(@TotalClient-@TotalNotExistClient)-COUNT(Release_ID) from Trans_Release 
					Where Release_CustomerID in (Select * from #DISTINCTCLIENT)
					and Release_PositionDate=Cast(@fordate as DateTime)
					
					Select @TotalRemainClient=(@TotalClient-@TotalNotExistClient)-@TotalDelClient
					
					if(@TotalDelClient>0)
						Select 2 as Status ---Successfully Deleted
					else
						Select 9 as Status ---No Record Found
					
					/*Select 'Total No of Client : '+Cast(@TotalClient As Varchar) Union ALL
					Select 'Total No of Client Not Exists : '+Cast(@TotalNotExistClient As Varchar) Union ALL
					Select 'Total No of Deleted Client :'+ Cast((@TotalDelClient) As Varchar) Union ALL
					Select 'Total No of Remain Client:'+Cast(@TotalRemainClient AS Varchar) Union ALL
					Select 'Note 1: Total No of Client Not Exists are those Clients Position yet to be Generated.' Union All
					Select 'Note 2: Total No of Remain Client can not be Deleted Because Their Position already Generated.'*/
					
					COMMIT TRANSACTION --finally, Commit the transaction if Success..
					RETURN
				END
			End-------------------2
		End-----------------1
	End
	Else
	Begin
		
		Delete From #DISTINCTCLIENT Where CLI in
		(Select Ltrim(Rtrim(Release_CustomerID)) from Trans_Release where Release_PositionDate=Cast(@fordate as DateTime))
		
		--Select * into DistinctClient from #DISTINCTCLIENT
------------CALCULATE LEDGER BALN.
		set @Sql=''
		select @Sql='SELECT
		CASE WHEN SubAccountID IS NULL THEN SubAccountID3 ELSE SubAccountID END AS SubAccountID,
		closing_L,closing_C,closing_FB FROM
		(SELECT
		CASE WHEN SubAccountID1 IS NULL THEN SubAccountID2 ELSE SubAccountID1 END AS SubAccountID,
		closing_L,closing_C
		FROM
		(
			Select T1.SubAccountID1,isnull(closing_L1,0.00)+isnull(closing_L2,0.00) closing_L from 
			(select AccountsLedger_SubAccountID as SubAccountID1,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_L1
			from trans_accountsledger where 
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT) 
			AND accountsledger_mainaccountid=''SYSTM00001''
			AND AccountsLedger_TransactionDate<='''+@ledgerbalndate+'''
			AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			AND AccountsLedger_ExchangeSegmentID in ('+@segment+')
			AND AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType<>''CASH_BANK''
			group by AccountsLedger_SubAccountID) T1
			Inner Join
			(select AccountsLedger_SubAccountID as SubAccountID1,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_L2
			from trans_accountsledger where 
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT) 
			AND accountsledger_mainaccountid=''SYSTM00001''
			AND AccountsLedger_TransactionDate<='''+@ledgerbalndate+'''
			AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			AND AccountsLedger_ExchangeSegmentID in ('+@segment+')
			AND AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType=''CASH_BANK''
			AND isnull(AccountsLedger_ValueDate,''1900-01-01 00:00:00.000'')<>''1900-01-01 00:00:00.000''
			group by AccountsLedger_SubAccountID) T2
			on T1.SubAccountID1=T2.SubAccountID1
		) as jj

		full outer join
		(
			Select T1.SubAccountID2,isnull(closing_C1,0.00)+isnull(closing_C2,0.00) closing_C from 
			(select AccountsLedger_SubAccountID as SubAccountID2,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_C1
			from trans_accountsledger where 
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT)
			AND accountsledger_mainaccountid=''SYSTM00002''
			and AccountsLedger_TransactionDate<='''+@cashdeptdate+'''
			and ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			and AccountsLedger_ExchangeSegmentID in ('+@segment+')
			and AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType<>''CASH_BANK''
			group by AccountsLedger_SubAccountID) T1
			Inner Join
			(select AccountsLedger_SubAccountID as SubAccountID2,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_C2
			from trans_accountsledger where 
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT)
			AND accountsledger_mainaccountid=''SYSTM00002''
			and AccountsLedger_TransactionDate<='''+@cashdeptdate+'''
			and ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			and AccountsLedger_ExchangeSegmentID in ('+@segment+')
			and AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType=''CASH_BANK''
			AND isnull(AccountsLedger_ValueDate,''1900-01-01 00:00:00.000'')<>''1900-01-01 00:00:00.000''
			group by AccountsLedger_SubAccountID) T2
			on T1.SubAccountID2=T2.SubAccountID2
		
		) as pp
		on(SubAccountID1=SubAccountID2)
		) as bb

		full outer join

		(
			Select T1.SubAccountID3,isnull(closing_FB1,0.00)+isnull(closing_FB2,0.00) closing_FB from 
			(select AccountsLedger_SubAccountID AS SubAccountID3,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_FB1
			from trans_accountsledger where
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT) 
			AND accountsledger_mainaccountid=''SYSTM00003''
			and AccountsLedger_TransactionDate<='''+@cashdeptdate+'''
			and ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			and AccountsLedger_ExchangeSegmentID in ('+@segment+')
			and AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType<>''CASH_BANK''
			group by AccountsLedger_SubAccountID) T1
			Inner join
			(select AccountsLedger_SubAccountID AS SubAccountID3,
			sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing_FB2
			from trans_accountsledger where
			AccountsLedger_SubAccountID IN(SELECT DISTINCT CLI FROM #DISTINCTCLIENT) 
			AND accountsledger_mainaccountid=''SYSTM00003''
			and AccountsLedger_TransactionDate<='''+@cashdeptdate+'''
			and ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+'''
			and AccountsLedger_ExchangeSegmentID in ('+@segment+')
			and AccountsLedger_CompanyID='''+@Companyid+'''
			AND AccountsLedger_TransactionType=''CASH_BANK''
			AND isnull(AccountsLedger_ValueDate,''1900-01-01 00:00:00.000'')<>''1900-01-01 00:00:00.000''
			group by AccountsLedger_SubAccountID) T2
			on T1.SubAccountID3=T2.SubAccountID3
		) AS OO
		ON(SubAccountID3=SubAccountID)'
		
		print @Sql
	
		insert into #tab(clientid,ledgerbaln,cashmrfndept,fdrsbgs) exec(@Sql)
		
		---------Total Cash Deposit
		--UPDATE #tab SET totaldept=ISNULL(ledgerbaln,0)+ISNULL(cashmrfndept,0)+ISNULL(fdrsbgs,0)//Old
		UPDATE #tab SET totaldept=ISNULL(ledgerbaln,0)+ISNULL(cashmrfndept,0)--New
		------------CALCULATE PNDING PURCHASE AND SALES BEGIN


			DECLARE  @dematposition table(dematposition_CustomerID varchar(50),
			dematposition_ProductSeriesID varchar(50),
			dematposition_Segmentid varchar(20),
			dematposition_QtyToReceive numeric(28,6),dematposition_QtyToDeliver numeric(28,6),
			dematposition_SettlementsNumber varchar(30),dematposition_SettlementsType varchar(30))
		
		
		select @Sql='select DematPosition_CustomerID as CustomerID,DematPosition_ProductSeriesID as ProductSeriesID,
				DematPosition_Segmentid as Segmentid,
				DematPosition_QtyToReceive as QtyToReceive,
				DematPosition_QtyToDeliver as QtyToDeliver,
				DematPosition_SettlementNumber as SettlementsNumber,
				DematPosition_SettlementType as SettlementsType

				from Trans_DematPosition
				where (DematPosition_QtyToReceive<>0.0 or DematPosition_QtyToDeliver<>0.0)
				and DematPosition_SettlementNumber in (
															select distinct Settlements_Number
															from Master_Settlements
															where Settlements_ExchangeSegmentID in (1,4)
															and Settlements_StartDateTime<='''+@fordate+'''
															and Settlements_FundsPayin>='''+@fordate+'''
														)
				and DematPosition_SettlementType in (
															select distinct Settlements_TypeSuffix
															from Master_Settlements
															where Settlements_ExchangeSegmentID in (1,4)
															and Settlements_StartDateTime<='''+@fordate+'''
															and Settlements_FundsPayin>='''+@fordate+'''
														)
				and DematPosition_finyear='''+@Finyear+'''
				and DematPosition_CustomerID like ''CL%''
				and DematPosition_CustomerID in (SELECT DISTINCT CLI FROM #DISTINCTCLIENT)
				and DematPosition_Segmentid in ('+@segment+')
				and DematPosition_companyid='''+@Companyid+''''

			insert into @dematposition(dematposition_CustomerID,dematposition_ProductSeriesID,
			dematposition_Segmentid,dematposition_QtyToReceive,
			dematposition_QtyToDeliver,
			dematposition_SettlementsNumber,dematposition_SettlementsType)	
			exec(@Sql)

--							print(@Sql)
			

			DECLARE @DematTransactions table(DematTransactions_CustomerID varchar(15),
			DematTransactions_ProductSeriesID varchar(50),
			DematTransactions_Segmentid varchar(20),DematTransactions_Quantity NUMERIC(28,6),
			DematTransactions_SettlementsNumber varchar(30),DematTransactions_SettlementsType varchar(30))

			DECLARE  @TEMP table(client varchar(15),
			product varchar(50),qty numeric(28,6),closeprice NUMERIC(28,6),
			haircut numeric(28,6),calvalue numeric(28,6))


			--------Calculation Pending Sales
			insert into @DematTransactions(DematTransactions_CustomerID,DematTransactions_ProductSeriesID,
										   DematTransactions_Segmentid,
										   DematTransactions_SettlementsNumber,DematTransactions_SettlementsType,
										   DematTransactions_Quantity)	
			
			select DematTransactions_CustomerID,
			DematTransactions_ProductSeriesID,DematTransactions_segmentid,
			DematTransactions_SettlementNumberT ,DematTransactions_SettlementTypeT,
			DematTransactions_Quantity
			from Trans_DematTransactions,@dematposition 
			where 
			DematTransactions_SettlementTypeT=dematposition_SettlementsType
			and DematTransactions_SettlementNumberT=dematposition_SettlementsNumber
			and DematTransactions_ProductSeriesID=dematposition_ProductSeriesID
			and DematTransactions_Date<=@fordate
			and DematTransactions_CustomerID=dematposition_CustomerID
			and DematTransactions_segmentid=dematposition_Segmentid
			and DematTransactions_companyid=@Companyid
			and DematTransactions_finyear=@Finyear


		

			insert into @TEMP (qty,client,product)
			select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
			case when dematposition_CustomerID is null then DematTransactions_CustomerID else dematposition_CustomerID end as customer,
			case when dematposition_ProductSeriesID is  null then  DematTransactions_ProductSeriesID else dematposition_ProductSeriesID end as productid
			from
			(select sum(isnull(dematposition_QtyToReceive,0.0)) as SumQtyToReceive,
			dematposition_CustomerID,dematposition_ProductSeriesID 
			from @dematposition where dematposition_QtyToReceive>0
			group by dematposition_CustomerID,dematposition_ProductSeriesID) as TAB1

			left outer join

			(select sum(isnull(DematTransactions_Quantity,0.0)) as Sum_Quantity,
			DematTransactions_CustomerID,DematTransactions_ProductSeriesID 
			from @DematTransactions
			group by DematTransactions_CustomerID,DematTransactions_ProductSeriesID ) as TAB2

			on(dematposition_CustomerID=DematTransactions_CustomerID 
						and dematposition_ProductSeriesID=DematTransactions_ProductSeriesID)



		----CLOSE PRICE FETCH
			update @TEMP  set closeprice=DailyStat_Close
			from Trans_DailyStatistics,
			(select MAX(DailyStat_DateTime) AS DATE, DailyStat_ProductSeriesID AS PRD
			from Trans_DailyStatistics,@TEMP
			where DailyStat_DateTime<=@fordate
			AND DailyStat_ProductSeriesID=product
			GROUP BY DailyStat_ProductSeriesID) AS TB
			WHERE DailyStat_ProductSeriesID=product
			AND PRD=DailyStat_ProductSeriesID 
			AND PRD=product
			AND DailyStat_DateTime=DATE

		----HAIRCUT FETCH
			update @TEMP  set haircut =DailyVar_AppMargin
			from Trans_DailyVar,
			(select MAX(DailyVar_Date) AS DATE, DailyVar_ProductSeriesID AS PRD
			from Trans_DailyVar,@TEMP
			where DailyVar_Date<=@fordate 
			and DailyVar_ProductSeriesID=product
			GROUP BY DailyVar_ProductSeriesID) AS TB
			where DailyVar_ProductSeriesID=product
			AND PRD=DailyVar_ProductSeriesID 
			AND product=PRD 
			AND DailyVar_Date=DATE
		-------FOR calvalue 
			update @TEMP  set calvalue=(ISNULL(qty ,0)*ISNULL(closeprice,0))*(100+haircut)/100


		---------*******[MAIN TABLE UPDATE]**********

		UPDATE #tab SET pendsale  =(-1)*isnull(result,0) from 
		(select sum(isnull(abs(calvalue),0)) as result,client  from @TEMP 
		 group by client )as kk
		 where clientid =client
		
		insert into #tab(clientid,pendsale) 
		SELECT client,(-1)*result FROM
		(select sum(isnull(abs(calvalue),0)) as result,client  from @TEMP 
		 group by client )as kk
		 where client NOT IN(SELECT DISTINCT clientid FROM #tab)

		DELETE FROM @DematTransactions
		DELETE FROM @TEMP
	
		--------Calculation Pending PURCHASE
		insert into @DematTransactions(DematTransactions_CustomerID,DematTransactions_ProductSeriesID,
									   DematTransactions_Segmentid,
									   DematTransactions_SettlementsNumber,DematTransactions_SettlementsType,
									   DematTransactions_Quantity)	
		
		select DematTransactions_CustomerID,
		DematTransactions_ProductSeriesID,DematTransactions_segmentid,
		DematTransactions_SettlementNumbers,DematTransactions_SettlementTypeS,
		DematTransactions_Quantity
		from Trans_DematTransactions,@dematposition 
		where 
		DematTransactions_SettlementTypeS=dematposition_SettlementsType
		and DematTransactions_SettlementNumberS=dematposition_SettlementsNumber
		and DematTransactions_ProductSeriesID=dematposition_ProductSeriesID
		and DematTransactions_Date<=@fordate
		and DematTransactions_CustomerID=dematposition_CustomerID
		and DematTransactions_segmentid=dematposition_Segmentid
		and DematTransactions_companyid=@Companyid
		and DematTransactions_finyear=@Finyear



		insert into @TEMP (qty,client,product)
		select (isnull(SumQtyToDeliver,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
		case when dematposition_CustomerID is null then DematTransactions_CustomerID else dematposition_CustomerID end as customer,
		case when dematposition_ProductSeriesID is  null then  DematTransactions_ProductSeriesID else dematposition_ProductSeriesID end as productid


		from
		(select sum(isnull(dematposition_QtyToDeliver,0.0)) as SumQtyToDeliver,
		dematposition_CustomerID,dematposition_ProductSeriesID 
		from @dematposition where dematposition_QtyToDeliver>0
		group by dematposition_CustomerID,dematposition_ProductSeriesID) as TAB1

		left outer join

		(select sum(isnull(DematTransactions_Quantity,0.0)) as Sum_Quantity,
		DematTransactions_CustomerID,DematTransactions_ProductSeriesID 
		from @DematTransactions
		group by DematTransactions_CustomerID,DematTransactions_ProductSeriesID ) as TAB2

		on(dematposition_CustomerID=DematTransactions_CustomerID 
					and dematposition_ProductSeriesID=DematTransactions_ProductSeriesID)



		----CLOSE PRICE FETCH
			update @TEMP  set closeprice=DailyStat_Close
			from Trans_DailyStatistics,
			(select MAX(DailyStat_DateTime) AS DATE, DailyStat_ProductSeriesID AS PRD
			from Trans_DailyStatistics,@TEMP
			where DailyStat_DateTime<=@fordate
			AND DailyStat_ProductSeriesID=product
			GROUP BY DailyStat_ProductSeriesID) AS TB
			WHERE DailyStat_ProductSeriesID=product
			AND PRD=DailyStat_ProductSeriesID 
			AND PRD=product
			AND DailyStat_DateTime=DATE

		----HAIRCUT FETCH
			update @TEMP  set haircut =DailyVar_AppMargin
			from Trans_DailyVar,
			(select MAX(DailyVar_Date) AS DATE, DailyVar_ProductSeriesID AS PRD
			from Trans_DailyVar,@TEMP
			where DailyVar_Date<=@fordate 
			and DailyVar_ProductSeriesID=product
			GROUP BY DailyVar_ProductSeriesID) AS TB
			where DailyVar_ProductSeriesID=product
			AND PRD=DailyVar_ProductSeriesID 
			AND product=PRD 
			AND DailyVar_Date=DATE
		-------FOR calvalue 
			update @TEMP  set calvalue=(ISNULL(qty ,0)*ISNULL(closeprice,0))*(100-haircut)/100


		---------*******[MAIN TABLE UPDATE]**********

		UPDATE #tab SET pendpur=isnull(result,0) from 
		(select sum(isnull(abs(calvalue),0)) as result,client  from @TEMP 
		 group by client )as kk
		 where clientid =client
		
		insert into #tab(clientid,pendpur) 
		select client,result  from 
		(select sum(isnull(abs(calvalue),0)) as result,client  from @TEMP 
		 group by client )as kk
		where client NOT IN(SELECT DISTINCT clientid FROM #tab)

	 ------------CALCULATE PNDING PURCHASE AND SALES END
	 
	 ------------CALCULATE STOCKS BEGIN

		declare @stocks table (QuantityS numeric(28,6),CustomerIDS varchar(15),
		ProductSeriesIDS varchar(50),SegmentIDS varchar(50),
		SettlementNumberS varchar(50),SettlementNumberT varchar(50),
		SourceSegmentId varchar(50),DPACIDS VARCHAR(50),DPACIDT VARCHAR(50))

		declare @stockssourcesegment table (QuantityS numeric(28,6),CustomerIDS varchar(50),
		ProductSeriesIDS varchar(50),SegmentIDS varchar(50),
		SettlementNumberS varchar(50),SettlementNumberT varchar(50),
		SourceSegmentId varchar(50),DPACIDS VARCHAR(50),DPACIDT VARCHAR(50))

		 select @Sql=''
		 select @Sql='select isnull(DematTransactions_Quantity,0) as QuantityS,
					DematTransactions_CustomerID as CustomerIDS,
					DematTransactions_ProductSeriesID as ProductSeriesIDS,
					DematTransactions_SegmentID as SegmentIDS,
					DematTransactions_SettlementNumberS as SettlementNumberS,
					DematTransactions_SettlementNumberT as SettlementNumberT,
					DematTransactions_SourceSegmentId as SourceSegmentId,
					DematTransactions_OwnAccountS,DematTransactions_OwnAccountT 
					from Trans_DematTransactions where
					(DematTransactions_SettlementNumberS IN (''Margin'',''HLDBK'') 
						OR DematTransactions_SettlementNumberT IN (''Margin'',''HLDBK''))
					and DematTransactions_Date<='''+@fordate+'''
					and DematTransactions_CustomerID in (SELECT DISTINCT CLI FROM #DISTINCTCLIENT)
					and (DematTransactions_SegmentID in ('+@segment+') or DematTransactions_SourceSegmentId in ('+@segment+'))
					and DematTransactions_CompanyID='''+@CompanyID+'''
					and DematTransactions_FinYear='''+@Finyear+''''


		insert into @stocks(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,SettlementNumberS,SettlementNumberT,SourceSegmentId,DPACIDS,DPACIDT)exec(@Sql)

		----------------------------------IF SOURCE SEGMENT IS NOT NULL		
		INSERT INTO @stockssourcesegment(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,SettlementNumberS,SettlementNumberT,SourceSegmentId,DPACIDS,DPACIDT)
		select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,SettlementNumberS,SettlementNumberT,SourceSegmentId,DPACIDS,DPACIDT
		from @stocks where SourceSegmentId is not null

		delete from @stocks where SourceSegmentId is not null

		------------------------------SPLIT RECORDS FOR SOURCE SEGMENT ID
		insert into @stocks
		(
		QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
		SettlementNumberS,SettlementNumberT,SourceSegmentId,
		DPACIDS,DPACIDT
		)
		select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
		SettlementNumberT,NULL,DPACIDS,DPACIDT
		from @stockssourcesegment where SourceSegmentId<>SegmentIDS


		insert into @stocks
		(
		QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
		SettlementNumberS,SettlementNumberT,SourceSegmentId,
		DPACIDS,DPACIDT
		)
		select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
		SettlementNumberS,null,NULL,DPACIDS,DPACIDT
		from @stockssourcesegment where SourceSegmentId<>SegmentIDS

		
		
		delete from @stocks where SegmentIDS not in (select col From  [fnSplitReturnTable](@segment,','))

		
		
		DECLARE  @HLDBKMRGNSTOCKS TABLE (CUSTOMER varchar(50),Stocksresult numeric(28,6),Quantity numeric(28,6),
		productid varchar(500),closeprice  numeric(28,6),varmargin numeric(28,6),STKTYPE VARCHAR(50),ORDERSTOCKS VARCHAR(10),
		DPACID VARCHAR(50),SCRIP VARCHAR(50),DPACCNAME VARCHAR(500),PLEDGE VARCHAR(10),
		OwnDpId varchar(40),OwnClientId varchar(40),DpSegMentId varchar(50))

			INSERT INTO @HLDBKMRGNSTOCKS(CUSTOMER,productid,Quantity,STKTYPE,ORDERSTOCKS,DPACID)
			select 
			case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
			case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
			(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,'Margin',
			CASE WHEN @stockreleaseorder='0' THEN '0' ELSE '1' END,
			CASE WHEN DPACIDS IS NULL THEN DPACIDT ELSE DPACIDS END  from

			(select  sum(isnull(QuantityS,0)) as QuantityS,
			CustomerIDS as CustomerIDS,
			ProductSeriesIDS as ProductSeriesIDS,DPACIDS
			from @stocks where
			rtrim(ltrim(SettlementNumberS))='Margin'
			group by CustomerIDS,ProductSeriesIDS,DPACIDS) as tabS
			
			full outer join

			(select  sum(isnull(QuantityS,0)) as QuantityT,
			CustomerIDS as CustomerIDT,
			ProductSeriesIDS as ProductSeriesIDT,
			DPACIDT
			from @stocks where
			rtrim(ltrim(SettlementNumberT))='Margin'
			group by CustomerIDS,ProductSeriesIDS,DPACIDT) as tabT
			
			on(CustomerIDS=CustomerIDT and ProductSeriesIDS=ProductSeriesIDT AND DPACIDS=DPACIDT)
			
			
			INSERT INTO @HLDBKMRGNSTOCKS(CUSTOMER,productid,Quantity,STKTYPE,ORDERSTOCKS,DPACID)
			select 
			case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
			case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
			(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,'HLDBK',
			CASE WHEN @stockreleaseorder='0' THEN '1' ELSE '0' END,
			CASE WHEN DPACIDS IS NULL THEN DPACIDT ELSE DPACIDS END from

			(select  sum(isnull(QuantityS,0)) as QuantityS,
			CustomerIDS as CustomerIDS,
			ProductSeriesIDS as ProductSeriesIDS,
			DPACIDS
			from @stocks where
			rtrim(ltrim(SettlementNumberS))='HLDBK'
			group by CustomerIDS,ProductSeriesIDS,DPACIDS) as tabS
			
			full outer join

			(select  sum(isnull(QuantityS,0)) as QuantityT,
			CustomerIDS as CustomerIDT,
			ProductSeriesIDS as ProductSeriesIDT,
			DPACIDT
			from @stocks where
			rtrim(ltrim(SettlementNumberT))='HLDBK'
			group by CustomerIDS,ProductSeriesIDS,DPACIDT) as tabT
			
			on(CustomerIDS=CustomerIDT and ProductSeriesIDS=ProductSeriesIDT AND DPACIDS=DPACIDT)


	
	--CLOSE PRICE FETCH
	
			update @HLDBKMRGNSTOCKS  set closeprice=DailyStat_Close
			from Trans_DailyStatistics,
			(select MAX(DailyStat_DateTime) AS DATE, DailyStat_ProductSeriesID AS PRD
			from Trans_DailyStatistics
			where DailyStat_DateTime<=@fordate
			AND DailyStat_ProductSeriesID IN(SELECT DISTINCT productid FROM @HLDBKMRGNSTOCKS)
			GROUP BY DailyStat_ProductSeriesID) AS TB
			WHERE DailyStat_ProductSeriesID=productid
			AND PRD=DailyStat_ProductSeriesID 
			AND PRD=productid
			AND DailyStat_DateTime=DATE

		-------------HAIRCUT FETCH
							
			update @HLDBKMRGNSTOCKS  set varmargin =DailyVar_AppMargin
			from Trans_DailyVar,
			(select MAX(DailyVar_Date) AS DATE, DailyVar_ProductSeriesID AS PRD
			from Trans_DailyVar
			where DailyVar_Date<=@fordate 
			and DailyVar_ProductSeriesID IN(SELECT DISTINCT productid FROM @HLDBKMRGNSTOCKS)
			GROUP BY DailyVar_ProductSeriesID) AS TB
			where DailyVar_ProductSeriesID=productid
			AND PRD=DailyVar_ProductSeriesID 
			AND productid=PRD 
			AND DailyVar_Date=DATE

			update @HLDBKMRGNSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)

				update #tab set mrgnstocks=Stocksresult from 
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,CUSTOMER
				 from @HLDBKMRGNSTOCKS 	WHERE STKTYPE='Margin' group by CUSTOMER) as tab
				 where CUSTOMER=clientid 

				 insert into #tab(clientid,mrgnstocks) 
				 select DISTINCT CUSTOMER, Stocksresult FROM
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,CUSTOMER
				 from @HLDBKMRGNSTOCKS 	WHERE STKTYPE='Margin' group by CUSTOMER) as  tab
				 where CUSTOMER NOT IN(SELECT DISTINCT clientid FROM #tab)
				 
				update #tab set hldbkstocks=Stocksresult from 
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,CUSTOMER
				 from @HLDBKMRGNSTOCKS 	WHERE STKTYPE='HLDBK' group by CUSTOMER) as tab
				 where CUSTOMER=clientid 

				 insert into #tab(clientid,hldbkstocks) 
				 select DISTINCT CUSTOMER, Stocksresult FROM
				(select sum(isnull(Stocksresult,0.0)) as Stocksresult,CUSTOMER
				 from @HLDBKMRGNSTOCKS 	WHERE STKTYPE='HLDBK' group by CUSTOMER) as tab
				 where CUSTOMER NOT IN(SELECT DISTINCT clientid FROM #tab)
				 
			 
		------------CALCULATE STOCKS END

		
		Select * into #OtherReleaseDetail From
		
		(	Select isnull(F10.CustomerID,F11.CustomerID) as CustomerID,Release_TDayCMBill,Release_TM1DayCMBill,Release_TDayCMDeliveryIN,Release_TM1DayCMDeliveryIN,Release_TDayCMDeliveryOut,
			Release_TM1DayCMDeliveryOut,Release_TDayCMTurnover,Release_TDayFOBill,Release_TM1DayFOBill,Release_TDayFOExposure,
			Release_TDayCDBill,Release_TM1DayCDBill,Release_TDayCDExposure,F10.OtherRetention as Release_OtherRetention,DailyFOMargin_TotalMargin as Release_TDayFOMargin,ComMarginSummary_TotalMargin as Release_TDayCDMargin
			,CmMarginSummary_TotalMargin as Release_TDayCMMargin
			From
			(Select isnull(Fo_Comm.CustomerID,Cm.CustomerID) as CustomerID,isnull(Release_TDayCMBill,0.00)Release_TDayCMBill,isnull(Release_TM1DayCMBill,0.00)Release_TM1DayCMBill,
			isnull(Release_TDayCMDeliveryIN,0.00)Release_TDayCMDeliveryIN,isnull(Release_TM1DayCMDeliveryIN,0.00)Release_TM1DayCMDeliveryIN,
			isnull(Release_TDayCMDeliveryOut,0.00)Release_TDayCMDeliveryOut,isnull(Release_TM1DayCMDeliveryOut,0.00)Release_TM1DayCMDeliveryOut,
			isnull(Release_TDayCMTurnover,0.00)Release_TDayCMTurnover,isnull(Release_TDayFOBill,0.00)Release_TDayFOBill,
			isnull(Release_TM1DayFOBill,0.00)Release_TM1DayFOBill,isnull(Release_TDayFOExposure,0.00)Release_TDayFOExposure,
			isnull(Release_TDayCDBill,0.00)Release_TDayCDBill,isnull(Release_TM1DayCDBill,0.00)Release_TM1DayCDBill,isnull(Release_TDayCDExposure,0.00)Release_TDayCDExposure,
			(Case When (isnull(Release_TDayFOBill,0.00)<0) Then isnull(ABS(Release_TDayFOBill),0.00) Else 0 End +
			 Case When (isnull(Release_TDayCDBill,0.00)<0) Then isnull(ABS(Release_TDayCDBill),0.00) Else 0 End +
			 Case When (isnull(Release_TDayCMBill,0.00)<0) Then isnull(ABS(Release_TDayCMBill),0.00) Else 0 End +
			 Case When (isnull(Release_TM1DayCMBill,0.00)<0) Then isnull(ABS(Release_TM1DayCMBill),0.00) Else 0 End +
			 (isnull(ABS(Release_TDayCMDeliveryIn),0.00)+isnull(ABS(Release_TM1DayCMDeliveryIN),0.00)+isnull(ABS(Release_TDayCMTurnover),0.00))) as OtherRetention
			From
			(Select isnull(Fo.CustomerID,Comm.CustomerID) as CustomerID,Release_TDayFOBill,Release_TM1DayFOBill,Release_TDayFOExposure,
			Release_TDayCDBill,Release_TM1DayCDBill,Release_TDayCDExposure From
			(Select isnull(FO1.CustomerID,FO2.CustomerID) as CustomerID,Release_TDayFOBill,Release_TM1DayFOBill,Release_TDayFOExposure From
			(Select isnull(T1.CustomerID,T2.CustomerID) as CustomerID,isnull(Release_TDayFOBill,0.00) Release_TDayFOBill,isnull(Release_TM1DayFOBill,0.00) Release_TM1DayFOBill
			From
			(Select FoPositionSummary_CustomerExchangeID as CustomerID,Sum(FoPositionSummary_NetBillAmount) as Release_TDayFOBill from Trans_FoPositionSummary Where 
			FoPositionSummary_FinYear=@FinYear and
			FoPositionSummary_CompanyID=@CompanyID and
			FoPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			FoPositionSummary_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and 
			FoPositionSummary_Date=@TDay
			Group By FoPositionSummary_CustomerExchangeID) T1
			Full Outer Join
			(Select FoPositionSummary_CustomerExchangeID as CustomerID,Sum(FoPositionSummary_NetBillAmount) as Release_TM1DayFOBill from Trans_FoPositionSummary Where 
			FoPositionSummary_FinYear=@FinYear and
			FoPositionSummary_CompanyID=@CompanyID and
			FoPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			FoPositionSummary_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and 
			FoPositionSummary_Date=@TM1Day
			Group By FoPositionSummary_CustomerExchangeID) T2
			On T1.CustomerID=T2.CustomerID) FO1
			Full Outer Join
			(Select FoPosition_CustomerExchangeID as CustomerID,
			Sum(ABS(isnull(FoPosition_PostExcAsnDlvLongValue,0))+Abs(isnull(FoPosition_PostExcAsnDlvShortValue,0))) as  Release_TDayFOExposure
			from Trans_FoPosition Where
			FoPosition_FinYear=@FinYear and
			FoPosition_CompanyID=@CompanyID and
			FoPosition_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			FoPosition_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and
			FoPosition_Date=@TDay
			Group By FoPosition_CustomerExchangeID) FO2
			On FO1.CustomerID=FO2.CustomerID) FO
			Full Outer Join
			(Select isnull(Comm1.CustomerID,Comm2.CustomerID) as CustomerID,Release_TDayCDBill,Release_TM1DayCDBill,Release_TDayCDExposure From
			(Select isnull(T1.CustomerID,T2.CustomerID) as CustomerID,isnull(Release_TDayCDBill,0.00) as Release_TDayCDBill,isnull(Release_TM1DayCDBill,0.00) as Release_TM1DayCDBill
			From
			(Select ComPositionSummary_CustomerExchangeID as CustomerID,Sum(ComPositionSummary_NetBillAmount) as Release_TDayCDBill from Trans_ComPositionSummary Where 
			ComPositionSummary_FinYear=@FinYear and
			ComPositionSummary_CompanyID=@CompanyID and
			ComPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			ComPositionSummary_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and
			ComPositionSummary_Date=@TDay
			Group By ComPositionSummary_CustomerExchangeID) T1
			Full Outer Join
			(Select ComPositionSummary_CustomerExchangeID as CustomerID,Sum(ComPositionSummary_NetBillAmount) as Release_TM1DayCDBill from Trans_ComPositionSummary Where 
			ComPositionSummary_FinYear=@FinYear and
			ComPositionSummary_CompanyID=@CompanyID and
			ComPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			ComPositionSummary_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and
			ComPositionSummary_Date=@TM1Day
			Group By ComPositionSummary_CustomerExchangeID) T2
			On T1.CustomerID=T2.CustomerID) Comm1
			Full Outer Join
			(Select ComPosition_CustomerExchangeID as CustomerID,
			Sum(ABS(isnull(ComPosition_PostExcAsnDlvLongValue,0))+Abs(isnull(ComPosition_PostExcAsnDlvShortValue,0))) as  Release_TDayCDExposure
			from Trans_ComPosition Where
			ComPosition_FinYear=@FinYear and
			ComPosition_CompanyID=@CompanyID and
			ComPosition_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			ComPosition_CustomerExchangeID in (Select * from #DISTINCTCLIENT) and
			ComPosition_Date=@TDay
			Group By ComPosition_CustomerExchangeID) Comm2
			on Comm1.CustomerID=Comm2.CustomerID) Comm
			On FO.CustomerID=Comm.CustomerID) Fo_Comm
			Full Outer Join
			(Select isnull(Cm1.CustomerID,Cm2.CustomerID) as CustomerID,Release_TDayCMBill,Release_TM1DayCMBill,Release_TDayCMDeliveryIN,
			Release_TM1DayCMDeliveryIN,Release_TDayCMDeliveryOut,Release_TM1DayCMDeliveryOut,Release_TDayCMTurnover
			From
			(Select isnull(T1.CustomerID,T2.CustomerID) as CustomerID,isnull(Release_TDayCMBill,0.00) Release_TDayCMBill,isnull(Release_TM1DayCMBill,0.00) Release_TM1DayCMBill
			From
			(Select CMPositionSummary_CustomerID as CustomerID,Sum(CMPositionSummary_NetSettlementObligation) as Release_TDayCMBill from Trans_CMPositionSummary Where 
			--CMPositionSummary_FinYear=@FinYear and
			CMPositionSummary_CompanyID=@CompanyID and
			CMPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			CMPositionSummary_CustomerID in (Select * from #DISTINCTCLIENT) and 
			CmPositionSummary_TradeDate=@TDay
			Group By CMPositionSummary_CustomerID) T1
			Full Outer Join
			(Select CMPositionSummary_CustomerID as CustomerID,Sum(CMPositionSummary_NetSettlementObligation) as Release_TM1DayCMBill from Trans_CMPositionSummary Where 
			--CMPositionSummary_FinYear=@FinYear and
			CMPositionSummary_CompanyID=@CompanyID and
			CMPositionSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			CMPositionSummary_CustomerID in (Select * from #DISTINCTCLIENT) and 
			CmPositionSummary_TradeDate=@TM1Day
			Group By CMPositionSummary_CustomerID) T2
			On T1.CustomerID=T2.CustomerID) Cm1
			Full Outer Join
			(Select isnull(T1.CustomerID,T2.CustomerID) as CustomerID,isnull(Release_TDayCMDeliveryIN,0.00) Release_TDayCMDeliveryIN,
			isnull(Release_TM1DayCMDeliveryIN,0.00) Release_TM1DayCMDeliveryIN,isnull(Release_TDayCMDeliveryOut,0.00) Release_TDayCMDeliveryOut,
			isnull(Release_TM1DayCMDeliveryOut,0.00) Release_TM1DayCMDeliveryOut,Release_TDayCMTurnover
			From
			(Select CmPosition_CustomerID as CustomerID,Sum(CmPosition_DeliverySellValue) as Release_TDayCMDeliveryIN,
			Sum(CMPosition_DeliveryBuyValue) as  Release_TDayCMDeliveryOut,Sum(CmPosition_TotalBuyvalue+CmPosition_TotalSellValue) Release_TDayCMTurnover from Trans_CMPosition Where 
			---CmPosition_FinYear=@FinYear and
			CmPosition_CompanyID=@CompanyID and
			CmPosition_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			CmPosition_TradeDate=@TDay and
			CmPosition_CustomerID in (Select * from #DISTINCTCLIENT)
			Group By CmPosition_CustomerID) T1
			Full Outer Join
			(Select CmPosition_CustomerID as CustomerID,Sum(CmPosition_DeliverySellValue) as Release_TM1DayCMDeliveryIN,
			Sum(CMPosition_DeliveryBuyValue) as  Release_TM1DayCMDeliveryOut from Trans_CMPosition Where 
			--CmPosition_FinYear=@FinYear and
			CmPosition_CompanyID=@CompanyID and
			CmPosition_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			CmPosition_TradeDate=@TM1Day and
			CmPosition_CustomerID in (Select * from #DISTINCTCLIENT)
			Group By CmPosition_CustomerID) T2
			On T1.CustomerID=T2.CustomerID) Cm2
			on Cm1.CustomerID=Cm2.CustomerID) Cm
			On Fo_Comm.CustomerID=Cm.CustomerID) F10
			Full Outer Join
			(Select isnull(T3.CustomerID,T4.CustomerID) as CustomerID ,DailyFOMargin_TotalMargin,ComMarginSummary_TotalMargin,CmMarginSummary_TotalMargin
			From
			(Select isnull(T1.CustomerID,T2.CustomerID) as CustomerID,DailyFOMargin_TotalMargin,ComMarginSummary_TotalMargin
			From
			(Select DailyFOMargin_CustomerID as CustomerID,Sum(DailyFOMargin_TotalMargin)DailyFOMargin_TotalMargin from Trans_DailyFOMargin Where 
			DailyFOMargin_FinYear= @FinYear and
			DailyFOMargin_CompanyID=@CompanyID and
			DailyFOMargin_ExchangeSegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			DailyFOMargin_date=@TDay and
			DailyFOMargin_CalculationType='E'
			Group By DailyFOMargin_CustomerID) T1
			Full Outer Join
			(Select ComMarginSummary_CustomerID as CustomerID,Sum(ComMarginSummary_TotalMargin)ComMarginSummary_TotalMargin from Trans_ComMarginSummary Where 
			ComMarginSummary_FinYear= @FinYear and
			ComMarginSummary_CompanyID=@CompanyID and
			ComMarginSummary_SegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			ComMarginSummary_date=@TDay and
			ComMarginSummary_CalType='E'
			Group By ComMarginSummary_CustomerID) T2
			On T1.CustomerID=T2.CustomerID) T3
			Full Outer Join
			(Select CmMarginSummary_CustomerID as CustomerID,Sum(CmMarginSummary_TotalMargin)CmMarginSummary_TotalMargin from Trans_CmMarginSummary Where 
			CmMarginSummary_FinYear= @FinYear and
			CmMarginSummary_CompanyID=@CompanyID and
			CmMarginSummary_ExchangeSegmentID in (select col from fnSplitReturnTable(@Segment,',')) and
			CmMarginSummary_date=@TDay and
			CmMarginSummary_CalculationType='EXCH'
			Group By CmMarginSummary_CustomerID) T4
			On T3.CustomerID=T4.CustomerID) F11
			On F10.CustomerID=F11.CustomerID) as New




				---------------applmargin cal
				If @WrkingDays=1
				Begin

				--Old
									---------From CM
				--					Select @Sql='
				--					update #tab set appmrgn=result from
				--					(select Sum(isnull(CMMarginSummary_TotalMargin,0)) as result,CMMarginSummary_CustomerID
				--					FROM Trans_CMMarginSummary, 
				--												(
				--													select max(CMMarginSummary_Date) AS DATE
				--													from Trans_CMMarginSummary
				--													where 
				--													CMMarginSummary_CalculationType=''Exch''
				--													AND CMMarginSummary_Date<='''+@fordate +'''
				--													and  CMMarginSummary_ExchangeSegmentID in ('+@segment+')
				--													and CMMarginSummary_CompanyID='''+@Companyid+'''
				--												) AS JJ
				--					where CMMarginSummary_CalculationType=''Exch''
				--					AND CMMarginSummary_CustomerID IN(SELECT DISTINCT clientid FROM #tab)
				--					AND CMMarginSummary_Date=DATE
				--					and  CMMarginSummary_ExchangeSegmentID in ('+@segment+')							
				--					and CMMarginSummary_CompanyID='''+@Companyid+'''
				--					GROUP BY CMMarginSummary_CustomerID) AS KK
				--					where CMMarginSummary_CustomerID=clientid '
				--					exec(@Sql)
									---------From FO
				--					Select @Sql='
				--					update #tab set appmrgn=isnull(appmrgn,0)+isnull(result,0) from
				--					(select  case when sum(isnull(DailyFOMargin_ApplicableMargin,0.0))=0.0 then 
				--							   sum(isnull(DailyFOMargin_TotalMargin,0.0))+sum(ISNULL(DailyFOMargin_ExposureMargin,0.0))
				--					else sum(isnull(DailyFOMargin_ApplicableMargin,0.0)) end as result,DailyFOMargin_CustomerID
				--					FROM Trans_DailyFOMargin, 
				--												(
				--													select max(DailyFOMargin_Date) AS DATE
				--													from Trans_DailyFOMargin
				--													where 
				--													DailyFOMargin_CalculationType=''E''
				--													AND DailyFOMargin_Date<='''+@fordate +''' 
				--													and  DailyFOMargin_ExchangeSegmentID in ('+@segment+')
				--													and DailyFOMargin_CompanyID='''+@Companyid+'''
				--												) AS JJ
				--					where DailyFOMargin_CalculationType=''E''
				--					AND DailyFOMargin_CustomerID IN (SELECT DISTINCT clientid FROM #tab)
				--					AND DailyFOMargin_Date=DATE
				--					and DailyFOMargin_ExchangeSegmentID in ('+@segment+')					
				--					and DailyFOMargin_CompanyID='''+@Companyid+'''
				--					GROUP BY DailyFOMargin_CustomerID) AS KK
				--					where DailyFOMargin_CustomerID=clientid '
				--					exec(@Sql)

						--Old End

			--New

						update #tab Set appmrgn=isnull(Release_TDayFOMargin,0.00)+isnull(Release_TDayCDMargin,0.00)
						From #OtherReleaseDetail Where Ltrim(Rtrim(ClientID))=Ltrim(Rtrim(CustomerID))

			--New End
						----------Calculation For MarkUp
						update #tab set appmrgnwithmarkup=appmrgn*@markupappmrgn/100,avgmargin=appmrgn,
						appmrgnwithmarkupcash=(appmrgn*@markupappmrgn/100)*@maintaincashcomp/100
						
				End
				Else
				Begin
						
						Create Table #WorkingDays_Table (working_date datetime)
						;with dates ( date )
						as
						(
							select DATEADD(dd, @@DATEFIRST - DATEPART(dw,cast(@fordate as datetime)) - cast(@WrkingDays as int),cast(@fordate as datetime))
							union all
							select dateadd(d,1,date)
							from dates
							where date < cast(@fordate as datetime)
						)
						insert into #WorkingDays_Table
						select date from dates where datename(dw,date) not in ('Sunday','Saturday') 
						

						-----------Del Record For Holiday
						Delete From #WorkingDays_Table where working_date in 
											(select hol_DateOfHoliday from tbl_master_holiday,tbl_master_holiday_exchange
											where hol_IsHoliday='Y'
											and hol_DateOfHoliday=working_date
											and holE_exchId in (select exh_id From tbl_master_exchange where 
															 exh_cntid in ('EXN0000002','EXB0000001'))
											and holE_hol_id=hol_id
											)
					   ---------App Margin Cal
						create Table #AppMargin(CustomerId varchar(15),AppMargin numeric(28,2),Date Datetime)
					    
						Select @Sql='
						Select Client,Sum(Isnull(Margin,0)) as Margin,Date
						From
						(select CMMarginSummary_CustomerID as Client,isnull(CMMarginSummary_TotalMargin,0) as Margin,
						CMMarginSummary_Date as Date
						FROM Trans_CMMarginSummary
						where CMMarginSummary_CalculationType=''Exch''
						AND CMMarginSummary_CustomerID IN(SELECT DISTINCT clientid FROM #tab)
						AND CMMarginSummary_Date in (select working_date From #WorkingDays_Table)
						and  CMMarginSummary_ExchangeSegmentID in ('+@segment+')							
						and CMMarginSummary_CompanyID='''+@Companyid+'''
						union all
						select DailyFOMargin_CustomerID as Client,
						case when isnull(DailyFOMargin_ApplicableMargin,0)=0 Then isnull(DailyFOMargin_TotalMargin,0)+ISNULL(DailyFOMargin_ExposureMargin,0)
						else isnull(DailyFOMargin_ApplicableMargin,0) end  as Margin,
						DailyFOMargin_Date as Date
						FROM Trans_DailyFOMargin
						where DailyFOMargin_CalculationType=''E''
						AND DailyFOMargin_CustomerID IN(SELECT DISTINCT clientid FROM #tab)
						AND DailyFOMargin_Date in (select working_date From #WorkingDays_Table)
						and DailyFOMargin_ExchangeSegmentID in ('+@segment+')							
						and DailyFOMargin_CompanyID='''+@Companyid+''') as dd
						Group By Client,Date' 

						Insert Into #AppMargin(CustomerId,AppMargin,Date)exec(@Sql)
						

						update #tab set appmrgn=isnull(Mrgn,0)/CountDate,avgmargin=isnull(Mrgn,0)/CountDate,
										appmrgnwithmarkup=isnull(Mrgn,0)/CountDate*@markupappmrgn/100,
										appmrgnwithmarkupcash=(isnull(Mrgn,0)/CountDate*@markupappmrgn/100)*@maintaincashcomp/100
						 From
						(Select Sum(isnull(AppMargin,0)) as Mrgn,CustomerId,
						(Select Count(Date) From #AppMargin Where #AppMargin.CustomerId= dd.CustomerId) as CountDate
						From #AppMargin as dd Group By CustomerId)as jj
						Where CustomerId=clientid



						Drop Table #WorkingDays_Table
						Drop Table #AppMargin
				End
				---------------------OTHER CALCULATION
				
				----Old
				--			update #tab set noncashdep=isnull(pendpur,0)+isnull(pendsale,0)+isnull(hldbkstocks,0)+isnull(mrgnstocks ,0),
				--						    netdeposit=isnull(totaldept,0)+isnull(pendpur,0)+isnull(pendsale,0)+isnull(hldbkstocks,0)+isnull(mrgnstocks ,0),
				--							excessshortage=(isnull(totaldept,0)+isnull(pendpur,0)+isnull(pendsale,0)+isnull(hldbkstocks,0)+isnull(mrgnstocks ,0))-isnull(appmrgnwithmarkup,0)

				----New
				Update #Tab Set TDayFoBill=isnull(Release_TDayFOBill,0.00),TDayCDBill=isnull(Release_TDayCDBill,0.00),OtherRetention=isnull(Release_OtherRetention,0.00),
				   TDayCMBill=isnull(Release_TDayCMBill,0.00) ,TM1DayCMBill=isnull(Release_TM1DayCMBill,0.00),TDayCMDeliveryIN=isnull(Release_TDayCMDeliveryIN,0.00),
				   TDayCMDeliveryOut=isnull(Release_TDayCMDeliveryOut,0.00) ,TM1DayCMDeliveryIN=isnull(Release_TM1DayCMDeliveryIN,0.00),
				   TM1DayCMDeliveryOut=isnull(Release_TM1DayCMDeliveryOut,0.00),TDayCMTurnover=isnull(Release_TDayCMTurnover,0.00),
				   TDayFOExposure=isnull(Release_TDayFOExposure,0.00),TDayCDExposure=isnull(Release_TDayCDExposure,0.00),
				   TDayFOMargin =isnull(Release_TDayFOMargin,0.00),TDayCDMargin=isnull(Release_TDayCDMargin,0.00),
				   TDayCMMargin=isnull(Release_TDayCMMargin,0.00)
				   
				From #OtherReleaseDetail Where Ltrim(Rtrim(ClientID))=Ltrim(Rtrim(CustomerID))

				
				update #tab set noncashdep=isnull(hldbkstocks,0)+isnull(mrgnstocks ,0),
								netdeposit=(isnull(totaldept,0)+isnull(hldbkstocks,0)+isnull(mrgnstocks ,0))-(isnull(TDayFoBill,0)+isnull(TDayCDBill,0)),
								excessshortage=((isnull(totaldept,0)+isnull(hldbkstocks,0)+isnull(mrgnstocks ,0))-(isnull(TDayFoBill,0)+isnull(TDayCDBill,0)))-(isnull(appmrgnwithmarkup,0)+isnull(OtherRetention,0))



--------End New 

		--Old
		--			If @PRINTCHK='Position'
		--			Begin
		--				DELETE FROM #tab WHERE excessshortage<=0
		--			End
		--Old end			

		--			update #tab set refundcash =CASE WHEN isnull(totaldept,0)>isnull(appmrgnwithmarkupcash,0) AND isnull(totaldept,0)>0 
		--												  and isnull(excessshortage,0)>(isnull(totaldept,0)-isnull(appmrgnwithmarkupcash,0))
		--										THEN (isnull(totaldept,0)-isnull(appmrgnwithmarkupcash,0))
		--										ELSE isnull(excessshortage,0) END
						
		--			update #tab set refundstocks=CASE WHEN (isnull(hldbkstocks,0)+isnull(mrgnstocks ,0))>(ISNULL(excessshortage,0)-ISNULL(refundcash,0))
		--										 THEN (ISNULL(excessshortage,0)-ISNULL(refundcash,0))
		--										 ELSE 0 END 

				update #tab set refundstocks=CASE WHEN (isnull(hldbkstocks,0)+isnull(mrgnstocks ,0))>(ISNULL(excessshortage,0))
											 THEN 
												Case When  excessshortage<0 Then 0 Else ISNULL(excessshortage,0) End
											 ELSE (isnull(hldbkstocks,0)+isnull(mrgnstocks ,0)) END 
				
				delete from @HLDBKMRGNSTOCKS where Quantity=0.0
				
				----------FOR STOCKS		
			
				UPDATE @HLDBKMRGNSTOCKS SET SCRIP=--(isnull(Equity_TickerSymbol,''))+' '+(isnull(Equity_Series,ISNULL('['+Equity_TICKERCODE+']','')))
												  case when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is null
													then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')
														when isnull(Equity_StrikePrice,0.0)<>0.0 and Equity_EffectUntil is null
													then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)
														when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is not null
													then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+convert(varchar(9),Equity_EffectUntil,6)
												  else isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)+' '+convert(varchar(9),Equity_EffectUntil,6)
														end
				from master_equity where Equity_SeriesID=productid 
				
				UPDATE @HLDBKMRGNSTOCKS SET DPACCNAME=RTRIM(DPAccounts_ShortName),
											DpSegMentId=DPAccounts_exchangesegmentid,
											OwnDpId=DPAccounts_dpid,OwnClientId=DPAccounts_clientid,
				--PLEDGE=CASE WHEN DPAccounts_IsPledgeAccount='Y' THEN 'Yes' ELSE 'NO' END ,--Old
				PLEDGE=CASE WHEN DPAccounts_IsPledgeAccount='Y' THEN 'NO' ELSE 'NO' END ,--New
				--ORDERSTOCKS=CASE WHEN DPAccounts_IsPledgeAccount='Y' THEN 3 ELSE  ORDERSTOCKS END --Old
				ORDERSTOCKS=CASE WHEN DPAccounts_IsPledgeAccount='Y' THEN ORDERSTOCKS ELSE  ORDERSTOCKS END --New
				from Master_DPAccounts
				where DPAccounts_ID=DPACID  and DPAccounts_CompanyID=@CompanyID 
				

-------------------FOR LOOP
			DECLARE @CLIENT TABLE(CLIENT VARCHAR(50),STCKREFUND NUMERIC(28,6),ID INT IDENTITY(1,1))
			INSERT INTO @CLIENT
			SELECT DISTINCT clientid,refundstocks  FROM #tab WHERE refundstocks>0



			DECLARE @MAXID INT,@MINID INT,@SELECTCLIENT VARCHAR(50),@PLEDGECOUNT INT,@STOCKREFUND NUMERIC(28,6) 
			DECLARE @STOCKSMAXID INT,@STOCKSMINID INT 
			DECLARE @Stocksresult NUMERIC(28,6) ,@Quantity NUMERIC(28,6) ,@varmargin NUMERIC(28,6) ,@closeprice NUMERIC(28,6)
			
			
			select @MAXID=max(ID) from @CLIENT
			select @MINID=min(ID) from @CLIENT
			
			SELECT @SELECTCLIENT=NULL
			SELECT @STOCKREFUND=0
			SELECT @PLEDGECOUNT=0
			while @MAXID>=@MINID
			begin ------------------RESULT CAL BEGIN
				SELECT @STOCKREFUND=0
				select @SELECTCLIENT=CLIENT,@STOCKREFUND=STCKREFUND from @CLIENT where ID=@MINID
				
				INSERT INTO @STOCKSRELEASE
											(
											CUSTOMER,Stocksresult,Quantity,
											productid,closeprice,varmargin,STKTYPE,ORDERSTOCKS,
											DPAC,PLEDGEAC,SCRIPNAME,DpId,OwnDpId,OwnClientId,DpSegMentId
											)
				SELECT CUSTOMER,Stocksresult,Quantity,productid,closeprice,varmargin,STKTYPE,ORDERSTOCKS,
				DPACCNAME,PLEDGE,SCRIP,DPACID,OwnDpId,OwnClientId,DpSegMentId FROM @HLDBKMRGNSTOCKS 
				WHERE CUSTOMER=@SELECTCLIENT
				order by ORDERSTOCKS asc,varmargin desc
				
				

				SELECT @PLEDGECOUNT=0
				SELECT @PLEDGECOUNT=COUNT(PLEDGEAC) FROM @STOCKSRELEASE WHERE PLEDGEAC='NO' and CUSTOMER=@SELECTCLIENT
					----------------LOOP FOR RELEASE BEGIN
					select @STOCKSMAXID=max(STOCKSID) from @STOCKSRELEASE WHERE @PLEDGECOUNT<>0 and CUSTOMER=@SELECTCLIENT
					select @STOCKSMINID=min(STOCKSID) from @STOCKSRELEASE WHERE @PLEDGECOUNT<>0 and CUSTOMER=@SELECTCLIENT
					WHILE @STOCKSMAXID>=@STOCKSMINID
						BEGIN
							SELECT @Stocksresult=Stocksresult,@Quantity=Quantity,@varmargin=varmargin,@closeprice=closeprice
							FROM @STOCKSRELEASE WHERE STOCKSID=@STOCKSMINID AND PLEDGEAC='NO' and CUSTOMER=@SELECTCLIENT
							and isnull(Stocksresult,0)<>0
							 
							IF(@checkpartialrelease='UNCHK')
								BEGIN
										UPDATE @STOCKSRELEASE SET RELEASE=@Stocksresult WHERE @Stocksresult<=@STOCKREFUND and CUSTOMER=@SELECTCLIENT AND STOCKSID=@STOCKSMINID AND PLEDGEAC='NO'
										---------IF SPLIT IS NEEDED BEGIN 
										INSERT INTO @STOCKSRELEASE
											(
											CUSTOMER,Stocksresult,Quantity,
											productid,closeprice,varmargin,STKTYPE,ORDERSTOCKS,
											DPAC,PLEDGEAC,SCRIPNAME,DpId,OwnDpId,OwnClientId,DpSegMentId
											)
										SELECT CUSTOMER,
										((dbo.fnSplit((@Quantity-dbo.fnSplit(((@STOCKREFUND/@Stocksresult)*@Quantity),'.',1)),'.',1)*isnull(closeprice,0))*(100-isnull(varmargin,0))/100),
										dbo.fnSplit((@Quantity-dbo.fnSplit(((@STOCKREFUND/@Stocksresult)*@Quantity),'.',1)),'.',1),
										productid,@closeprice AS CLOSEPRICE,@varmargin AS VARMRGN,STKTYPE,ORDERSTOCKS,
										DPAC,PLEDGEAC,SCRIPNAME,DpId,OwnDpId,OwnClientId,DpSegMentId FROM @STOCKSRELEASE 
										WHERE CUSTOMER=@SELECTCLIENT AND STOCKSID=@STOCKSMINID AND @Stocksresult>@STOCKREFUND  AND PLEDGEAC='NO'
										
										UPDATE @STOCKSRELEASE SET 
										Quantity=dbo.fnSplit(((@STOCKREFUND/@Stocksresult)*@Quantity),'.',1),
										Stocksresult=((dbo.fnSplit((@STOCKREFUND/@Stocksresult*@Quantity),'.',1)*isnull(closeprice,0))*(100-isnull(varmargin,0))/100),
										RELEASE=((dbo.fnSplit((@STOCKREFUND/@Stocksresult*@Quantity),'.',1)*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)
										FROM @STOCKSRELEASE 
										WHERE CUSTOMER=@SELECTCLIENT AND STOCKSID=@STOCKSMINID AND @Stocksresult>@STOCKREFUND  AND PLEDGEAC='NO'
										
										IF(@Stocksresult>=@STOCKREFUND)
											BEGIN
												SELECT @STOCKREFUND=0
											END
										ELSE
											BEGIN
												SELECT @STOCKREFUND=@STOCKREFUND-@Stocksresult
											END
										
										
										IF(@STOCKREFUND=0)
										BEGIN
												BREAK;
										END
										---------IF SPLIT IS NEEDED END 
								END
							ELSE
								BEGIN
								
										UPDATE @STOCKSRELEASE SET RELEASE=@Stocksresult WHERE @Stocksresult<=@STOCKREFUND and CUSTOMER=@SELECTCLIENT AND PLEDGEAC='NO' AND STOCKSID=@STOCKSMINID
									    
									    
										IF(@Stocksresult<=@STOCKREFUND)
											BEGIN
												SELECT @STOCKREFUND=@STOCKREFUND-@Stocksresult
											END
										
										IF(@STOCKREFUND=0)
										BEGIN
												BREAK;
										END
								END
							
							select @STOCKSMINID=@STOCKSMINID+1
						END
					----------------LOOP FOR RELEASE END
					
				select @MINID=@MINID+1
			end  ------------------RESULT CAL END


		-------------Refund Stocks
			update #tab set refundstocks=Stock From
			(Select CUSTOMER,sum(isnull(RELEASE,0)) as Stock From @STOCKSRELEASE Group By CUSTOMER) as dg
			Where clientid=CUSTOMER
		--------------Cash Update

		update #tab set refundcash =
									CASE WHEN  isnull(excessshortage,0)-isnull(refundstocks,0)>(isnull(totaldept,0)-isnull(appmrgnwithmarkupcash,0))
									THEN (isnull(totaldept,0)-isnull(appmrgnwithmarkupcash,0))
									ELSE isnull(excessshortage,0)-isnull(refundstocks,0) END
		where (isnull(excessshortage,0)-isnull(refundstocks,0))>0 AND isnull(totaldept,0)>0 and isnull(totaldept,0)>isnull(appmrgnwithmarkupcash,0)  

		update #tab set refundcash =Case When ISNULL(ledgerbaln,0)+ISNULL(cashmrfndept,0)>isnull(refundcash,0)
									Then isnull(refundcash,0)
									Else ISNULL(ledgerbaln,0)+ISNULL(cashmrfndept,0) End
		Where isnull(refundcash,0)<>0
		

			------ALL RESULT DISPLAY
			declare @tabother TABLE (client varchar(50),clientname varchar(500),ucc varchar(50),
							 GROUPID varchar(50),GRPNAME varchar(500),
							 cmppanno varchar(50),cmpphno varchar(50),cmpfax varchar(50),
							 cmpemail varchar(50),cmpname varchar(500),
							 cmpaddress varchar(500),
							 CLIENTADDRESS1 varchar(500),CLIENTADDRESS2 varchar(500),
							 cmpservicetax varchar(50))

		--------------For Position Fecth
		If @PRINTCHK<>'Position'
		Begin
					  SELECT @sql=''
					  IF @PRINTCHK<>'SHOW'
					  BEGIN
							SELECT @sql='SELECT cmppanno,cmpphno,cmpfax,cmpemail,cmpname,cmpaddress,clientid,CLIENTNAME,UCC,
											GRPID,GRPNAME,
											(select top 1 (isnull(rtrim(ltrim(add_address1)),'''')+'' ''+isnull(rtrim(ltrim(add_address2)),''''))) AS CLIENTADDRESS1,
											(select top 1 (isnull(rtrim(ltrim(add_address3)),'''')+'' ''+isnull(rtrim(ltrim(add_pin)),'''')+'',''+
											(select top 1 isnull(city_name,'''') from tbl_master_city where city_id=add_city))) AS CLIENTADDRESS2,
											(select Top 1(cmp_serviceTaxNo) from tbl_master_company where cmp_internalid='''+@Companyid+''')as cmpservicetax 
							FROM( '
					  END
							SELECT @sql=@sql+' Select distinct '
						  IF @PRINTCHK<>'SHOW'
							BEGIN
								SELECT @sql=@sql+'(select Top 1(cmp_panNo) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmppanno,
											isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Work'' AND phf_cntId='''+@Companyid+'''),'''')as cmpphno,
											isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Fax'' AND phf_cntId='''+@Companyid+'''),'''')as cmpfax,
											(select Top 1(eml_email) from tbl_master_email where eml_cntid='''+@CompanyID+''' and eml_type=''Official'')as cmpemail,
											(select Top 1(cmp_Name) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmpname,
											(select top 1(isnull(add_address1,'' '')+'' ''+
														isnull(add_address2,'' '')+'' ''+isnull(add_address3,'' '')+'',''+
															isnull(city_name,'' '')+''-''+ isnull(add_pin,'' '')) 
																from tbl_master_address,tbl_master_company,tbl_master_city
																	where cmp_internalid=add_cntid and cmp_internalid='''+@CompanyID+'''
																		and add_city=city_id and add_cntID='''+@CompanyID+''' 
																			AND add_entity=''Company'' AND add_addressType=''Office'')as cmpaddress,
											'
							END
						  ELSE
							BEGIN
									SELECT @sql=@sql+'NULL,NULL,NULL,NULL,NULL,NULL,'
							END
									
						SELECT @sql=@sql+' clientid,(isnull(rtrim(cnt_firstName),'+char(39)+''+char(39)+') +'
									+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_middleName),'+char(39)+''+char(39)+')+'
									+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_lastName),'+char(39)+''+char(39)+')) AS CLIENTNAME,
									rtrim(cnt_UCC) AS UCC,'
						if(@grptype='BRANCH')
								BEGIN
									Select @sql=@sql+'branch_id AS GRPID,isnull(rtrim(branch_description),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(branch_code),'+char(39)+''+char(39)+')+'']'' AS GRPNAME'
								END
						ELSE 
							BEGIN
									Select @sql=@sql+'gpm_id AS GRPID,isnull(rtrim(GPM_DESCRIPTION),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(GPM_CODE),'+char(39)+''+char(39)+')+'']'' AS GRPNAME'
							END
						IF @PRINTCHK='SHOW'
						BEGIN
								SELECT @sql=@sql+',NULL,NULL,NULL'
						END
						Select @sql=@sql+'
						from #TAB,tbl_master_contact,'
						if(@grptype='BRANCH')
							BEGIN
										Select @sql=@sql+'tbl_master_branch '
										IF(@branch='ALL')
											BEGIN
												Select @sql=@sql+ 'where cnt_branchid=branch_id
																   and clientid=CNT_INTERNALID
																   AND cnt_branchid IN('+@grpval+')'
											END
										ELSE
											BEGIN
												Select @sql=@sql+ 'where cnt_branchid=branch_id
																   AND cnt_branchid IN('+@branch+')
																   and clientid=CNT_INTERNALID'
											END

								
							END
						ELSE
							BEGIN

									Select @sql=@sql+'tbl_master_groupmaster,tbl_trans_group '
										IF(@grpval='ALL')
											BEGIN
												Select @sql=@sql+ ' where grp_contactid=clientid
																	and cnt_internalid=grp_contactid
																	AND cnt_branchid IN('+@branch+')
																	AND gpm_type='''+@grptype+'''
																	AND grp_groupmaster=gpm_id
																	AND GRP_GROUPTYPE='''+@grptype+''''
											END
										ELSE
											BEGIN
												Select @sql=@sql+ ' where grp_contactid=clientid
																	AND cnt_branchid IN('+@branch+')
																	and cnt_internalid=grp_contactid
																	AND gpm_type='''+@grptype+'''
																	AND grp_groupmaster IN('+@grpval+')
																	AND grp_groupmaster=gpm_id
																	AND GRP_GROUPTYPE='''+@grptype+''''
											END
								
								
							END
						IF @PRINTCHK<>'SHOW'
								BEGIN
									Select @SQL=@SQL+') AS TB
													LEFT OUTER JOIN
									  tbl_master_address
										ON(add_cntID=clientid AND add_entity=''Customer/Client'' AND 
												add_addressType=(select top 1 add_addressType from 
																(select add_addressType,
																  case when rtrim(ltrim(add_addressType))=''Correspondence'' then 1
																	when rtrim(ltrim(add_addressType))=''Registered'' then 2
																	when rtrim(ltrim(add_addressType))=''Residence'' then 3
																	else 4 end as addreorder
																	from tbl_master_address where 
																	add_cntID=clientid
																	and add_entity=''Customer/Client'') tb
																	order by addreorder)
										)'
								END
				INSERT INTO @tabother(cmppanno,cmpphno,cmpfax,cmpemail,cmpname,cmpaddress,
								 client,clientname,ucc,
								 GROUPID,GRPNAME,CLIENTADDRESS1,CLIENTADDRESS2,cmpservicetax)
				EXEC(@SQL)
				
				--------
				Delete FROM #tab WHere abs(isnull(netdeposit,0))+abs(isnull(appmrgnwithmarkup,0))=0

				SELECT * FROM 
				(SELECT clientid,
				CASE WHEN ISNULL(ledgerbaln,0)=0 THEN NULL WHEN ISNULL(ledgerbaln,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(ledgerbaln,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(ledgerbaln,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS ledgerbaln,
				CASE WHEN ISNULL(cashmrfndept,0)=0 THEN NULL WHEN ISNULL(cashmrfndept,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(cashmrfndept,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(cashmrfndept,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS cashmrfndept,
				CASE WHEN ISNULL(fdrsbgs,0)=0 THEN NULL WHEN ISNULL(fdrsbgs,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(fdrsbgs,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(fdrsbgs,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS fdrsbgs,
				CASE WHEN ISNULL(totaldept,0)=0 THEN NULL WHEN ISNULL(totaldept,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(totaldept,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(totaldept,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS totaldept,
				CASE WHEN ISNULL(pendpur,0)+ISNULL(pendsale,0)=0 THEN NULL WHEN ISNULL(pendpur,0)+ISNULL(pendsale,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(pendpur,0)+ISNULL(pendsale,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(pendpur,0)+ISNULL(pendsale,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS pendpursale,
				CASE WHEN ISNULL(hldbkstocks,0)=0 THEN NULL WHEN ISNULL(hldbkstocks,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(hldbkstocks,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(hldbkstocks,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS hldbkstocks,
				CASE WHEN ISNULL(mrgnstocks,0)=0 THEN NULL WHEN ISNULL(mrgnstocks,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(mrgnstocks,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(mrgnstocks,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS mrgnstocks,
				CASE WHEN ISNULL(noncashdep,0)=0 THEN NULL WHEN ISNULL(noncashdep,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(noncashdep,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(noncashdep,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS noncashdep,
				CASE WHEN ISNULL(netdeposit,0)=0 THEN NULL WHEN ISNULL(netdeposit,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(netdeposit,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(netdeposit,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS netdeposit,
				CASE WHEN ISNULL(appmrgnwithmarkup,0)=0 THEN NULL WHEN ISNULL(appmrgnwithmarkup,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(appmrgnwithmarkup,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(appmrgnwithmarkup,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS appmrgnwithmarkup,
				CASE WHEN ISNULL(excessshortage,0)=0 THEN NULL WHEN ISNULL(excessshortage,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(excessshortage,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(excessshortage,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS excessshortage,
				CASE WHEN ISNULL(refundcash,0)=0 THEN NULL WHEN ISNULL(refundcash,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(refundcash,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(refundcash,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS refundcash,
				CASE WHEN ISNULL(refundstocks,0)=0 THEN NULL WHEN ISNULL(refundstocks,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(refundstocks,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(refundstocks,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS refundstocks,
				cmppanno,cmpphno,cmpfax,cmpemail,cmpname,cmpaddress,cmpservicetax,
				clientname,ucc,GROUPID,GRPNAME,CLIENTADDRESS1,CLIENTADDRESS2
				FROM #tab,@tabother WHERE clientid=client) as kk

				LEFT OUTER JOIN

				(SELECT CUSTOMER,DPAC,STKTYPE,SCRIPNAME,PLEDGEAC,
				CASE WHEN ISNULL(Quantity,0)=0 THEN NULL ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(Quantity,0) AS NUMERIC(28,0)) AS VARCHAR(8000)),'N') END AS Quantity,
				CASE WHEN ISNULL(closeprice,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(closeprice,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS closeprice,
				CASE WHEN ISNULL(varmargin,0)=0 THEN NULL  ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(varmargin,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS varmargin,
				CASE WHEN ISNULL(Stocksresult,0)=0 THEN NULL WHEN ISNULL(Stocksresult,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(Stocksresult,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(Stocksresult,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS Stocksresult,
				CASE WHEN ISNULL(RELEASE,0)=0 THEN NULL WHEN ISNULL(RELEASE,0)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(RELEASE,0) AS NUMERIC(28,2))) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CAST(ISNULL(RELEASE,0) AS NUMERIC(28,2)) AS VARCHAR(8000)),'Y') END AS RELEASE,
				Stocksresult as Stocksresult1,RELEASE as RELEASE1 
				FROM @STOCKSRELEASE) AS JJ
				ON(clientid=CUSTOMER)

		End	
		--------------For Position Fecth
		Else
		Begin
				
					------------Balance Table
					Insert Into #TabPostion(clientid,ledgerbaln,cashmrfndept,
											fdrsbgs,totaldept,pendpur,pendsale,hldbkstocks,mrgnstocks,
											refundcash,refundstocks,appmargin,avgmargin,
											TDayFoBill ,TDayCDBill ,OtherRetention ,TDayCMBill ,TM1DayCMBill ,TDayFOMargin ,
											TDayCDMargin ,TDayCMMargin ,TDayCMDeliveryIN ,
											TDayCMDeliveryOut ,TM1DayCMDeliveryIN ,TM1DayCMDeliveryOut ,
											TDayCMTurnover ,TDayFOExposure ,TDayCDExposure )
					Select clientid,ledgerbaln,cashmrfndept,
					fdrsbgs,totaldept,pendpur,pendsale,hldbkstocks,mrgnstocks,
					refundcash,refundstocks,appmrgnwithmarkup,avgmargin,
					TDayFoBill ,TDayCDBill ,OtherRetention ,TDayCMBill ,TM1DayCMBill ,TDayFOMargin ,
					TDayCDMargin ,TDayCMMargin ,TDayCMDeliveryIN ,
					TDayCMDeliveryOut ,TM1DayCMDeliveryIN ,TM1DayCMDeliveryOut ,
					TDayCMTurnover ,TDayFOExposure ,TDayCDExposure 
					From #tab 
					--Where
					--(Abs(isnull(TDayFoBill,0))+Abs(isnull(TDayCDBill,0))+Abs(isnull(TDayCMBill,0))+Abs(isnull(TM1DayCMBill,0))+
					--Abs(isnull(TDayFOMargin,0))+Abs(isnull(TDayCDMargin,0))+Abs(isnull(TDayCMMargin,0))+Abs(isnull(TDayCMDeliveryIN,0))+
					--Abs(isnull(TDayCMDeliveryOut,0))+Abs(isnull(TM1DayCMDeliveryIN,0))+Abs(isnull(TM1DayCMDeliveryOut,0))+
					--Abs(isnull(TDayCMTurnover,0))+Abs(isnull(TDayFOExposure,0))+Abs(isnull(TDayCDExposure,0))+
					--Abs(isnull(ledgerbaln,0))+Abs(isnull(cashmrfndept,0)))<>0
					

					-------------Stocks
					Insert Into #STOCKSRELEASE (CUSTOMER,Productid,DpId,OwnDpId,OwnClientId,
					Quantity,Closeprice,varmargin,RELEASE,Stocksresult,STKTYPE,DpSegMentId)
					Select CUSTOMER,Productid,DpId,OwnDpId,OwnClientId,
					Quantity,Closeprice,varmargin,RELEASE,Stocksresult,STKTYPE,DpSegMentId
					FROM @STOCKSRELEASE 
					
		End	
	End


	Drop Table #tab					
	DROP TABLE #DISTINCTCLIENT					
END





