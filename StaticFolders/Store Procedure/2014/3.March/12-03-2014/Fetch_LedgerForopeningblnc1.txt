ALTER PROCEDURE [dbo].[Fetch_LedgerForopeningblnc1]  
@CompanyID varchar(50),
@FinYear varchar(50),
@FromDate varchar(50),
@ToDate varchar(50),
@MainAccount varchar(max),
@SubAccount varchar(max),
@Branch varchar(max),
@ReportType varchar(50),
@Segment VARCHAR(max),
@UserID VARCHAR(50),
@SubledgerType varchar(250),
@Settlement varchar(max),
@TranType varchar(10),
@CbPayment char(1),
@CbReceipt char(1),
@CbContract char(1),
@JvType varchar(5),
@SelectedJv varchar(1000),
@ActiveCurrency varchar(50),
@TradeCurrency varchar(20)
--exec [Fetch_LedgerForopeningblnc1] 'COR0000001','2013-2014','2013-04-01','2013-06-01','''SYSTM00042''','','1','Detail','18','','CDSL Clients','','all','n','n','n','','','1','1'
--exec [Fetch_LedgerForopeningblnc1] 'COR0000001','2013-2014','2013-04-01','2013-06-01','''SYSTM00042''','','1,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,72,73,74,75,76','Detail','19','','CDSL Clients','','all','n','n','n','','','1','1'
	
AS
BEGIN

DECLARE @SQL VARCHAR(MAX),@segmentname1 varchar(max)
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
			SET NOCOUNT ON;
---Calculate Opening Balance ---
		Declare 
@SegmentIDM varchar(50),
@SegmentNameM VARCHAR(50),
@SubAccountIDM varchar(50),
@SettlementNM varchar(50),
@SettlementTM varchar(50),
@DateForM varchar(100),
@IsConsolidate varchar(50),
@SETCOND  varchar(max),
		@SQLCM VARCHAR(MAX),
		@SQLCMCOND VARCHAR(MAX),@ClosingDr numeric(28,6),@ClosingCr numeric(28,6),@AmountDr numeric(28,6),@AmountCr numeric(28,6),	@Closing numeric(28,6)	,@CustID1 varchar(15),@ID int	,@CustID varchar(15),
		@FinStDate varchar(50),@SQLOP VARCHAR(MAX),@SQLCL VARCHAR(MAX),@SQLCOND VARCHAR(MAX),@OP numeric(28,2),@CL numeric(28,2),@ClCR numeric(28,2),@CLDR numeric(28,2),@SQLPROD VARCHAR(MAX) ,@SQLCHARGE VARCHAR(MAX) ,@SQLSEG VARCHAR(MAX),@FAXID int,@FINID int,@SegmentName varchar(50),
		@TotSegmentName varchar(500),@TranRefID varchar(30),@NarraBill varchar(200),@NarraBill1 varchar(200) ,@CusID varchar(50),@NarraBillF varchar(200)
		Declare @SQLTran varchar(1000)
		Declare @SQLCB varchar(1000)
		Declare @SQLJV varchar(2000)
		set @SQLCB=''
		set @SQLJV=''
		Set @segmentname1=''
				if (CHARINDEX(',',@Segment)<>'0')
					Begin
						Select @segmentname1=dbo.fnSplit(@Segment,',',1)
					End
					Else
					Begin
						Set @segmentname1=@Segment
					End
-------------------------------Table Declaration----------------------------------------------
							CREATE TABLE #TEMPOP(CL NUMERIC(28,6),OP NUMERIC(28,6))
							CREATE TABLE #TEMPLEDGERMAIN 
									(
									SrNo int IDENTITY,
									TrDate VARCHAR(100),
									ValueDate VARCHAR(100),
									accountsledger_TransactionReferenceID  VARCHAR(500),
									accountsledger_Transactiontype  VARCHAR(500),
									accountsledger_Narration VARCHAR(500),
									AccountName   VARCHAR(100), 
									Accountsledger_AmountDr NUMERIC(28,6), 
									Accountsledger_AmountCr NUMERIC(28,6), 
									Closing NUMERIC(28,2), 
									accountsledger_transactiondate  VARCHAR(100), 
									accountsledger_InstrumentNumber  VARCHAR(100),
									SettlementNumber VARCHAR(100),       
									MainID VARCHAR(100),                                            
									SubID VARCHAR(100),  
									SubID1 VARCHAR(100),     
									CompanyID  VARCHAR(100),
									SegID VARCHAR(100),     
									CashType VARCHAR(100),            
									PayoutDate VARCHAR(100),  
									BranchCode VARCHAR(100),
									UserID VARCHAR(100),
									SettlementT VARCHAR(100),
									SettlementN VARCHAR(100),
									SegmentName VARCHAR(100),
									OpeningBalanceDr numeric(28,6),
									OpeningBalanceCr numeric(28,6),
									OpeningTotal numeric(28,6),
									ClosingBalanceDr numeric(28,6),
									ClosingBalanceCr numeric(28,6),
									ClosingTotal numeric(28,6)
													
									)

								declare @TempLedgerCrystalForSegment Table
									(
										SrNo int identity(1,1),
										Segment varchar(50),
										SegmentINTERNALID VARCHAR(10)
									)
								declare @ObligationBreakup Table
									(
											
											PRODUCTSERIESID varchar(500),
											DELIVERYTYPE varchar(50),
											QUANTITY numeric(28,6),
											AMOUNT numeric(28,6),
											CMPOSITION_CUSTOMERID varchar(50),
											SETTLEMENT varchar(100)
									)
								declare @TempLedgerCrystalOpeningBal Table
									(
										SrNo int identity(1,1),
										CustomerID varchar(15),
										OpenIngBal numeric(28,6)
									)

								DECLARE @OBLIGATION_BREAKUP_NSE_FO	 Table
								(
									SrNo int identity(1,1),
									FO_IDENTITY VARCHAR(500),
									SCRIP VARCHAR(500),
									SETTLEMENT VARCHAR(50), 
									FOPosition_CustomerExchangeID VARCHAR(50), 
									BF NUMERIC(28,6) , 
									BF_PRICE NUMERIC(28,6) , 
									BUY NUMERIC(28,6) , 
									BUY_PRICE NUMERIC(28,6) , 
									SELL NUMERIC(28,6) , 
									SELL_PRICE NUMERIC(28,6) , 
									CF NUMERIC(28,6) , 
									CF_PRICE NUMERIC(28,6) , 
									NET NUMERIC(28,6) ,
									DATE_FOR VARCHAR(50) 

								)		

-------------------------------#End of Table Declaration#-------------------------------------------
--##################################################################################################
-------------------------------#Sub Account Condition#-----------------------------------------------
								IF(@SubAccount='' or isnull(@SubAccount,'')='')
								BEGIN	
								
								  SET @SQLCOND='    '
								END
								ELSE
								BEGIN
									SET @SQLCOND='	and AccountsLedger_SubAccountID  in (' + @SubAccount +')'
								END			
								


		IF(@Settlement !='')
		 SET @SETCOND='	and AccountsLedger_SettlementNumber IN (' + @Settlement +')'
		ELSE
		 SET @SETCOND='  '		

		IF(@TranType='cb')
			BEGIN
				set @SQLCB=' and  AccountsLedger_TransactionType=''Cash_Bank'' '
				If(@CbPayment='y' and @CbReceipt!='y' and @CbContract!='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and  left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''P'' ' 
					end
				if(@CbPayment!='y' and @CbReceipt='y'  and @CbContract!='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''R'' ' 
					
					end
				if(@CbPayment!='y' and @CbReceipt!='y' and @CbContract='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''C'' ' 
					end
				If(@CbPayment='y' and @CbReceipt='y' and @CbContract!='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and  (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''P'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''R'') ' 
					end	
				If(@CbPayment!='y' and @CbReceipt='y' and @CbContract='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''R'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''C'') ' 
					end
				If(@CbPayment='y' and @CbReceipt!='y' and @CbContract='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and  (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''P'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''C'') ' 
					end
				If(@CbPayment='y' and @CbReceipt='y' and @CbContract='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and  (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''P'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''R'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''C'') ' 
					end
				If(@CbPayment!='y' and @CbReceipt!='y' and @CbContract!='y')
					begin
						set @SQLCB=@SQLCB + ' and patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and  (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)!=''P'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)!=''R'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)!=''C'') ' 
					end
								

			END		

		IF(@TranType='jv')
			BEGIN
				if(@JvType='all')
					set @SQLJV=' and  AccountsLedger_TransactionType=''Journal'' '
				else if(@JvType='man')
					begin
						if(@SelectedJv='??')
							begin
								set @SQLJV=' and  patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and AccountsLedger_TransactionType=''Journal'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''u%''
											and  left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''v%'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''w%''
											and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''x%'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''y%''
											and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) not like ''z%'' '
							end
						else
							set @SQLJV=' and  patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and AccountsLedger_TransactionType=''Journal'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1)=''' + @SelectedJv + ''' '

					end
				else if(@JvType='sys')
					begin
						if(@SelectedJv='all')
							set @SQLJV=' and  patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and AccountsLedger_TransactionType=''Journal'' and (left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''u%''
										or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''v%'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''w%''
										or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''x%'' or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''y%''
										or left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) like ''z%'') '
						else
							set @SQLJV=' and  patindex(''%/%'',AccountsLedger_TransactionReferenceID)>0 and AccountsLedger_TransactionType=''Journal'' and left(AccountsLedger_TransactionReferenceID,patindex(''%/%'',AccountsLedger_TransactionReferenceID)-1) in(' + @SelectedJv + ') '
					end
					
			END

-------------------------------#End of Sub Account Condition#-----------------------------------------
--##################################################################################################
-------------------------------#Opening and Closing Balance Calculation#------------------------------


								IF EXISTS(SELECT * FROM  master_finyear WHERE finYear_Code=@FinYear AND  FinYear_StartDate=@FromDate)
								BEGIN
								print 1
									SET @SQLOP='
									update trans_accountsledger set AccountsLedger_SubAccountID= (case when len(AccountsLedger_SubAccountID)=0 then null else AccountsLedger_SubAccountID end)
									select sum(ta.op),ta.AccountsLedger_SubAccountID from (select 
								  isnull(sum(accountsledger_amountCr-accountsledger_amountDr),0) as OP,isnull(AccountsLedger_SubAccountID,'''') as AccountsLedger_SubAccountID
									from trans_accountsledger 
									where  AccountsLedger_TransactionDate<='''+@FromDate+''' and ltrim(rtrim(AccountsLedger_FinYear))='''+@FinYear+'''
									and AccountsLedger_ExchangeSegmentID in('+@Segment+') and AccountsLedger_CompanyID='''+@CompanyID+'''
									and accountsledger_mainaccountid in('+@MainAccount+')   
										'+@SQLCOND+ @SQLCB + @SQLJV +'
									and AccountsLedger_TransactionType=''OpeningBalance'' group by AccountsLedger_SubAccountID ) as ta group by ta.AccountsLedger_SubAccountID'
									
								END
								ELSE
								BEGIN
								print 2
									SET @SQLOP='
									update trans_accountsledger set AccountsLedger_SubAccountID= (case when len(AccountsLedger_SubAccountID)=0 then null else AccountsLedger_SubAccountID end)
									select 
									isnull(sum(accountsledger_amountCr-accountsledger_amountDr),0)  as OP,AccountsLedger_SubAccountID
									from trans_accountsledger 	where 
									AccountsLedger_TransactionDate < '''+@FromDate+''' and ltrim(rtrim(AccountsLedger_FinYear))='''+@FinYear+'''
									and AccountsLedger_ExchangeSegmentID in('+@Segment+') and AccountsLedger_CompanyID='''+@CompanyID+'''
									and accountsledger_mainaccountid in('+@MainAccount+')   
									'+@SQLCOND+ @SQLCB + @SQLJV +'
									group by AccountsLedger_SubAccountID 
									' 
											
								END

							 insert into @TempLedgerCrystalOpeningBal(OpenIngBal,CustomerID)
								exec(@SQLOP)
								print @SQLOP



								IF EXISTS(SELECT * FROM  master_finyear WHERE finYear_Code=@FinYear AND  FinYear_StartDate=@FromDate)
								BEGIN
									SET @SQLCL='
									select 
									isnull(sum(accountsledger_amountCr-accountsledger_amountDr),0) as CL ,AccountsLedger_SubAccountID
									from trans_accountsledger 
									where  
									AccountsLedger_TransactionDate<= '''+@ToDate+'''	and ltrim(rtrim(AccountsLedger_FinYear))='''+@FinYear +'''
									and AccountsLedger_ExchangeSegmentID in('+@Segment+')	and AccountsLedger_CompanyID='''+@CompanyID+'''
									and accountsledger_mainaccountid in('+@MainAccount+')
										'+@SQLCOND+ @SQLCB + @SQLJV +' 
									group by AccountsLedger_SubAccountID 
									'
									
								END
								ELSE
								BEGIN
								SET @SQLCL='
									select 
									isnull(sum(accountsledger_amountCr-accountsledger_amountDr),0) as CL ,AccountsLedger_SubAccountID
									from trans_accountsledger 
									where  
									AccountsLedger_TransactionDate<='''+@ToDate +'''
									and ltrim(rtrim(AccountsLedger_FinYear))='''+@FinYear+'''
									and AccountsLedger_ExchangeSegmentID in('+@Segment+') 
									and AccountsLedger_CompanyID='''+@CompanyID  +'''
									and accountsledger_mainaccountid in('+@MainAccount+')  
										'+@SQLCOND+ @SQLCB + @SQLJV +'
									group by AccountsLedger_SubAccountID ' 
											
								END
							print @SQLCL

-------------------------------# End of Opening and Closing Balance Calculation#------------------------------
--############################################################################################################
-------------------------------# LEDGER DETAIL#---------------------------------------------------------------
	
			if(@ReportType='Detail')
			begin
			set @SQL=null

				if(@SubledgerType ='None')
				begin
				set @SQL='select t.* from(
						select convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,
						case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,
						a.accountsledger_TransactionReferenceID,accountsledger_Transactiontype, 
						isnull(a.accountsledger_Narration,'''') +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,
						a.accountsledger_InstrumentNumber,(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,
						(select TOP 1 convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
						(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
						case when a.Accountsledger_AmountDr=''0.00000000'' then null else cast(a.Accountsledger_AmountDr as varchar(max)) end as Accountsledger_AmountCr,
						case when a.Accountsledger_AmountCr=''0.00000000'' then null else cast(a.Accountsledger_AmountCr as varchar(max)) end as Accountsledger_AmountDr,
						''0.0'' as Closing,
						--''NOTEXIST'' as CustomerID,
						isnull(a.Accountsledger_SubAccountID,'''') as CustomerID,
						a.accountsledger_ExchangeSegmentID,
						(select EXCHANGENAME  from (select A.EXCH_INTERNALID AS SEGMENTID ,isnull((TME.EXH_ShortName + ''-'' + A.EXCH_SEGMENTID),exch_membershipType) AS EXCHANGENAME from (SELECT TMCE.* FROM TBL_MASTER_COMPANYEXCHANGE AS TMCE WHERE  TMCE.EXCH_COMPID=accountsledger_companyID ) AS A LEFT OUTER JOIN   TBL_MASTER_EXCHANGE AS TME ON TME.EXH_CNTID=A.EXCH_EXCHID) as DD where cast(SEGMENTID as varchar)=accountsledger_ExchangeSegmentID)  AS SegmentName
						from Trans_AccountsLedger a
						where accountsledger_companyID=''' + @CompanyID + '''
						and accountsledger_finyear='''+@FinYear+''' 
						and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
						AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+''' 
						and accountsledger_MainAccountID in ('+ @MainAccount+')
							 '+@SQLCOND+'   
							'+@SETCOND+ @SQLCB + @SQLJV +'	 
						and AccountsLedger_TransactionType<>''OpeningBalance'' 
						--order by Accountsledger_SubAccountID
						--,accountsledger_transactiondate,Accountsledger_Narration 
						 ) as t order by t.CustomerID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration 
						'

						insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,accountsledger_Transactiontype,accountsledger_Narration ,accountsledger_InstrumentNumber ,SettlementNumber ,	PayoutDate ,  BranchCode,Accountsledger_AmountCr,Accountsledger_AmountDr,Closing,SubID , SegID,SegmentName)
						EXEC(@SQL)	
						print 	@SQL
				END
				ELSE
				begin

						set @SQL='select t.* from(
						select convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,
						case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,
						a.accountsledger_TransactionReferenceID,AccountsLedger_TransactionType, 
						isnull(a.accountsledger_Narration,'''') +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,
						a.accountsledger_InstrumentNumber,(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,
						(select TOP 1 convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
						(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
						case when a.Accountsledger_AmountDr=''0.00000000'' then null else cast(a.Accountsledger_AmountDr as varchar(max)) end as Accountsledger_AmountCr,
						case when a.Accountsledger_AmountCr=''0.00000000'' then null else cast(a.Accountsledger_AmountCr as varchar(max)) end as Accountsledger_AmountDr,
						''0.0'' as Closing,
						a.Accountsledger_SubAccountID as CustomerID,
						a.Accountsledger_mainaccountID as CustomerID1,
						a.accountsledger_ExchangeSegmentID,
						(select EXCHANGENAME  from (select A.EXCH_INTERNALID AS SEGMENTID ,isnull((TME.EXH_ShortName + ''-'' + A.EXCH_SEGMENTID),exch_membershipType) AS EXCHANGENAME from (SELECT TMCE.* FROM TBL_MASTER_COMPANYEXCHANGE AS TMCE WHERE  TMCE.EXCH_COMPID=accountsledger_companyID ) AS A LEFT OUTER JOIN   TBL_MASTER_EXCHANGE AS TME ON TME.EXH_CNTID=A.EXCH_EXCHID) as DD where cast(SEGMENTID as varchar)=accountsledger_ExchangeSegmentID)  AS SegmentName
						from Trans_AccountsLedger a
						where accountsledger_companyID=''' + @CompanyID + '''
					
						and accountsledger_finyear='''+@FinYear+''' 
						and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
						AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+''' 
						and accountsledger_MainAccountID in ('+ @MainAccount+')
							 '+@SQLCOND+'   
							'+@SETCOND+ @SQLCB + @SQLJV +'	 
						and AccountsLedger_TransactionType<>''OpeningBalance'' 
						--order by Accountsledger_SubAccountID
						--,accountsledger_transactiondate,Accountsledger_Narration 
						) as t order by t.CustomerID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration

						'

						insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,accountsledger_Narration ,accountsledger_InstrumentNumber ,SettlementNumber ,	PayoutDate ,  BranchCode,Accountsledger_AmountCr,Accountsledger_AmountDr,Closing,SubID ,subid1, SegID,SegmentName)
						EXEC(@SQL)
						--select * from #TEMPLEDGERMAIN
						print 'z'
						print @SQL
				end

			end	
-------------------------------# LEDGER DATEWISE #---------------------------------------------------------------
			else if(@ReportType='DateWise')
			begin

			set @SQL=null

					if(@SubledgerType ='None')
				begin
				set @SQL='  select t.* from(
							Select  TrDate,ValueDate,0 as accountsledger_TransactionReferenceID,accountsledger_Narration,accountsledger_Transactiontype,
							case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))>0 then (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0))) else null end Accountsledger_AmountDr,
							case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))<0 then (sum(isnull(Accountsledger_AmountCr,0))-sum(isnull(Accountsledger_AmountDr,0))) else null end Accountsledger_AmountCr,
							Closing,accountsledger_InstrumentNumber,SettlementNumber,SubID,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID
							from (Select convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,
							case when a.AccountsLedger_TransactionType=''Journal'' and Left(AccountsLedger_TransactionReferenceID,1) in(''X'',''Y'',''Z'') and Left(AccountsLedger_TransactionReferenceID,2) not in(''YD'') and accountsledger_SettlementNumber is not null and accountsledger_SettlementNumber<>''''	then ''Consolidated Entries For ''+convert(varchar(11),a.accountsledger_transactiondate,113)  when a.AccountsLedger_TransactionType=''Journal'' and Left(AccountsLedger_TransactionReferenceID,2) in(''YD'') and accountsledger_SettlementNumber is not null and accountsledger_SettlementNumber<>''''	then ''Short Back Add Delivery ''+convert(varchar(11),a.accountsledger_transactiondate,113)	else isnull(a.accountsledger_Narration,'''') end +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,accountsledger_Transactiontype,
							case when a.Accountsledger_AmountCr=''0.00000000'' then null else a.Accountsledger_AmountCr end as Accountsledger_AmountDr,case when a.Accountsledger_AmountDr=''0.00000000'' then null else a.Accountsledger_AmountDr end as Accountsledger_AmountCr,''0.0'' as Closing,
							a.accountsledger_transactiondate as accountsledger_transactiondate,a.accountsledger_InstrumentNumber,
							(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,
							--''NOTEXIST'' as SubID,
							isnull(a.Accountsledger_SubAccountID,'''') as SubID,
							(select TOP 1  convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
							(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
							a.accountsledger_ExchangeSegmentID as accountsledger_ExchangeSegmentID
							from Trans_accountsledger a  
							WHERE  accountsledger_companyID=''' + @CompanyID + ''' 
							and accountsledger_finyear='''+@FinYear+'''
							and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
							AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
							and AccountsLedger_BranchID in('+@Branch+')
							and accountsledger_MainAccountID in ('+ @MainAccount+')
							 '+@SQLCOND+' 
							'+@SETCOND+ @SQLCB + @SQLJV +'	   
							and AccountsLedger_TransactionType<>''OpeningBalance'' 
							) as D  
							group By  TrDate,ValueDate,Closing,accountsledger_transactiondate,accountsledger_InstrumentNumber,SettlementNumber,SubID,accountsledger_Narration,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID ,accountsledger_Transactiontype
							--Order By  SubID
							--,accountsledger_transactiondate,Accountsledger_Narration
							) as t order by t.SubID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration
							'
			

						insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,accountsledger_Narration ,accountsledger_Transactiontype,Accountsledger_AmountDr, Accountsledger_AmountCr,Closing,accountsledger_InstrumentNumber ,SettlementNumber ,SubID ,PayoutDate , BranchCode, SegID)
									EXEC(@SQL)	
									print @SQL
				end
				else
				begin
						set @SQL='select t.* from(
							Select  TrDate,ValueDate,0 as accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,accountsledger_Narration,
							case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))>0 then (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0))) else null end Accountsledger_AmountDr,
							case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))<0 then (sum(isnull(Accountsledger_AmountCr,0))-sum(isnull(Accountsledger_AmountDr,0))) else null end Accountsledger_AmountCr,
							Closing,accountsledger_InstrumentNumber,SettlementNumber,SubID,SubID1,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID
							from (Select convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,AccountsLedger_TransactionType,
							case when a.AccountsLedger_TransactionType=''Journal'' and Left(AccountsLedger_TransactionReferenceID,1) in(''X'',''Y'',''Z'') and Left(AccountsLedger_TransactionReferenceID,2) not in(''YD'') and accountsledger_SettlementNumber is not null and accountsledger_SettlementNumber<>''''	then ''Consolidated Entries For ''+convert(varchar(11),a.accountsledger_transactiondate,113)  when a.AccountsLedger_TransactionType=''Journal'' and Left(AccountsLedger_TransactionReferenceID,2) in(''YD'') and accountsledger_SettlementNumber is not null and accountsledger_SettlementNumber<>''''	then ''Short Back Add Delivery ''+convert(varchar(11),a.accountsledger_transactiondate,113)	else isnull(a.accountsledger_Narration,'''') end +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,
							case when a.Accountsledger_AmountCr=''0.00000000'' then null else a.Accountsledger_AmountCr end as Accountsledger_AmountDr,case when a.Accountsledger_AmountDr=''0.00000000'' then null else a.Accountsledger_AmountDr end as Accountsledger_AmountCr,''0.0'' as Closing,
							a.accountsledger_transactiondate as accountsledger_transactiondate,a.accountsledger_InstrumentNumber,(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,a.accountsledger_SubAccountID as SubID,a.Accountsledger_mainaccountID as SubID1,(select TOP 1  convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
							(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
							a.accountsledger_ExchangeSegmentID as accountsledger_ExchangeSegmentID
							from Trans_accountsledger a  
							WHERE  accountsledger_companyID=''' + @CompanyID + ''' 
							--and		accountsledger_mainaccountid = SubAccount_MainAcReferenceID
							and accountsledger_finyear='''+@FinYear+'''
							and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
							AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
							and AccountsLedger_BranchID in('+@Branch+')
							and accountsledger_MainAccountID in ('+ @MainAccount+')
							 '+@SQLCOND+' 
							'+@SETCOND+ @SQLCB + @SQLJV +'	   
							and AccountsLedger_SubAccountID is not null 
							and AccountsLedger_TransactionType<>''OpeningBalance''
							 ) as D  
							group By  TrDate,ValueDate,Closing,accountsledger_transactiondate,accountsledger_InstrumentNumber,SettlementNumber,SubID,accountsledger_Narration,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID,SubID1,AccountsLedger_TransactionType
							--Order By  SubID
							--,accountsledger_transactiondate,Accountsledger_Narration
							) as t order by t.SubID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration
							'
			

						insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,accountsledger_Narration ,Accountsledger_AmountDr, Accountsledger_AmountCr,Closing,accountsledger_InstrumentNumber ,SettlementNumber ,SubID ,SubID1,PayoutDate , BranchCode, SegID)
									EXEC(@SQL)	

				end

			
			end
-------------------------------# LEDGER VOUCHERWISE #---------------------------------------------------------------
			else if(@ReportType='VoucherWise')
			begin
			set @SQL=null

				
					if(@SubledgerType ='None')
				begin	
				set @SQL='select t.* from(
						Select  TrDate,ValueDate,0 as accountsledger_TransactionReferenceID,accountsledger_Narration,AccountsLedger_TransactionType,
						case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))>0 then (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0))) else null end Accountsledger_AmountDr,case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))<0 then (sum(isnull(Accountsledger_AmountCr,0))-sum(isnull(Accountsledger_AmountDr,0))) else null end Accountsledger_AmountCr,
						Closing,accountsledger_InstrumentNumber,SettlementNumber,
						SubID,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID
						from (Select  convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,AccountsLedger_TransactionType,case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,a.accountsledger_TransactionReferenceID,
						isnull((select  journalvoucher_Narration from trans_journalvoucher where journalvoucher_voucherNumber=a.accountsledger_TransactionReferenceID and journalvoucher_companyID=a.accountsledger_companyID and journalvoucher_ExchangeSegmentID=a.accountsledger_ExchangeSegmentID and journalvoucher_TransactionDate=a.accountsledger_transactiondate),isnull(accountsledger_Narration,'''')) +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,case when a.Accountsledger_AmountCr=''0.00000000'' then null else a.Accountsledger_AmountCr end as Accountsledger_AmountDr,case when a.Accountsledger_AmountDr=''0.00000000'' then null else a.Accountsledger_AmountDr end as Accountsledger_AmountCr,''0.0'' as Closing,a.accountsledger_transactiondate as accountsledger_transactiondate,a.accountsledger_InstrumentNumber,(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,
						--''NOTEXIST'' as SubID,
						isnull(a.Accountsledger_SubAccountID,'''') as SubID,
						(select TOP 1 convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
						(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
						a.accountsledger_ExchangeSegmentID as accountsledger_ExchangeSegmentID
						from Trans_accountsledger a  
						WHERE  accountsledger_companyID=''' + @CompanyID + ''' 
						and accountsledger_finyear='''+@FinYear+'''
						and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
						AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
						and accountsledger_MainAccountID in ('+ @MainAccount+')
						 '+@SQLCOND+' 
						'+@SETCOND + @SQLCB + @SQLJV +'
						and AccountsLedger_BranchID in('+@Branch+')
						 and AccountsLedger_TransactionType<>''OpeningBalance''
						 ) as D  
						group By  TrDate,ValueDate,accountsledger_Narration,Closing,accountsledger_transactiondate,accountsledger_InstrumentNumber,SettlementNumber,SubID,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID,AccountsLedger_TransactionType
						--Order By  SubID
				--,accountsledger_transactiondate,accountsledger_InstrumentNumber,Accountsledger_Narration
						) as t order by t.SubID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration
						'

								insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,accountsledger_Narration ,AccountsLedger_TransactionType,Accountsledger_AmountDr, Accountsledger_AmountCr,Closing,accountsledger_InstrumentNumber ,SettlementNumber ,SubID ,PayoutDate , BranchCode, SegID)
									EXEC(@SQL)	
					end
					else
					begin	
						set @SQL='			select t.* from(
											Select  TrDate,ValueDate,0 as accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,accountsledger_Narration,
											case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))>0 then (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0))) else null end Accountsledger_AmountDr,case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))<0 then (sum(isnull(Accountsledger_AmountCr,0))-sum(isnull(Accountsledger_AmountDr,0))) else null end Accountsledger_AmountCr,
											Closing,accountsledger_InstrumentNumber,SettlementNumber,
											SubID,SubID1,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID
											from (Select  convert(varchar(11),a.accountsledger_transactiondate,113) as TrDate,case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null else convert(varchar(11),a.accountsledger_valuedate,113) end as ValueDate,a.accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,
											isnull((select  journalvoucher_Narration from trans_journalvoucher where journalvoucher_voucherNumber=a.accountsledger_TransactionReferenceID and journalvoucher_companyID=a.accountsledger_companyID and journalvoucher_ExchangeSegmentID=a.accountsledger_ExchangeSegmentID and journalvoucher_TransactionDate=a.accountsledger_transactiondate),isnull(accountsledger_Narration,'''')) +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''') as accountsledger_Narration,case when a.Accountsledger_AmountCr=''0.00000000'' then null else a.Accountsledger_AmountCr end as Accountsledger_AmountDr,case when a.Accountsledger_AmountDr=''0.00000000'' then null else a.Accountsledger_AmountDr end as Accountsledger_AmountCr,''0.0'' as Closing,a.accountsledger_transactiondate as accountsledger_transactiondate,a.accountsledger_InstrumentNumber,(a.accountsledger_SettlementNumber+'' ''+a.accountsledger_SettlementType) as SettlementNumber,a.accountsledger_SubAccountID as SubID,a.Accountsledger_mainaccountID as SubID1,
											(select TOP 1 convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
											(select TOP 1 branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode,
											a.accountsledger_ExchangeSegmentID as accountsledger_ExchangeSegmentID
											from Trans_accountsledger a  
											WHERE  accountsledger_companyID=''' + @CompanyID + ''' 
											--and		accountsledger_mainaccountid = SubAccount_MainAcReferenceID
											and accountsledger_finyear='''+@FinYear+'''
											and accountsledger_ExchangeSegmentID in(' + @Segment + ') 
											AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
											and accountsledger_MainAccountID in ('+ @MainAccount+')
											 '+@SQLCOND+' 
											'+@SETCOND+ @SQLCB + @SQLJV +'
											and AccountsLedger_BranchID in('+@Branch+')
											 and AccountsLedger_TransactionType<>''OpeningBalance''
											 ) as D  
											group By  TrDate,ValueDate,accountsledger_Narration,Closing,accountsledger_transactiondate,accountsledger_InstrumentNumber,SettlementNumber,SubID,PayoutDate,BranchCode,accountsledger_ExchangeSegmentID,SubID1,AccountsLedger_TransactionType
											--Order By  SubID
									--,accountsledger_transactiondate,accountsledger_InstrumentNumber,Accountsledger_Narration
											) as t order by t.SubID
						,convert(datetime,t.TrDate,113),t.Accountsledger_Narration
											'

													insert into #TEMPLEDGERMAIN (TrDate,ValueDate ,	accountsledger_TransactionReferenceID,AccountsLedger_TransactionType,accountsledger_Narration ,Accountsledger_AmountDr, Accountsledger_AmountCr,Closing,accountsledger_InstrumentNumber ,SettlementNumber ,SubID ,SubID1,PayoutDate , BranchCode, SegID)
														EXEC(@SQL)	

					end
				
			end

-------------------------------# LEDGER VOUCHERWISE #---------------------------------------------------------------
			ELSE if(@ReportType='ObligationBrkUp')
			BEGIN				
			set @SQL=null
					SET @SQL='
						Select  TrDate,
						ValueDate,AccountsLedger_TransactionReferenceID as accountsledger_TransactionReferenceID,
						accountsledger_Narration,AccountName,
						case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))>0 
						then (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0))) else null 
						end Accountsledger_AmountDr,
						case when (sum(isnull(Accountsledger_AmountDr,0))-sum(isnull(Accountsledger_AmountCr,0)))<0 
						then (sum(isnull(Accountsledger_AmountCr,0))-sum(isnull(Accountsledger_AmountDr,0))) 
						else null end Accountsledger_AmountCr,Closing,convert(varchar,accountsledger_transactiondate,106) as accountsledger_transactiondate,
						accountsledger_InstrumentNumber,SettlementNumber,MainID,SubID,CompanyID,SegID,CashType,PayoutDate,
						BranchCode,	'+@UserID+' as UserID,SettlementT ,SettlementN
						,
						(select EXCHANGENAME  from (select A.EXCH_INTERNALID AS SEGMENTID ,isnull((TME.EXH_ShortName + ''-'' + A.EXCH_SEGMENTID),exch_membershipType) AS EXCHANGENAME from (SELECT TMCE.* FROM TBL_MASTER_COMPANYEXCHANGE AS TMCE WHERE  TMCE.EXCH_COMPID=CompanyID ) AS A LEFT OUTER JOIN   TBL_MASTER_EXCHANGE AS TME ON TME.EXH_CNTID=A.EXCH_EXCHID) as DD where cast(SEGMENTID as varchar)=SegID)  AS SegmentName
						--'''' AS SegmentName
						from 
						(
						Select 
						convert(varchar,a.accountsledger_transactiondate,106) as TrDate,
						case when a.accountsledger_valuedate=''1/1/1900 12:00:00 AM'' then null 
						else convert(varchar,a.accountsledger_valuedate,106) end as ValueDate,
						case when AccountsLedger_TransactionType=''Cash_Bank'' then AccountsLedger_TransactionReferenceID +'' Client Bank:''+ISNULL(ACCOUNTSLEDGER_BANKNAMEANDACNUMBER,'''')
						else  null end   as  AccountsLedger_TransactionReferenceID,
						case 
						when a.AccountsLedger_TransactionType=''Journal'' and 
						Left(AccountsLedger_TransactionReferenceID,1) in(''X'',''Y'',''Z'') and 
						Left(AccountsLedger_TransactionReferenceID,2) not in(''YD'',''YE'') 
						and accountsledger_SettlementNumber is not null 
						and accountsledger_SettlementNumber not in (''Margin'',''Hldbk'')	
						and accountsledger_SettlementNumber<>''''	
						then ''Settlement Obligation  ''
						when a.AccountsLedger_TransactionType=''Journal''  
						and Left(AccountsLedger_TransactionReferenceID,2) in(''YD'',''YE'') 
						and accountsledger_SettlementNumber is not null 
						and accountsledger_SettlementNumber<>''''	
						then 
						isnull(a.accountsledger_Narration,'''') +'' - ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),	AccountsLedger_CashBankName),'''')
						--''Short Back Add Delivery ''+convert(varchar(11),a.accountsledger_transactiondate,113) 						
						else 
						isnull(a.accountsledger_Narration,'''') 
						end 
						+''  ''+isnull(isnull((select MainAccount_Name from Master_MainAccount where MainAccount_AccountCode=AccountsLedger_CashBankName),AccountsLedger_CashBankName),'''')   
						+ 
						case when ACCOUNTSLEDGER_BANKNAMEANDACNUMBER is null then  ''''
						else ''|Client Bank:''+ ISNULL(ACCOUNTSLEDGER_BANKNAMEANDACNUMBER,'''') +''|'' end 	

						as accountsledger_Narration,

						''1'' as AccountName,
						case when a.Accountsledger_AmountCr=''0.00000000'' then null else a.Accountsledger_AmountCr end as Accountsledger_AmountDr,
						case when a.Accountsledger_AmountDr=''0.00000000'' then null else a.Accountsledger_AmountDr end as Accountsledger_AmountCr,
						''0.0'' as Closing,
						a.accountsledger_transactiondate as accountsledger_transactiondate,
						a.accountsledger_InstrumentNumber,
						(a.accountsledger_SettlementNumber+''''+a.accountsledger_SettlementType) as SettlementNumber,a.accountsledger_MainAccountID as MainID,
						a.accountsledger_SubAccountID as SubID,
						a.accountsledger_companyID as CompanyID,
						a.accountsledger_exchangeSegmentID as SegID,
						a.AccountsLedger_TransactionType  as CashType,
						(select top 1 convert(varchar(12),Settlements_StartDateTime,113) from master_settlements where Settlements_Number=a.accountsledger_SettlementNumber and Settlements_TypeSuffix=a.accountsledger_SettlementType) as PayoutDate,
						(select branch_code from tbl_master_branch where branch_id=(select cnt_branchid from tbl_master_contact where cnt_internalID=accountsledger_SubAccountID)) as BranchCode
						,a.accountsledger_SettlementType as SettlementT  
						,a.accountsledger_SettlementNumber as  SettlementN

						from 
						Trans_accountsledger a  
						WHERE  
						accountsledger_companyID='''+@CompanyID+''' 
						and accountsledger_finyear='''+@FinYear+'''
						and accountsledger_ExchangeSegmentID in ( '+@Segment+') 
						AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
						and accountsledger_MainAccountID in ('+ @MainAccount+')
						  '+@SQLCOND+' 
						'+@SETCOND+ @SQLCB + @SQLJV +'
						and AccountsLedger_BranchID in ('+ @Branch +')
						and AccountsLedger_TransactionType<>''OpeningBalance'' 
						) as D  group By  SubID,TrDate,ValueDate,AccountsLedger_TransactionReferenceID,AccountName,Closing,accountsledger_transactiondate,accountsledger_InstrumentNumber,SettlementNumber,MainID,CompanyID,SegID,CashType,accountsledger_Narration,PayoutDate,BranchCode,SettlementT,SettlementN Order By  SubID,CAST(TrDate AS DATETIME) ASC


					'
print    @SQL
					INSERT INTO #TEMPLEDGERMAIN
					(TrDate,ValueDate,	accountsledger_TransactionReferenceID,accountsledger_Narration,AccountName,Accountsledger_AmountDr,	Accountsledger_AmountCr,Closing,accountsledger_transactiondate,	accountsledger_InstrumentNumber,SettlementNumber,MainID,SubID,CompanyID,SegID,	CashType , PayoutDate ,BranchCode ,UserID ,SettlementT,SettlementN,SegmentName)
					EXEC(@SQL)

						
					END 

		IF(@ReportType='ObligationBrkUp')
		BEGIN
			set @FAXID=null
			set @FINID=null
			select @FAXID=max(SrNo) from #TEMPLEDGERMAIN
			select @FINID=min(SrNo) from #TEMPLEDGERMAIN
			while @FAXID>=@FINID
			BEGIN
				select @SegmentNameM=SegmentName, @SegmentIDM=SegID ,@SubAccountIDM=SubID,@SettlementNM=SettlementN, @SettlementTM=SettlementT, @DateForM=accountsledger_transactiondate,@IsConsolidate=left(accountsledger_Narration,21)  from #TEMPLEDGERMAIN where SrNo=@FINID
						print 'B'
			IF(@IsConsolidate='Settlement Obligation')
					BEGIN
					print @IsConsolidate


						 IF(@SegmentNameM='NSE-CM' OR  @SegmentNameM='BSE-CM' OR @SegmentNameM='CSE-CM')
							BEGIN		
									SET @SQLCM=NULL
									SET @SQLCM='SELECT
									(SELECT LTRIM(RTRIM(ISNULL(EQUITY_TICKERSYMBOL,'''')))+(CASE WHEN ISNULL(CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113),'''')='''' THEN '''' ELSE '' [''+CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113)+'']'' END)+'' [''+LTRIM(RTRIM(ISNULL(EQUITY_SERIES,RTRIM(ISNULL(EQUITY_TICKERCODE,'''')))))+'']''+ 
									CASE WHEN ISNULL(CAST(EQUITY_STRIKEPRICE AS VARCHAR),'''')='''' THEN '''' ELSE '' [''+CAST(EQUITY_STRIKEPRICE AS VARCHAR)+'']'' 
									END FROM MASTER_EQUITY WHERE EQUITY_SERIESID=TRANS_CMPOSITION.CMPOSITION_PRODUCTSERIESID) 
									AS PRODUCTSERIESID,
									''DLV. PUR.'' AS DELIVERYTYPE,
									CMPOSITION_DELIVERYBUYQTY AS QUANTITY,
									cast((-1)*CMPOSITION_DELIVERYBUYVALUE as numeric(28,6)) AS AMOUNT,
									CMPOSITION_CUSTOMERID,isnull(CMPOSITION_SETTLEMENTNUMBER,'''')+''''+isnull(CMPOSITION_SETTLEMENTTYPE,'''')  as SETTLEMENT
									FROM TRANS_CMPOSITION 
									where
									CMPOSITION_FINYEAR='''+@FinYear+'''
									AND CMPOSITION_COMPANYID='''+@CompanyID+'''
									AND CMPOSITION_SEGMENTID in ('+@SegmentIDM+')
									--AND CMPOSITION_BRANCHID IN ('+@Branch+')
									AND CMPOSITION_CUSTOMERID ='''+@SubAccountIDM+'''
									AND CMPOSITION_SETTLEMENTNUMBER ='''+@SettlementNM+'''
									AND CMPOSITION_SETTLEMENTTYPE ='''+ @SettlementTM+'''
									--AND CMPOSITION_TRADEDATE  	BETWEEN '''+@FromDate+'''   AND  '''+@ToDate+'''
									AND CMPOSITION_SETTLEMENTNUMBER <> ''''
									AND CMPOSITION_SETTLEMENTTYPE <> ''''
									AND CMPOSITION_SETTLEMENTNUMBER not in (''Hldbk'',''Margin'')
									and CMPOSITION_DELIVERYBUYQTY > 0
									order by  CMPOSITION_SETTLEMENTNUMBER
									'
									insert into @ObligationBreakup(PRODUCTSERIESID,DELIVERYTYPE,QUANTITY,AMOUNT,CMPOSITION_CUSTOMERID,SETTLEMENT)
									EXEC(@SQLCM)
									SET @SQLCM=NULL

									SET @SQLCM='SELECT
									(SELECT LTRIM(RTRIM(ISNULL(EQUITY_TICKERSYMBOL,'''')))+(CASE WHEN ISNULL(CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113),'''')='''' THEN '''' ELSE '' [''+CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113)+'']'' END)+'' [''+LTRIM(RTRIM(ISNULL(EQUITY_SERIES,RTRIM(ISNULL(EQUITY_TICKERCODE,'''')))))+'']''+ 
									CASE WHEN ISNULL(CAST(EQUITY_STRIKEPRICE AS VARCHAR),'''')='''' THEN '''' ELSE '' [''+CAST(EQUITY_STRIKEPRICE AS VARCHAR)+'']'' 
									END FROM MASTER_EQUITY WHERE EQUITY_SERIESID=TRANS_CMPOSITION.CMPOSITION_PRODUCTSERIESID) 
									AS PRODUCTSERIESID,
									''DIFF''  AS DELIVERYTYPE,
									CMPOSITION_SQROFFQTY AS QUANTITY,
									CMPOSITION_SQROFFPL AS AMOUNT,
									CMPOSITION_CUSTOMERID,isnull(CMPOSITION_SETTLEMENTNUMBER,'''')+''''+isnull(CMPOSITION_SETTLEMENTTYPE,'''')  as SETTLEMENT
									FROM TRANS_CMPOSITION 
									where
									CMPOSITION_FINYEAR='''+@FinYear+'''
									AND CMPOSITION_COMPANYID='''+@CompanyID+'''
									AND CMPOSITION_SEGMENTID  in ('+@SegmentIDM+')
									--AND CMPOSITION_BRANCHID IN ('+@Branch+')
									AND CMPOSITION_CUSTOMERID ='''+@SubAccountIDM+'''
									AND CMPOSITION_SETTLEMENTNUMBER ='''+@SettlementNM+'''
									AND CMPOSITION_SETTLEMENTTYPE ='''+ @SettlementTM+'''
									--AND CMPOSITION_TRADEDATE  	BETWEEN '''+@FromDate+'''   AND  '''+@ToDate+'''
									AND CMPOSITION_SETTLEMENTNUMBER <> ''''
									AND CMPOSITION_SETTLEMENTTYPE <> ''''
									AND CMPOSITION_SETTLEMENTNUMBER not in (''Hldbk'',''Margin'')
									and CMPOSITION_SQROFFQTY > 0
									order by  CMPOSITION_SETTLEMENTNUMBER
									'

									insert into @ObligationBreakup(PRODUCTSERIESID,DELIVERYTYPE,QUANTITY,AMOUNT,CMPOSITION_CUSTOMERID,SETTLEMENT)
									EXEC(@SQLCM) 
									SET @SQLCM=NULL


									SET @SQLCM='SELECT
									(SELECT LTRIM(RTRIM(ISNULL(EQUITY_TICKERSYMBOL,'''')))+(CASE WHEN ISNULL(CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113),'''')='''' THEN '''' ELSE '' [''+CONVERT(VARCHAR(12),EQUITY_EFFECTUNTIL,113)+'']'' END)+'' [''+LTRIM(RTRIM(ISNULL(EQUITY_SERIES,RTRIM(ISNULL(EQUITY_TICKERCODE,'''')))))+'']''+ 
									CASE WHEN ISNULL(CAST(EQUITY_STRIKEPRICE AS VARCHAR),'''')='''' THEN '''' ELSE '' [''+CAST(EQUITY_STRIKEPRICE AS VARCHAR)+'']'' 
									END FROM MASTER_EQUITY WHERE EQUITY_SERIESID=TRANS_CMPOSITION.CMPOSITION_PRODUCTSERIESID) 
									AS PRODUCTSERIESID,
									''DLV. SELL''  AS DELIVERYTYPE,
									CMPosition_DeliverySellQty AS QUANTITY,
									CMPosition_DeliverySellValue AS AMOUNT,
									CMPOSITION_CUSTOMERID,isnull(CMPOSITION_SETTLEMENTNUMBER,'''')+''''+isnull(CMPOSITION_SETTLEMENTTYPE,'''')  as SETTLEMENT
									FROM TRANS_CMPOSITION 
									where 
									CMPOSITION_FINYEAR='''+@FinYear+'''
									AND CMPOSITION_COMPANYID='''+@CompanyID+'''
									AND CMPOSITION_SEGMENTID   in ('+@SegmentIDM+')
								--	AND CMPOSITION_BRANCHID IN ('+@Branch+')
									AND CMPOSITION_CUSTOMERID ='''+@SubAccountIDM+'''
									AND CMPOSITION_SETTLEMENTNUMBER ='''+@SettlementNM+'''
									AND CMPOSITION_SETTLEMENTTYPE ='''+ @SettlementTM+'''
									--AND CMPOSITION_TRADEDATE  	BETWEEN '''+@FromDate+'''   AND  '''+@ToDate+'''
									AND CMPOSITION_SETTLEMENTNUMBER <> ''''
									AND CMPOSITION_SETTLEMENTTYPE <> ''''	
									AND CMPOSITION_SETTLEMENTNUMBER not in (''Hldbk'',''Margin'')
									and CMPosition_DeliverySellQty > 0
									order by  CMPOSITION_SETTLEMENTNUMBER
									'	
								insert into @ObligationBreakup(PRODUCTSERIESID,DELIVERYTYPE,QUANTITY,AMOUNT,CMPOSITION_CUSTOMERID,SETTLEMENT)
								EXEC(@SQLCM) 
								SET @SQLCM=NULL

					

						END
						ELSE IF(@SegmentNameM='NSE-FO')
						BEGIN

							SET @SQLCM=NULL
							SET @SQLCM='SELECT 
							ISNULL((SELECT EQUITY_FOIDENTIFIER FROM MASTER_EQUITY WHERE   EQUITY_SERIESID=FOPosition_ProductSeriesID),'' '') AS FO_IDENTITY,
							(SELECT LTRIM(RTRIM(ISNULL(EQUITY_TICKERSYMBOL,'' '')))
							+'' [''+LTRIM(RTRIM(ISNULL(EQUITY_SERIES,'' '')))
							+'']''+ISNULL(CAST(ISNULL(CAST(EQUITY_STRIKEPRICE AS NUMERIC(28,2)),0) AS VARCHAR),'' '')
							+'' ''+ISNULL(CONVERT(VARCHAR,EQUITY_EFFECTUNTIL,106),'' '')  
							FROM MASTER_EQUITY WHERE  EQUITY_SERIESID=FOPosition_ProductSeriesID) AS SCRIP,
							ISNULL(FOPosition_SettlementNumber,'''') +''''+ISNULL(FOPosition_SettlementType,'''') AS SETTLEMENT,
							FOPosition_CustomerExchangeID,
							FOPosition_BFLots AS BF,
							FOPosition_OpenPrice AS  BF_PRICE,
							FOPosition_BuyLots AS BUY,
							FOPosition_BuyAverage AS BUY_PRICE,
							FOPosition_SellLots AS SELL,
							FOPosition_SellAverage AS SELL_PRICE,
							ISNULL(ISNULL(FOPosition_PostExcAsnDlvLongLots,FOPosition_PostExcAsnDlvShortLots),0) AS CF,
							FOPosition_SettlementPrice AS CF_PRICE,
							ISNULL(FOPosition_NetPremium,0)+ISNULL(FOPosition_MTMPL,0)+ISNULL(FOPosition_FutureFinalSettlement,0)+ISNULL(FOPosition_ExcAsnDlvMarkedValue,0) AS NET,
							CONVERT(VARCHAR,FOPosition_Date,106) AS DATE_FOR
							FROM TRANS_FOPOSITION 
							WHERE 
							FOPOSITION_FINYEAR='''+@FinYear+'''
							AND FOPOSITION_SEGMENTID  in ('+@SegmentIDM+')
							AND FOPOSITION_BRANCHID IN ('+@Branch+')
							AND FOPOSITION_COMPANYID='''+@CompanyID+'''
							AND FOPOSITION_CUSTOMEREXCHANGEID='''+@SubAccountIDM+'''
							AND FOPosition_SettlementNumber='''+@SettlementNM+'''
							AND	FOPosition_SettlementType='''+ @SettlementTM+'''
							AND FOPosition_Date='''+@DateForM+'''
							AND FOPosition_SettlementNumber <> ''''
							AND	FOPosition_SettlementType <> ''''
							AND FOPosition_SettlementNumber not in (''Hldbk'',''Margin'')	
							ORDER BY  FOPosition_SettlementNumber

							'

							INSERT INTO @OBLIGATION_BREAKUP_NSE_FO(FO_IDENTITY ,SCRIP,	SETTLEMENT, FOPosition_CustomerExchangeID,BF,BF_PRICE,BUY,BUY_PRICE,SELL,SELL_PRICE,CF,CF_PRICE,NET,DATE_FOR) 
							EXEC(@SQLCM)
							SET  @SQLCM=NULL
						END
						ELSE 
							BEGIN
							SET @SQLCM=NULL
							SET @SQLCM='SELECT 
							ISNULL((SELECT COMMODITY_IDENTIFIER FROM MASTER_COMMODITY WHERE   COMMODITY_PRODUCTSERIESID=COMPOSITION_ProductSeriesID),'' '') AS FO_IDENTITY,
							(SELECT LTRIM(RTRIM(ISNULL(COMMODITY_TICKERSYMBOL,'' '')))
							+'' [''+LTRIM(RTRIM(ISNULL(COMMODITY_TICKERSERIES,'' '')))
							+'']''+ISNULL(CAST(ISNULL(CAST(COMMODITY_STRIKEPRICE AS NUMERIC(28,2)),0) AS VARCHAR),'' '')
							+'' ''+ISNULL(CONVERT(VARCHAR,COMMODITY_EFFECTIVEDATE,106),'' '')  
							FROM MASTER_COMMODITY WHERE  COMMODITY_PRODUCTSERIESID=COMPOSITION_ProductSeriesID) AS SCRIP,
							ISNULL(COMPOSITION_SettlementNumber,'''') +''''+ISNULL(COMPOSITION_SettlementType,'''') AS SETTLEMENT,
							COMPOSITION_CustomerExchangeID,
							COMPOSITION_BFLots AS BF,
							COMPOSITION_OpenPrice AS  BF_PRICE,
							COMPOSITION_BuyLots AS BUY,
							COMPOSITION_BuyAverage AS BUY_PRICE,
							COMPOSITION_SellLots AS SELL,
							COMPOSITION_SellAverage AS SELL_PRICE,
							ISNULL(ISNULL(COMPOSITION_PostExcAsnDlvLongLots,COMPOSITION_PostExcAsnDlvShortLots),0) AS CF,
							COMPOSITION_SettlementPrice AS CF_PRICE,
							ISNULL(COMPOSITION_NetPremium,0)+ISNULL(COMPOSITION_MTMPL,0)+ISNULL(COMPOSITION_FutureFinalSettlement,0)+ISNULL(COMPOSITION_ExcAsnDlvMarkedValue,0) AS NET,
							CONVERT(VARCHAR,COMPOSITION_Date,106) AS DATE_FOR
							FROM TRANS_COMPOSITION 
							WHERE 
							COMPOSITION_FINYEAR='''+@FinYear+'''
							AND COMPOSITION_SEGMENTID  in ('+@SegmentIDM+')
							AND COMPOSITION_BRANCHID IN ('+@Branch+')
							AND COMPOSITION_COMPANYID='''+@CompanyID+'''
							AND COMPOSITION_CUSTOMEREXCHANGEID='''+@SubAccountIDM+'''
							AND COMPOSITION_SettlementNumber='''+@SettlementNM+'''
							AND	COMPOSITION_SettlementType='''+ @SettlementTM+'''
							AND COMPOSITION_Date='''+@DateForM+'''
							AND COMPOSITION_SettlementNumber <> ''''
							AND	COMPOSITION_SettlementType <> ''''
							AND COMPOSITION_SettlementNumber not in (''Hldbk'',''Margin'')	
							ORDER BY  COMPOSITION_SettlementNumber
							'
							INSERT INTO @OBLIGATION_BREAKUP_NSE_FO(FO_IDENTITY ,SCRIP,	SETTLEMENT, FOPosition_CustomerExchangeID,BF,BF_PRICE,BUY,BUY_PRICE,SELL,SELL_PRICE,CF,CF_PRICE,NET,DATE_FOR) 
							EXEC(@SQLCM)
							SET  @SQLCM=NULL

							END


							select @FINID=@FINID+1
							set @SegmentIDM=null
							set @SegmentNameM=null
							set @SettlementNM=null
							set @SettlementTM=null
							set @SubAccountIDM=null
				   END
				   ELSE
				   BEGIN
						select @FINID=@FINID+1
						set @SegmentIDM=null
						set @SegmentNameM=null
						set @SettlementNM=null
						set @SettlementTM=null
						set @SubAccountIDM=null
					END
		    END
	


		END

 SELECT * FROM @ObligationBreakup ORDER BY PRODUCTSERIESID

IF(@ReportType='ObligationBrkUp')
		BEGIN
						
								SET @SQLCHARGE='
									SELECT * FROM (
										SELECT
										(
										SELECT TOP 1 VOUCHERTYPE_NAME  FROM MASTER_VOUCHERTYPE WHERE VOUCHERTYPE_CODE=LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)) AS 
										CHARGE_TYPE1,
										CASE 
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XU'' THEN   ''SERVICE TAX & CESS ON TRAN.CHARGE''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XY'' THEN   ''STAMP DUTY''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XA'' THEN   ''STT''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XT'' THEN   ''TRANSACTION CHARGES''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XS'' THEN   ''SERVICE TAX & EDU.CESS''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''XI'' THEN   ''SEBI FEE''
										WHEN LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)=''YY'' THEN   ''NET OBLIGATION''
										END
										AS CHARGE_TYPE2,
										case 
										when Accountsledger_AmountCr=''0.00000000'' then  (-1)*Accountsledger_AmountDr  
										when Accountsledger_AmountDr=''0.00000000'' then  Accountsledger_AmountCr   end
										as ACCOUNTSLEDGER_AMOUNTDR,
--										ACCOUNTSLEDGER_AMOUNTDR,
										ACCOUNTSLEDGER_SETTLEMENTNUMBER+''''+ACCOUNTSLEDGER_SETTLEMENTTYPE AS SETTLEMENT,
										ACCOUNTSLEDGER_SUBACCOUNTID,
										CONVERT(VARCHAR,accountsledger_transactiondate,106) AS CHARGE_DATE	
										FROM TRANS_ACCOUNTSLEDGER 
										WHERE 
										accountsledger_companyID='''+@CompanyID+''' 
										and accountsledger_finyear='''+@FinYear+'''
										and accountsledger_ExchangeSegmentID in ( '+@Segment+') 
										AND	accountsledger_transactiondate BETWEEN '''+  @FromDate +'''  AND  '''+@ToDate+'''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''XO''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''YD''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''YE''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''XP''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''XX''
										AND  LEFT(ACCOUNTSLEDGER_TRANSACTIONREFERENCEID,2)!=''XW''		
										and accountsledger_MainAccountID in ('+ @MainAccount+')
										and AccountsLedger_BranchID in ('+ @Branch +')
										  '+@SQLCOND+ @SQLCB + @SQLJV +' 
										AND ACCOUNTSLEDGER_SETTLEMENTNUMBER <> ''''
										AND ACCOUNTSLEDGER_SETTLEMENTTYPE <> ''''
										AND ACCOUNTSLEDGER_SETTLEMENTNUMBER not in (''Hldbk'',''Margin'')		
										and AccountsLedger_SubAccountID is not null 
										) AS T ORDER BY T.CHARGE_TYPE1  desc
				'
				EXEC(@SQLCHARGE)
END
ELSE 
BEGIN
			SELECT 	NULL AS CHARGE_TYPE,NULL AS CHARGE_TYPE,NULL AS 	ACCOUNTSLEDGER_AMOUNTDR,NULL AS SETTLEMENT	,NULL AS ACCOUNTSLEDGER_SUBACCOUNTID,NULL AS CHARGE_DATE							
END	






--if ( @FromDate = '4/1/2011 12:00:00 AM' or @FromDate ='4/1/2010 12:00:00 AM' or @FromDate ='4/1/2009 12:00:00 AM' or @FromDate ='4/1/2012 12:00:00 AM' or @FromDate ='4/1/2013 12:00:00 AM' or @FromDate <>'4/1/2014 12:00:00 AM')
--begin
--if(@ReportType!='ObligationBrkUp' )
--begin
--update #TEMPLEDGERMAIN set OpeningBalanceDr=case when OpeningBal<0 then abs(OpeningBal) else null end,OpeningBalanceCr=case when OpeningBal>0 then abs(OpeningBal) else null end ,
--								OpeningTotal=OpenIngBal 
--	from (
--		select CustomerID as CustID,OpenIngBal as OpeningBal from @TempLedgerCrystalOpeningBal
--	) as DD 
--	where SubId=DD.CustID or DD.CustID is null
----select * from #TEMPLEDGERMAIN
--set @Closing=0
--	set @ClosingDr=0
--	set @ClosingCr=0
--	set @ID=0
--	select @FAXID=max(SrNo) from #TEMPLEDGERMAIN
--	select @FINID=min(SrNo) from #TEMPLEDGERMAIN
--	while @FAXID>=@FINID
--	begin
--		set @AmountCr=0
--		set @AmountDr=0
--			declare @trantype1 varchar(50)
--			set @trantype1=(select Accountsledger_TransactionType from #TEMPLEDGERMAIN where SrNo=@FINID)
			
--		if(@FINID=1)
--			select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		select @CustID=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		if(@CustID<>@CustID1)
--		begin
--			set @ID=0
--			set @ID=@ID+1
--			if(@ID=1)
--			begin
--				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@AmountCr-@AmountDr
--				if(@trantype1='OpeningBalance')
--					begin
--						set @ClosingDr=@AmountDr
--						set @ClosingCr=@AmountCr
--					end
--				set @AmountCr=0
--				set @AmountDr=0
--				update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--				where SrNo=@FINID --* AND  SubID=@CustID
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
----				set @Closing=@Closing-@AmountDr+@AmountCr
----				set @Closing=@AmountDr-@AmountCr
--				--*set @ClosingDr=@ClosingDr+@AmountDr
----				set @ClosingCr=@ClosingCr+@AmountCr
				
--				set @Closing=@AmountCr-@AmountDr
----				set @ClosingDr=@ClosingDr+@AmountDr
--				if(@trantype1!='OpeningBalance')
--					begin
--		--				set @ClosingDr=@ClosingDr+@AmountDr
--						set @ClosingDr=@AmountDr
--		--				set @ClosingCr=@ClosingCr+@AmountCr
--						set @ClosingCr=@AmountCr
--					end
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID --AND  SubID=@CustID
--			end
--			else
--			begin
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing+@AmountCr-@AmountDr
--				if(@trantype1!='OpeningBalance')
--					begin
--						print 'aa'
--						set @ClosingDr=@ClosingDr+@AmountDr	
--						set @ClosingCr=@ClosingCr+@AmountCr	
--						update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--						where SrNo=@FINID 
--					end	
--				else
--					begin
----					update #TEMPLEDGERMAIN set ClosingTotal=@Closing where SrNo=@FINID 
--					update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--					where SrNo=@FINID 
--					print 'bb'
--					end
				
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
--end
				
----			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
----				where SubID=@CustID
--		end
--		else
--		begin
--			set @ID=@ID+1
--			if(@ID=1)
--			begin
--				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@AmountCr-@AmountDr
--				if(@trantype1='OpeningBalance')
--					begin
--						set @ClosingDr=@AmountDr
--						set @ClosingCr=@AmountCr
--					end
--				set @AmountCr=0
--				set @AmountDr=0
--				update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--				where SrNo=@FINID
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
----				set @Closing=@Closing-@AmountDr+@AmountCr
--				set @Closing=@AmountCr-@AmountDr
--				if(@trantype1!='OpeningBalance')
--					begin
--		--				set @ClosingDr=@ClosingDr+@AmountDr
--						set @ClosingDr=@AmountDr
--		--				set @ClosingCr=@ClosingCr+@AmountCr
--						set @ClosingCr=@AmountCr
--					end
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
				
--			end
--			else
--			begin
				
				
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing+@AmountCr-@AmountDr
--				if(@trantype1!='OpeningBalance')
--					begin
--						print 'aa'
--						set @ClosingDr=@ClosingDr+@AmountDr	
--						set @ClosingCr=@ClosingCr+@AmountCr	
--						update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--						where SrNo=@FINID 
--					end
--				else
--					begin
----					update #TEMPLEDGERMAIN set ClosingTotal=@Closing where SrNo=@FINID 
--					update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--					where SrNo=@FINID 
--					print 'bb'
--					end
				
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
				
------				update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
------				where SrNo=@FINID --AND  SubID=@CustID
--			end
----			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
----				where SubID=@CustID
--		end
--		select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		select @FINID=@FINID+1
--	end
--end
--print 2
--end

--else if (@FromDate <> '4/1/2011 12:00:00 AM' or @FromDate <>'4/1/2010 12:00:00 AM' or @FromDate <>'4/1/2009 12:00:00 AM' or @FromDate <>'4/1/2012 12:00:00 AM' or @FromDate <>'4/1/2013 12:00:00 AM' or @FromDate <>'4/1/2014 12:00:00 AM')
--begin
--update #TEMPLEDGERMAIN set OpeningBalanceDr=case when OpeningBal<0 then abs(OpeningBal) else null end,OpeningBalanceCr=case when OpeningBal>0 then abs(OpeningBal) else null end ,
--								OpeningTotal=OpenIngBal 
--	from (
--		select CustomerID as CustID,OpenIngBal as OpeningBal from @TempLedgerCrystalOpeningBal
--	) as DD 
--	where SubId=DD.CustID or DD.CustID is null

--set @Closing=0
--	set @ClosingDr=0
--	set @ClosingCr=0
--	set @ID=0
--	select @FAXID=max(SrNo) from #TEMPLEDGERMAIN
--	select @FINID=min(SrNo) from #TEMPLEDGERMAIN
--	while @FAXID>=@FINID
--	begin
--		set @AmountCr=0
--		set @AmountDr=0
--		if(@FINID=1)
--			select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		select @CustID=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		if(@CustID<>@CustID1)
--		begin
--			set @ID=0
--			set @ID=@ID+1
--			if(@ID=1)
--			begin
--				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@AmountCr-@AmountDr
--				set @ClosingDr=@AmountDr
--				set @ClosingCr=@AmountCr
--				set @AmountCr=0
--				set @AmountDr=0
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing-@AmountDr+@AmountCr
--				set @ClosingDr=@ClosingDr+@AmountDr
--				set @ClosingCr=@ClosingCr+@AmountCr
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
--			end
--			else
--			begin
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing-@AmountDr+@AmountCr
--				set @ClosingDr=@ClosingDr+@AmountDr	
--				set @ClosingCr=@ClosingCr+@AmountCr		
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
--			end
--			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--				where SubID=@CustID
--		end
--		else
--		begin
--			set @ID=@ID+1
--			if(@ID=1)
--			begin
--				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@AmountCr-@AmountDr
--				set @ClosingDr=@AmountDr
--				set @ClosingCr=@AmountCr
--				set @AmountCr=0
--				set @AmountDr=0
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing-@AmountDr+@AmountCr
--				set @ClosingDr=@ClosingDr+@AmountDr
--				set @ClosingCr=@ClosingCr+@AmountCr
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
--			end
--			else
--			begin
--				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
--				set @Closing=@Closing-@AmountDr+@AmountCr
--				set @ClosingDr=@ClosingDr+@AmountDr	
--				set @ClosingCr=@ClosingCr+@AmountCr	
--				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
--			end
--			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
--				where SubID=@CustID
--		end
--		select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
--		select @FINID=@FINID+1
--	end



--print 1
--end

----------------------
update #TEMPLEDGERMAIN set OpeningBalanceDr=case when OpeningBal<0 then abs(OpeningBal) else null end,OpeningBalanceCr=case when OpeningBal>0 then abs(OpeningBal) else null end ,
								OpeningTotal=OpenIngBal 
	from (
		select CustomerID as CustID,OpenIngBal as OpeningBal from @TempLedgerCrystalOpeningBal
	) as DD 
	where SubId=DD.CustID or DD.CustID is null

set @Closing=0
	set @ClosingDr=0
	set @ClosingCr=0
	set @ID=0
	select @FAXID=max(SrNo) from #TEMPLEDGERMAIN
	select @FINID=min(SrNo) from #TEMPLEDGERMAIN
	while @FAXID>=@FINID
	begin
		set @AmountCr=0
		set @AmountDr=0
		if(@FINID=1)
			select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
		select @CustID=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
		if(@CustID<>@CustID1)
		begin
			set @ID=0
			set @ID=@ID+1
			if(@ID=1)
			begin
				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@AmountCr-@AmountDr
				set @ClosingDr=@AmountDr
				set @ClosingCr=@AmountCr
				set @AmountCr=0
				set @AmountDr=0
				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@Closing-@AmountDr+@AmountCr
				set @ClosingDr=@ClosingDr+@AmountDr
				set @ClosingCr=@ClosingCr+@AmountCr
				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
			end
			else
			begin
				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@Closing-@AmountDr+@AmountCr
				set @ClosingDr=@ClosingDr+@AmountDr	
				set @ClosingCr=@ClosingCr+@AmountCr		
				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
			end
			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
				where SubID=@CustID
		end
		else
		begin
			set @ID=@ID+1
			if(@ID=1)
			begin
				select @AmountDr=isnull(OpeningBalanceDr,0),@AmountCr=isnull(OpeningBalanceCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@AmountCr-@AmountDr
				set @ClosingDr=@AmountDr
				set @ClosingCr=@AmountCr
				set @AmountCr=0
				set @AmountDr=0
				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@Closing-@AmountDr+@AmountCr
				set @ClosingDr=@ClosingDr+@AmountDr
				set @ClosingCr=@ClosingCr+@AmountCr
				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
			end
			else
			begin
				--select @AmountDr=isnull(Accountsledger_AmountDr,0),@AmountCr=isnull(Accountsledger_AmountCr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				select @AmountDr=isnull(Accountsledger_AmountCr,0),@AmountCr=isnull(Accountsledger_AmountDr,0) from #TEMPLEDGERMAIN where SrNo=@FINID
				set @Closing=@Closing-@AmountDr+@AmountCr
				set @ClosingDr=@ClosingDr+@AmountDr	
				set @ClosingCr=@ClosingCr+@AmountCr	
				update #TEMPLEDGERMAIN set Closing=@Closing where SrNo=@FINID 
			end
			update #TEMPLEDGERMAIN set ClosingTotal=@Closing,ClosingBalanceDr=@ClosingDr,ClosingBalanceCr=@ClosingCr
				where SubID=@CustID
		end
		select @CustID1=SubID from #TEMPLEDGERMAIN where SrNo=@FINID
		select @FINID=@FINID+1
	end




-----------------------
SELECT *,@SubledgerType as Identifier FROM #TEMPLEDGERMAIN order by SubID
--ORDER BY  CAST(TrDate AS DATETIME) ASC

--added by krishnendu on 3.10.2014----
declare @exch_seg_name varchar(50)
--select top 1 @exch_seg_name=SUBSTRING(SegmentName,CHARINDEX('-',SegmentName)+1,LEN(SegmentName)-charIndex('-',SegmentName)+1)+'-'+accountsledger_TransactionReferenceID FROM #TEMPLEDGERMAIN
select top 1 @exch_seg_name=SUBSTRING(SegmentName,CHARINDEX('-',SegmentName)+1,LEN(SegmentName)-charIndex('-',SegmentName)+1) FROM #TEMPLEDGERMAIN





-------Company Details---------------------------

select 
distinct  top 1
(select top 1 cmp_Name from tbl_master_company where cmp_internalid=@CompanyID) as CompanyPAN,
(select top 1 cmp_PanNo from tbl_master_company where cmp_internalid=@CompanyID) as CompanyPAN,
 isnull((select isnull(add_address1,'')+','+isnull(add_address2,'') from tbl_master_address 
where add_cntID=add1.add_cntID and add_addressType='Correspondance'),
isnull((select top 1   isnull(add_address1,'')+','+isnull(add_address2,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Residence'),
(select top 1   isnull(add_address1,'')+','+isnull(add_address2,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Office'))) as Address,
isnull((select top 1   isnull(add_address3,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Correspondance'),
isnull((select top 1   isnull(add_address3,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Residence'),
(select isnull(add_address3,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Office'))) as Address1,			
isnull((select top 1   isnull(add_Pin,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Correspondance'),
isnull((select top 1   isnull(add_Pin,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Residence'),
(select top 1   isnull(add_Pin,'') from tbl_master_address where add_cntID=add1.add_cntID and add_addressType='Office'))) as PIN,	
isnull((select top 1   isnull(phf_countryCode,'')+'-'+isnull(phf_areaCode,'')+'-'+isnull(phf_phoneNumber,'') from tbl_master_phoneFax where phf_cntID=add1.add_cntID and phf_Type='Office'),'') as PhNumber,
isnull((select  top 1   isnull(eml_email,'') from tbl_master_email where eml_cntID=add1.add_cntID and eml_Type='Official'),'') as Email,
isnull((select top 1   isnull(phf_countryCode,'')+'-'+isnull(phf_areaCode,'')+'-'+isnull(phf_phoneNumber,'') from tbl_master_phoneFax where phf_cntID=add1.add_cntID and phf_Type='Fax'),'') as FxNumber,
city_name,state,cou_country,exch_TMCode,

case when @exch_seg_name not in('COMM') then 'SEBI NO:'+exch_sebiNo else '' end as exch_sebiNo

from tbl_master_address add1,tbl_master_companyExchange,tbl_master_phoneFax,tbl_master_city,tbl_master_state,tbl_master_country,tbl_master_email
where add_cntID=(select top 1 cmp_internalID from tbl_master_company where cmp_internalid=@CompanyID)
and phf_cntID=(select top 1 cmp_internalID from tbl_master_company where cmp_internalid=@CompanyID)
 and add_city=city_id and add_state=id
and add_country=cou_id 
and eml_cntID=(select top 1 cmp_internalID from tbl_master_company where cmp_internalid=@CompanyID) 
and exch_compId=(select top 1 cmp_internalID from tbl_master_company where cmp_internalid=@CompanyID)
and EXCH_INTERNALID in (@segmentname1) 
--and phf_cntID=add_cntID and add_city=city_id and add_state=id
--and add_country=cou_id 
--and eml_cntID=add_cntID 
--
------Customer Details------------------------
--
--	
--IF(@SubAccount !='')
--BEGIN
	if(@SubledgerType='NSDL Clients')
	begin

			select cast(NSDLClients_BenAccountID as varchar) as ID,
			(dbo.fn_BeneficiaryType(NsdlClients_BenType,NsdlClients_BenSubType)+'['+dbo.fn_BeneficiarySubType(NsdlClients_BenType,NsdlClients_BenSubType )+']') as Type,
			(dbo.fn_BenAccCategory(NsdlClients_BenAccountCategory))as Category,
			NSDLClients_BenFirstHolderName as CustomerName,
			isnull(rtrim(NSDLClients_FirstHolderAdd1),'')+' , '+isnull(rtrim(NSDLClients_FirstHolderAdd2),'')+' , '+isnull(rtrim(NSDLClients_FirstHolderAdd3),'')+' ,'+
			isnull(rtrim(NSDLClients_FristHolderAdd4),'')as CustomerAddress,
			rtrim(NSDLClients_FirstHolderPinCode) as customerPinCode,
			CONVERT(varchar,NsdlClients_ActivationDateTime,106) as NsdlClients_ActivationDate,
			rtrim(NSDLClients_FirstHolderPhone) as customerPhone,
			rtrim(NSDLClients_FirstHolderPAN) as CustomerPAN,
			dbo.fn_BenStatus(NsdlClients_BeneficiaryStatus)as AccountStatus			
			from Master_NSDLClients
			where NSDLClients_BenAccountID in(select distinct SubId from #TEMPLEDGERMAIN)
			order by ID
	
	end
	else if(@SubledgerType='CDSL Clients')
	begin
	
			select substring(CdslClients_BOID,9,16)  as ID,
			CdslClients_BOSubStatus as Type,
			case when CdslClients_AccountCategory= 'CM Pool' then 'CISA Account'+ '[' +CdslClients_BOStatus+']'
				 else CdslClients_AccountCategory + '['+CdslClients_BOStatus+']'
				end as Category,
			CDSLClients_FirstHolderName as CustomerName,
			isnull(rtrim(CDSLClients_BOAddress1),'')+' , '+isnull(rtrim(CDSLClients_BOAddress2),'')+' , '+isnull(rtrim(CDSLClients_BOAddress3),'')+' ,'+
			isnull(rtrim(CDSLClients_BOCity),'')+' , '+isnull(rtrim(CDSLClients_BOState),'')+' , '+isnull(rtrim(CDSLClients_BOCountry),'')as CustomerAddress,
			isnull(rtrim(CDSLClients_BOPinCode),'')as customerPinCode ,
			convert(varchar,CdslClients_AccountCreationDate,106) as NsdlClients_ActivationDate,
			rtrim(CDSLClients_BOPhone) as customerPhone,
			rtrim(CDSLClients_FirstHolderPAN) as CustomerPAN,
			CdslClients_AccountStatus as AccountStatus		
			from Master_CDSLClients
			where CDSLClients_BenAccountNumber in(select distinct  SubId from #TEMPLEDGERMAIN )
			order by ID
	
		
	end
	ELSE if(@SubledgerType='Customers' )
	begin
				Set @SQLCMCOND='
					select  cnt_internalid as ID,
					isnull(LTRIM(RTRIM(isnull(cnt_firstname,'''')))+''  ''+LTRIM(RTRIM(isnull(cnt_middlename,''  '')))
					+LTRIM(RTRIM(isnull(cnt_lastname,''''))) 
					+''[''+isnull(LTRIM(RTRIM(isnull((SELECT TOP 1  CRG_TCODE FROM TBL_MASTER_CONTACTEXCHANGE  WHERE CRG_CNTID=cnt_internalid AND CRG_COMPANY='''+@CompanyID+'''),''''))),cnt_shortname)+'']'','''')  as CustomerName,
					isnull(
					isnull((select top 1 isnull(ltrim(rtrim(add_address1)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(add_address2)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(add_address3)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(city_name)),'''') from tbl_master_City  where city_id in (select top 1 add_City from tbl_master_address where add_cntId=cnt_internalID)),'''')+ '' ''+
					isnull((select  top 1 isnull(ltrim(rtrim(state)),'''') from tbl_master_state  where id in (select top 1 add_state from tbl_master_address where add_cntId=cnt_internalID)) ,'''')+ '' ''+
					isnull((select top 1 isnull(ltrim(rtrim(cou_country)),'''') from tbl_master_country  where cou_id in (select top 1 add_country from tbl_master_address where add_cntId=cnt_internalID)),'''')+ '' ''+
					isnull((select  top 1 isnull(ltrim(rtrim(add_pin)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')
					,'''') as CustomerAddress,
					isnull((select top 1  isnull(ltrim(rtrim(phf_phoneNumber)),'''') from tbl_master_phonefax  where phf_cntId=cnt_internalID and phf_type=''Mobile''),'''') as customerPhone,
					isnull((select top 1 isnull(crg_Number,'' '') from tbl_master_contactRegistration where crg_cntID=cnt_internalID and crg_type=''Pancard'') ,'''') as customerPAN,
					''1'' as Category
					from tbl_master_contact 
					where cnt_internalid
					in('+@SubAccount+') order by ID
				'

				EXEC (@SQLCMCOND)
	end
	ELSE if( @SubledgerType = 'Employees'  OR  @SubledgerType = 'Relationship Partners'  OR  @SubledgerType = 'Business Partners'  OR  @SubledgerType = 'Brokers'  OR  @SubledgerType= 'Sub Brokers'  OR @SubledgerType = 'Franchisees'  OR  @SubledgerType = 'Vendors'  OR  @SubledgerType = 'Data Vendors'  OR  @SubledgerType = 'Recruitment Agents'  OR  @SubledgerType = 'Agents'  OR  @SubledgerType = 'Consultants'  OR  @SubledgerType = 'Share Holder'  OR  @SubledgerType = 'Debtors'  OR  @SubledgerType = 'Creditors' )
	begin

				Set @SQLCMCOND='
					select  cnt_internalid as ID,
					isnull(LTRIM(RTRIM(isnull(cnt_firstname,'''')))+''  ''+LTRIM(RTRIM(isnull(cnt_middlename,''  '')))
					+LTRIM(RTRIM(isnull(cnt_lastname,''''))) 
					+''[''+isnull(case when (ltrim(rtrim(cnt_ucc))='' '' or ltrim(rtrim(cnt_ucc))=null) then ltrim(rtrim(cnt_shortname)) else ltrim(rtrim(cnt_ucc)) end,'''')+'']'','''')  as CustomerName,
					isnull(
					isnull((select top 1 isnull(ltrim(rtrim(add_address1)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(add_address2)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(add_address3)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')+ '' ,''+
					isnull((select top 1 isnull(ltrim(rtrim(city_name)),'''') from tbl_master_City  where city_id in (select top 1 add_City from tbl_master_address where add_cntId=cnt_internalID)),'''')+ '' ''+
					isnull((select  top 1 isnull(ltrim(rtrim(state)),'''') from tbl_master_state  where id in (select top 1 add_state from tbl_master_address where add_cntId=cnt_internalID)) ,'''')+ '' ''+
					isnull((select top 1 isnull(ltrim(rtrim(cou_country)),'''') from tbl_master_country  where cou_id in (select top 1 add_country from tbl_master_address where add_cntId=cnt_internalID)),'''')+ '' ''+
					isnull((select  top 1 isnull(ltrim(rtrim(add_pin)),'''') from tbl_master_address where add_cntId=cnt_internalID),'''')
					,'''') as CustomerAddress,
					isnull((select top 1  isnull(ltrim(rtrim(phf_phoneNumber)),'''') from tbl_master_phonefax  where phf_cntId=cnt_internalID and phf_type=''Mobile''),'''') as customerPhone,
					isnull((select top 1 isnull(crg_Number,'' '') from tbl_master_contactRegistration where crg_cntID=cnt_internalID and crg_type=''Pancard'') ,'''') as customerPAN,
					''1'' as Category
					from tbl_master_contact 
					where cnt_internalid
					in('+@SubAccount+') order by ID
				'

				EXEC (@SQLCMCOND)
	end
	ELSE 

	BEGIN 

			select distinct  SUBACCOUNT_CODE  as ID,
					' ' as Type,
					'1' as Category,
					SUBACCOUNT_NAME as CustomerName,
					' ' as CustomerAddress,
					' ' as customerPinCode,
					' ' as NsdlClients_ActivationDate,
	    			' ' as customerPhone,
					' ' as CustomerPAN,
					' ' as AccountStatus	 
					from master_subaccount,trans_accountsledger
					where SUBACCOUNT_CODE IN (SELECT DISTINCT SUBID FROM #TEMPLEDGERMAIN )
					and SubAccount_MainAcReferenceID in (SELECT DISTINCT SUBID1 FROM #TEMPLEDGERMAIN ) 
				
	END 	

--END
--	ELSE 
--	BEGIN 
--
--			select distinct  SUBACCOUNT_CODE  as ID,
--					SUBACCOUNT_NAME as CustomerName,
--					' ' as CustomerAddress,
--	    			' '  as customerPhone,
--					' ' as CustomerPAN 
--					from master_subaccount
--					where SUBACCOUNT_CODE IN (SELECT DISTINCT SUBID FROM #TEMPLEDGERMAIN )
--				
--	END 		


SELECT 
FO_IDENTITY,SCRIP,SETTLEMENT,FOPosition_CustomerExchangeID,
CASE WHEN LEFT(FO_IDENTITY,3)='OPT' THEN  '0.0' ELSE BF END AS 
BF,
CASE WHEN LEFT(FO_IDENTITY,3)='OPT' THEN  '0.0' ELSE  BF_PRICE END AS 
BF_PRICE ,
BUY,
BUY_PRICE,
SELL,
SELL_PRICE,
CASE WHEN LEFT(FO_IDENTITY,3)='OPT' THEN  '0.0' ELSE  CF END AS 
CF,
CASE WHEN LEFT(FO_IDENTITY,3)='OPT' THEN  '0.0' ELSE  CF_PRICE END AS 
CF_PRICE,
NET, 
DATE_FOR
FROM @OBLIGATION_BREAKUP_NSE_FO 
where SrNo not in 
 (SELECT SrNo FROM @OBLIGATION_BREAKUP_NSE_FO where   LEFT(FO_IDENTITY,3)='OPT' and  (SELL is  null or  SELL=0.00) and  (BUY is null or BUY=0.00)  )


--SELECT * FROM @OBLIGATION_BREAKUP_NSE_FO

DROP TABLE #TEMPLEDGERMAIN
DROP TABLE #TEMPOP  


END




