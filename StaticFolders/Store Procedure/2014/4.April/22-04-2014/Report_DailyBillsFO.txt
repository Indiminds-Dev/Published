
ALTER procedure [dbo].[Report_DailyBillsFO]
@date varchar(30),
@ClientsID varchar(max),
@branch varchar(max),
@segment varchar(20),
@Companyid varchar(30),
@Finyear varchar(15),
@grpbranch varchar(10),
@CalType varchar(10),
@MasterSegment varchar(10),
@AppMargin varchar(10),
@AppMarginconsolidate varchar(10),
@GRPID VARCHAR(MAX),
@Broker varchar(5)



AS
BEGIN
set nocount on
	declare @SQL varchar(max),@POABenefit char(1)
	

	select @POABenefit=(select DISTINCT 1 from Config_RiskProfile where RiskProfile_SegmentID=@segment and isnull(RiskProfile_ConsiderPOA,'0')='1')

	-------------------Table Creation Begin

	
	create table #TEMP (customerid varchar(50),clientname varchar(200),
	ucc varchar(50),OpeningBal numeric(28,2),Premium numeric(28,2),MTM numeric(28,2),
	FutureSettlement numeric(28,2),ASNEXCFINSET numeric(28,2),Charges numeric(28,2),
	ServTax numeric(28,2),NetObligation numeric(28,2),NetAdj numeric(28,2),ClosingBal numeric(28,2),
	CashMarnDeposit numeric(28,2),ColeteralVal numeric(28,2),EffecTiveDeposit numeric(28,2),
	ApplMargin numeric(28,2),ExcessShortage numeric(28,2),Exposure numeric(28,2),
	GrpId varchar(50),GrpName varchar(500),FinalDeposit numeric(28,2),
	Spanmargin numeric(28,2),PremiumMargin numeric(28,2),ExposureMargin numeric(28,2),

    Grand_OpeningBal numeric(28,2),Grand_Premium numeric(28,2),Grand_MTM numeric(28,2),
	Grand_FutureSettlement numeric(28,2),Grand_ASNEXCFINSET numeric(28,2),Grand_Charges numeric(28,2),
	Grand_ServTax numeric(28,2),Grand_NetObligation numeric(28,2),Grand_NetAdj numeric(28,2),Grand_ClosingBal numeric(28,2),
	Grand_CashMarnDeposit numeric(28,2),Grand_ColeteralVal numeric(28,2),Grand_EffecTiveDeposit numeric(28,2),
	Grand_ApplMargin numeric(28,2),Grand_ExcessShortage numeric(28,2),Grand_Exposure numeric(28,2),
	Grand_Spanmargin numeric(28,2),Grand_PremiumMargin numeric(28,2),Grand_ExposureMargin numeric(28,2),

    Branch_OpeningBal numeric(28,2),Branch_Premium numeric(28,2),Branch_MTM numeric(28,2),
	Branch_FutureSettlement numeric(28,2),Branch_ASNEXCFINSET numeric(28,2),Branch_Charges numeric(28,2),
	Branch_ServTax numeric(28,2),Branch_NetObligation numeric(28,2),Branch_NetAdj numeric(28,2),Branch_ClosingBal numeric(28,2),
	Branch_CashMarnDeposit numeric(28,2),Branch_ColeteralVal numeric(28,2),Branch_EffecTiveDeposit numeric(28,2),
	Branch_ApplMargin numeric(28,2),Branch_ExcessShortage numeric(28,2),Branch_Exposure numeric(28,2),
	Branch_Spanmargin numeric(28,2),Branch_PremiumMargin numeric(28,2),Branch_ExposureMargin numeric(28,2))

	---------------Closing Baln Fetch  Begin
	Create Table #TEMP1(TEMP1_CustomerID varchar(15),TEMP1_closing numeric(28,2))

	-------------For Stocks
	CREATE TABLE #MARGINSTOCKS(Clientid varchar(50),Stocksresult numeric(28,6),Quantity numeric(28,6),
	productid varchar(500),closeprice  numeric(28,6),varmargin numeric(28,6))

	
	----------------------------UPDATE COLETERAL
	Create Table #ABC(QuantityS numeric(28,0),CustomerIDS varchar(15),ProductSeriesIDS varchar(30),
	SegmentIDS varchar(30),SettlementNumberS varchar(20),SettlementNumberT varchar(15),SourceSegmentId varchar(30))


	-------Client Selection
	CREATE TABLE #TABCLIENT (CLIENTID VARCHAR(50),CLIENTNAME1 VARCHAR(500),UCC1 VARCHAR(50),
	GROUPID1 VARCHAR(50),GRPNAME1 VARCHAR(500))


-----Clients From Trans_DailyFOMargin
	CREATE TABLE #TempMargin (TempMargin_ClientID VARCHAR(50),TempMargin_Span VARCHAR(50),TempMargin_Premium VARCHAR(50),
	TempMargin_Exposure VARCHAR(50),TempMargin_Appl VARCHAR(50))


    -------------------Table Creation End

	--------Client Fetch
	SELECT @sql='Select distinct cnt_internalid,(isnull(rtrim(cnt_firstName),'+char(39)+''+char(39)+') +'
				+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_middleName),'+char(39)+''+char(39)+')+'
				+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_lastName),'+char(39)+''+char(39)+')),
				rtrim(cnt_UCC) AS UCC,'
	IF(@grpbranch='BRANCH')
			BEGIN
				Select @sql=@sql+'branch_id,isnull(rtrim(branch_description),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(branch_code),'+char(39)+''+char(39)+')+'']'''
			END
	ELSE 
		BEGIN
				Select @sql=@sql+'gpm_id,isnull(rtrim(GPM_DESCRIPTION),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(GPM_CODE),'+char(39)+''+char(39)+')+'']'''
		END
	Select @sql=@sql+'
	from tbl_master_contact,'
	IF(@grpbranch='BRANCH')
		BEGIN
			Select @sql=@sql+'tbl_master_branch 
			where cnt_branchid=branch_id'
			IF(@GRPID<>'ALL')
			BEGIN
				Select @sql=@sql+' AND cnt_branchid IN ('+@GRPID+')'	
			END
		END
			
	ELSE
		BEGIN
			Select @sql=@sql+'tbl_master_groupmaster,tbl_trans_group
			where cnt_internalid=grp_contactid
			AND gpm_type='''+@grpbranch+'''
			AND grp_groupmaster=gpm_id
			AND GRP_GROUPTYPE='''+@grpbranch+''''
			If @GRPID<>'ALL'
			BEGIN
				Select @sql=@sql+' and gpm_id in ('+@GRPID+')'
			END
		END
	If @ClientsID='POA'
	BEGIN
		Select @sql=@sql+' and cnt_internalid in (select dpd_cntID from tbl_master_contactdpdetails where dpd_POA=1)'
	END
	If (@ClientsID<>'ALL' And @ClientsID<>'POA')
	BEGIN
		Select @sql=@sql+' and cnt_internalid in ('+@ClientsID+')'
	END
	--Select @sql=@sql+' and cnt_internalid like ''CL%'' and cnt_branchid in ('+@branch+')'
	if @Broker='CL'
						Begin
						Select @sql=@sql+' and cnt_internalid like ''CL%'' and cnt_branchid in ('+@branch+')'
						End
						if @Broker='BO'
						Begin
						Select @sql=@sql+' and cnt_internalid like ''BO%'' and cnt_branchid in ('+@branch+')'
						End

	INSERT INTO #TABCLIENT(CLIENTID,CLIENTNAME1,UCC1,GROUPID1,GRPNAME1)
	EXEC(@sql)


				-------------For Margin

				select @SQL='select customerid,
				OpeningBal,Premium,MTM,
				FutureSettlement,ASNEXCFINSET,Charges,ServTax,NetObligation,
				cast(0.0 as varchar(50)) as NetAdj,
				cast(0.0 as varchar(50)) as ClosingBal,
				cast(0.0 as varchar(50)) as CashMarnDeposit,
				cast(0.0 as varchar(50)) as ColeteralVal,
				cast(0.0 as varchar(50)) as EffecTiveDeposit,
				cast(0.0 as varchar(50)) as ExcessShortage,
				Exposure
				FROM
				(select distinct FOPositionSummary_CustomerExchangeID as customerid,
				cast(0.0 as varchar(50)) as OpeningBal,
				cast(FOPositionSummary_Premium as varchar) as Premium,
				cast(FOPositionSummary_MTMPL as varchar) as MTM,
				cast(FOPositionSummary_FutureFinalSettlement as varchar) as FutureSettlement,
				cast(FOPositionSummary_ExcAsnDlvMarkedValue as varchar) as ASNEXCFINSET,

				cast(isnull(FOPositionSummary_TranCharges,0)+isnull(FOPositionSummary_StampDuty,0)+isnull(FOPositionSummary_OtherCharges,0)+
					isnull(FOPositionSummary_STT,0)+isnull(FOPositionSummary_STTRoundOff,0)+isnull(FOPositionSummary_SebiFee,0)+isnull(FOPositionSummary_ClearingCharge,0) as varchar) as Charges,

				cast(isnull(FOPositionSummary_TotalServiceTax,0)+isnull(FOPositionSummary_TotalEduCess,0)+isnull(FOPositionSummary_TotalHgrEduCess,0) as varchar) as ServTax,
				cast(isnull(FOPositionSummary_NetBillAmount,0)as varchar) as NetObligation,

				cast(0.0 as varchar(50)) as NetAdj,
				cast(0.0 as varchar(50)) as ClosingBal,
				cast(0.0 as varchar(50)) as CashMarnDeposit,
				cast(0.0 as varchar(50)) as ColeteralVal,
				cast(0.0 as varchar(50)) as EffecTiveDeposit,
				cast(0.0 as varchar(50)) as ExcessShortage,

				(select  cast(sum(isnull(FoPosition_PostExcAsnDlvShortValue,0)+
				isnull(FoPosition_PostExcAsnDlvLongValue,0)) as varchar(50))  
				from Trans_FoPosition 
				where FoPosition_CustomerExchangeID=FOPositionSummary_CustomerExchangeID 
				and FoPosition_SegmentID='''+@segment+'''
				and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,FoPosition_Date)) as datetime)=
				cast(DATEADD(dd, 0, DATEDIFF(dd, 0,'''+@date+''')) as datetime)
				and FoPosition_CompanyID='''+@Companyid+'''
				group by FoPosition_CustomerExchangeID)as Exposure

				From Trans_FOPositionSummary Where 
				FOPositionSummary_CustomerExchangeID like '''+@Broker+'%''
				and FOPositionSummary_Date='''+@date+'''
				and FOPositionSummary_CustomerExchangeID in (Select CLIENTID From #TABCLIENT)
				and FOPositionSummary_SegmentID='''+@segment+'''
				and FOPositionSummary_CompanyID='''+@Companyid+''')as kk'

				insert into #TEMP(customerid,OpeningBal,Premium,MTM,FutureSettlement,ASNEXCFINSET,Charges,
				ServTax,NetObligation,NetAdj,ClosingBal,CashMarnDeposit,ColeteralVal,EffecTiveDeposit,
				ExcessShortage,Exposure)
				exec(@SQL)
print @SQL

--------------Clients from Trans_DailyFOMargin

SELECT @sql='select DailyFOMargin_CustomerID AS CustomerExchangeID_MRGN,'
				If @AppMarginconsolidate='Chk'
				Begin
						Select @SQL=@SQL+'sum(isnull(DailyFOMargin_SpanMargin,0.0)) as Spanmargin,
										  sum(isnull(DailyFOMargin_BuyPremium,0.0)) as PremiumMargin,
										  sum(isnull(DailyFOMargin_ExposureMargin,0.0)) as ExposureMargin,'
				End
				Else 
				Begin
						Select @SQL=@SQL+'0 as Spanmargin,0 as PremiumMargin,0 as ExposureMargin,'
				End
				Select @SQL=@SQL+'(case when DailyFOMargin_ApplicableMargin is null then ' 

				If(@AppMargin='Include')
				Begin
				     Select @SQL=@SQL+'cast(sum(isnull(DailyFOMargin_TotalMargin,0.0))+sum(isnull(DailyFOMargin_ExposureMargin,0.0)) as varchar)'
				End
				Else
				Begin
					 Select @SQL=@SQL+'cast(sum(isnull(DailyFOMargin_TotalMargin,0.0)) as varchar)'
				End

				Select @SQL=@SQL+'else cast(sum(isnull(DailyFOMargin_ApplicableMargin,0.0)) as varchar) end) AS ApplMargin
				from Trans_DailyFOMargin Where
				DailyFOMargin_CalculationType='''+@CalType+''' 
				and DailyFOMargin_CustomerID like '''+@Broker+'%''
				and DailyFOMargin_ExchangeSegmentID='''+@segment+'''
				and DailyFOMargin_CustomerID in (Select CLIENTID From #TABCLIENT)
				and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,DailyFOMargin_Date)) as datetime)=
				cast(DATEADD(dd, 0, DATEDIFF(dd, 0,'''+@date+''')) as datetime)
				and DailyFOMargin_CompanyID='''+@Companyid+'''
				group by DailyFOMargin_ApplicableMargin,DailyFOMargin_CustomerID'
				
Insert Into #TempMargin (TempMargin_ClientID,TempMargin_Span,TempMargin_Premium,TempMargin_Exposure,TempMargin_Appl)
exec(@SQL)


	insert into #TEMP(customerid,Spanmargin,PremiumMargin,ExposureMargin,ApplMargin)
	select * from #TempMargin where TempMargin_ClientID NOT in (select distinct customerid from #TEMP)


update #TEMP set Spanmargin=TempMargin_Span,
				 PremiumMargin=TempMargin_Premium,
				 ExposureMargin=TempMargin_Exposure,
				 ApplMargin=TempMargin_Appl
from #TempMargin where customerid=TempMargin_ClientID

---------------Closing Baln Fetch  Begin

select @SQL='select ACCOUNTSLEDGER_SUBACCOUNTID,
SUM(isnull(ACCOUNTSLEDGER_AMOUNTCR,0)-isnull(ACCOUNTSLEDGER_AMOUNTDR,0)) as Amnt
from trans_accountsledger where
accountsledger_finyear='''+@Finyear+''' and accountsledger_exchangesegmentid='''+@segment+'''
and accountsledger_SubAccountID in (Select CLIENTID From #TABCLIENT)
and accountsledger_mainaccountid in (''SYSTM00002'',''SYSTM00003'')
AND ACCOUNTSLEDGER_TRANSACTIONDATE<=cast('''+@date+''' as datetime)
and AccountsLedger_CompanyID='''+@Companyid+'''
GROUP BY ACCOUNTSLEDGER_SUBACCOUNTID
HAVING SUM(isnull(ACCOUNTSLEDGER_AMOUNTCR,0)-isnull(ACCOUNTSLEDGER_AMOUNTDR,0))<>0.00'

insert Into #TEMP1(TEMP1_CustomerID,TEMP1_closing)exec(@SQL)


---------------Closing Baln Update In Main Temp Table  
Update #TEMP set CashMarnDeposit=TEMP1_closing from  #TEMP1 where TEMP1_CustomerID=customerid
		
insert into #TEMP(customerid,CashMarnDeposit)
SELECT TEMP1_CustomerID,TEMP1_closing
from #TEMP1 where TEMP1_CustomerID NOT in (select distinct customerid from #TEMP)



----------------------------UPDATE COLETERAL

Select @sql='
select isnull(DematTransactions_Quantity,0) as QuantityS,
DematTransactions_CustomerID as CustomerIDS,
DematTransactions_ProductSeriesID as ProductSeriesIDS,
DematTransactions_SegmentID as SegmentIDS,
DematTransactions_SettlementNumberS as SettlementNumberS,
DematTransactions_SettlementNumberT as SettlementNumberT,
DematTransactions_SourceSegmentId as SourceSegmentId
from Trans_DematTransactions where
DematTransactions_Date<='''+@date +'''
and DematTransactions_FinYear='''+@Finyear+'''
and DematTransactions_CustomerID  in (Select CLIENTID From #TABCLIENT)
and (DematTransactions_SegmentID='''+@segment+''' or DematTransactions_SourceSegmentId='''+@segment+''')
and DematTransactions_CompanyID='''+@Companyid+'''
and isnull(DematTransactions_TransferType,''H'')<>''CF''' 


Insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,
SegmentIDS,SettlementNumberS,SettlementNumberT,SourceSegmentId)
exec(@sql)

select * into #t from 
(select * from #ABC where SourceSegmentId is not null) as tab 

delete from #ABC where SourceSegmentId is not null

insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
SettlementNumberS,SettlementNumberT,SourceSegmentId)
select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
SettlementNumberT,null
from #t where SourceSegmentId<>SegmentIDS


insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
SettlementNumberS,SettlementNumberT,SourceSegmentId)
select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
SettlementNumberS,null,null
from #t where SourceSegmentId<>SegmentIDS


delete from #ABC where SegmentIDS<>@segment
	------------------------------------MARGIN STOCKS
	INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
	select 
	case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
	case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
	(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
	from
	(select  sum(isnull(QuantityS,0)) as QuantityS,
	CustomerIDS as CustomerIDS,
	ProductSeriesIDS as ProductSeriesIDS
	from #ABC where rtrim(ltrim(SettlementNumberS))='Margin' Group By CustomerIDS,ProductSeriesIDS) as tabS

	full outer join

	(select  sum(isnull(QuantityS,0)) as QuantityT,
	CustomerIDS as CustomerIDT,
	ProductSeriesIDS as ProductSeriesIDT
	from #ABC where rtrim(ltrim(SettlementNumberT))='Margin' Group By CustomerIDS,ProductSeriesIDS) as tabT

	on(CustomerIDS=CustomerIDT and ProductSeriesIDS=ProductSeriesIDT)


	update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)


	------------------------------------HoldBack STOCKS
	INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity)
	select 
	case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
	case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
	(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP
	from
	(select  sum(isnull(QuantityS,0)) as QuantityS,
	CustomerIDS as CustomerIDS,
	ProductSeriesIDS as ProductSeriesIDS from #ABC where
	rtrim(ltrim(SettlementNumberS))='HLDBK' Group By CustomerIDS,ProductSeriesIDS) as tabS
	
	full outer join

	(select  sum(isnull(QuantityS,0)) as QuantityT,
	CustomerIDS as CustomerIDT,
	ProductSeriesIDS as ProductSeriesIDT
	from #ABC where
	rtrim(ltrim(SettlementNumberT))='HLDBK' Group By CustomerIDS,ProductSeriesIDS) as tabT
	
	on(CustomerIDS=CustomerIDT
		and ProductSeriesIDS=ProductSeriesIDT)

		
		-------------------FETCH CLOSE PRICE				
		update #MARGINSTOCKS set closeprice=DailyStat_Close
		FROM Trans_DailyStatistics,
		(
			select max(DailyStat_DateTime) AS DATE,
				   DailyStat_ProductSeriesID AS PRID
			from Trans_DailyStatistics,#MARGINSTOCKS
			where DailyStat_DateTime<@date
			AND DailyStat_ProductSeriesID=productid
			group by DailyStat_ProductSeriesID
		) AS KK
		WHERE  DailyStat_ProductSeriesID=productid
		AND DailyStat_ProductSeriesID=PRID
		AND PRID=PRODUCTID
		AND DailyStat_DateTime=DATE

		---------------FETCH VARMARGIN
		update #MARGINSTOCKS set varmargin=DailyVar_AppMargin
		FROM Trans_DailyVar,
		(
			select max(DailyVar_Date) AS DATE,
				   DailyVar_ProductSeriesID AS PRID
			from Trans_DailyVar,#MARGINSTOCKS
			where DailyVar_Date<@date
			AND DailyVar_ProductSeriesID=productid
			group by DailyVar_ProductSeriesID
		) AS KK
		WHERE  DailyVar_ProductSeriesID=productid
		AND DailyVar_ProductSeriesID=PRID
		AND PRID=PRODUCTID
		AND DailyVar_Date=DATE


		update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)


-----------Update And Insert Into Main Table
update #TEMP set ColeteralVal=Stocksresult From
(select Clientid,sum(isnull(Stocksresult,0.0)) as Stocksresult from	#MARGINSTOCKS 
 group by Clientid having sum(isnull(Stocksresult,0.0))<>0) as kk
 Where customerid=Clientid

---- We calculate the value of Stocks in POA Accounts in case the user follows the practice of considering POA holding as Margin Stocks
If @POABenefit=1
BEGIN
	Alter table #TEMP Add POAHolding numeric(22,2) null,
						  DPID varchar(8) null,
						  ClientID2 varchar(10) null,
						  RiskProfile varchar(15) null
						  
	Create table #POAHld (CustomerID varchar(10) null,DPID varchar(8) null,ClientID varchar(10) null,ISIN varchar(12) null,Quantity numeric(18,3) null,
							HCutRate numeric(8,4) null,Price numeric(15,4) null,Value numeric(22,2) null,AssetID bigint null,SeriesID bigint null)

	Update #TEMP Set RiskProfile=	ProfileMember_Code	
									from Trans_ProfileMember 
									where ProfileMember_Type=1 
									and ProfileMember_CustomerID=CustomerID
									and @date between ProfileMember_DateFrom and isnull(ProfileMember_DateTo,'2200-12-31')
									
	Update #TEMP Set RiskProfile='DEFAULTRSK' where RiskProfile is NULL

	Update #TEMP Set DPID=dpd_dpCode,ClientID2=dpd_ClientId from tbl_master_contactDPDetails,Config_RiskProfile 
										where dpd_accountType='Default'
										and dpd_POA=1 and CustomerID=dpd_cntId
										and RiskProfile_SegmentID=@segment
										and @date between RiskProfile_DateFrom and isnull(RiskProfile_DateTo,'2200-12-31')
										and RiskProfile_Code=RiskProfile
										and RiskProfile_ConsiderPOA='1'
	
	-- Fetch Records for NSDL accounts
	Insert into #POAHld (CustomerID,DPID,ClientID,ISIN,Quantity)
	Select #TEMP.CustomerID,#TEMP.DPID,ClientID2,NsdlHolding_ISIN,NsdlHolding_Free 
	from trans_nsdlholding,#TEMP
	where LEFT(#TEMP.DPID,2)='IN'
	and ClientID2=NsdlHolding_BenAccountNumber
	and NsdlHolding_HoldingDateTime=@date
	
	-- Fetch Records for CDSL accounts
	Insert into #POAHld (CustomerID,DPID,ClientID,ISIN,Quantity)
	Select #TEMP.CustomerID,#TEMP.DPID,ClientID2,CdslHolding_ISIN,CdslHolding_FreeBalance 
	from Trans_CdslHolding,#TEMP
	where LEFT(#TEMP.DPID,2)<>'IN'
	and ClientID2=CdslHolding_BenAccountNumber
	and CdslHolding_HoldingDateTime=@date

	-- Find Rates for the ISINs which are there in any of the three CM segments
	Update #POAHld Set AssetID=(select top 1 ISIN_ProductID from Master_ISIN where ISIN_Number=ISIN)
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=1 and Equity_ProductID=AssetID)
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=4 and Equity_ProductID=AssetID)
									where SeriesID is NULL
	Update #POAHld Set SeriesID=(select top 1 Equity_SeriesID from Master_Equity where Equity_ExchSegmentID=19 and Equity_ProductID=AssetID)
									where SeriesID is NULL
	
	Update #POAHld Set HCutRate=DailyVar_AppMargin 
								from Trans_DailyVar,(SELECT DailyVar_ProductSeriesID AS PRDID,MAX(DailyVar_Date)AS DATE
													   FROM Trans_DailyVar,#POAHld 
													   WHERE DailyVar_ProductSeriesID=SeriesID
													   AND DailyVar_Date<=@date
													   GROUP BY DailyVar_ProductSeriesID) AS JK 
								where DailyVar_ProductSeriesID=SeriesID
								and DailyVar_ProductSeriesID=PRDID
								and SeriesID=PRDID
								and DailyVar_Date=DATE

	Update #POAHld Set Price=DailyStat_Close 
								from Trans_DailyStatistics,(SELECT DailyStat_ProductSeriesID AS PRDID,MAX(DailyStat_DateTime)AS DATE
															   FROM Trans_DailyStatistics,#POAHld 
															   WHERE DailyStat_ProductSeriesID=SeriesID
															   AND DailyStat_DateTime<=@date
															   GROUP BY DailyStat_ProductSeriesID) AS JK
 								where DailyStat_ProductSeriesID=SeriesID
 								and DailyStat_DateTime=DATE

	Update #POAHld Set Value=Price*Quantity*(1-(HCutRate/100))
	Update #TEMP Set POAHolding=PVal.Val
	From (	Select CustomerID As CId,sum(isnull(Value,0)) As Val 
			from #POAHld
			Group by CustomerID) As PVal
	where CustomerID=CId
	
	--- Finally add this value to already calculated collateral value
	Update #TEMP Set ColeteralVal=isnull(ColeteralVal,0)+isnull(POAHolding,0)
					where DPID IS not NULL
	
	
	Drop table #POAHld

END
----   End POA Holding Value




insert into #TEMP(customerid,ColeteralVal)
Select Clientid,Stocksresult From 
(select Clientid,sum(isnull(Stocksresult,0.0)) as Stocksresult from	#MARGINSTOCKS 
Group by Clientid having sum(isnull(Stocksresult,0.0))<>0) as kk
Where 
Clientid NOT in (select distinct customerid from #TEMP)


-----------------------------------update EffecTiveDeposit------------------------------
update #TEMP set EffecTiveDeposit=isnull(ColeteralVal,0)+isnull(CashMarnDeposit,0)
-----------------------------------------------------------------------------------------

------------------------------Insert Net Adj in #TEMP
Update #TEMP set NetAdj=Amnt from 
(select SUM(isnull(ACCOUNTSLEDGER_AMOUNTCR,0)-isnull(ACCOUNTSLEDGER_AMOUNTDR,0)) as Amnt,
AccountsLedger_SubAccountID
from trans_accountsledger,#TEMP
where accountsledger_MainAccountID ='SYSTM00001'
and AccountsLedger_SubAccountID=customerid
and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,AccountsLedger_TransactionDate)) as datetime)=cast(DATEADD(dd, 0, DATEDIFF(dd, 0,@date)) as datetime) 
and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
and AccountsLedger_ExchangeSegmentID =@segment
and Left(AccountsLedger_TransactionReferenceID,1) not in('X','Y','Z') 
and accountsledger_TransactionType<>'OpeningBalance' 
and AccountsLedger_CompanyID=@Companyid GROUP BY AccountsLedger_SubAccountID) as jb
where AccountsLedger_SubAccountID=customerid

------------------------------insert Opening Balance in #TEMP
Update #TEMP set OpeningBal=Amnt from 
(select SUM(isnull(ACCOUNTSLEDGER_AMOUNTCR,0)-isnull(ACCOUNTSLEDGER_AMOUNTDR,0)) as Amnt,
AccountsLedger_SubAccountID
from trans_accountsledger,#TEMP
where accountsledger_MainAccountID ='SYSTM00001'
and AccountsLedger_SubAccountID=customerid
and AccountsLedger_TransactionDate<@date
and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
and AccountsLedger_ExchangeSegmentID =@segment
and AccountsLedger_CompanyID=@Companyid GROUP BY AccountsLedger_SubAccountID) as jb
where AccountsLedger_SubAccountID=customerid

------------------------------insert Closing Balance in #TEMP
Update #TEMP set ClosingBal=Amnt from 
(select SUM(isnull(ACCOUNTSLEDGER_AMOUNTCR,0)-isnull(ACCOUNTSLEDGER_AMOUNTDR,0)) as Amnt,
AccountsLedger_SubAccountID
from trans_accountsledger,#TEMP
where accountsledger_MainAccountID ='SYSTM00001'
and AccountsLedger_SubAccountID=customerid
and AccountsLedger_TransactionDate<=@date
and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear
and AccountsLedger_ExchangeSegmentID =@segment
and AccountsLedger_CompanyID=@Companyid GROUP BY AccountsLedger_SubAccountID) as jb
where AccountsLedger_SubAccountID=customerid

---------------------------update Final Deposit
Update #TEMP set FinalDeposit=isnull(EffecTiveDeposit,0)+isnull(ClosingBal,0)

------------------------Update Exxes Shortage

Update #TEMP set ExcessShortage= case when isnull(FinalDeposit,0) >=0 
									  then (isnull(FinalDeposit,0)-isnull(ApplMargin,0)) 
								 else (-1)*(isnull(ApplMargin,0))end

-------------Update Client Id Group Add
Update #TEMP Set GrpId=GROUPID1,GrpName=GRPNAME1,clientname=CLIENTNAME1,ucc=UCC1
From #TABCLIENT Where customerid=CLIENTID

---------- Exposure Figures were not correct as per the calculations above.For the time being we will calculate the exposure here and
---------- replace the previously generated figure------ 25th May 2012---- binay

update #TEMP set Exposure=0.00

create table #TmpExp (ClientID varchar(10),ProductID bigint,OptType varchar(10) null,strike numeric(18,4) null,expiry datetime,
NetQty numeric(18,0),ClosePrice numeric(18,4) null,
Exposure numeric(28,2))

insert into #TmpExp (ClientID,ProductID,OptType,strike,expiry,NetQty)
select CustomerTrades_CustomerID,CustomerTrades_ProductSeriesID,Equity_Series,equity_StrikePrice,equity_effectuntil,
SUM(customertrades_unitpricequantity) 
from Trans_CustomerTrades,Master_Equity
where CustomerTrades_ExchangeSegment=@Segment
and CustomerTrades_TradeDate<=@Date
and Equity_EffectUntil>=@Date
and CustomerTrades_ProductSeriesID=Equity_SeriesID
group by CustomerTrades_CustomerID,CustomerTrades_ProductSeriesID,Equity_Series,equity_StrikePrice,equity_effectuntil
having SUM(customertrades_unitpricequantity)<>0



update #TmpExp set ClosePrice=DailyStat_AssetPrice from Trans_DailyStatistics where
DailyStat_DateTime=@Date and DailyStat_ProductSeriesID=ProductID

update #TmpExp set Exposure=
						case when isnull(strike,0)=0 then abs(NetQty)*isnull(ClosePrice,0)
						when strike>0 then
										case when NetQty>0 then abs(NetQty)*isnull(ClosePrice,0) else 0.00 end
						Else 0.00 end
										
Create table #TmpClExp (Client varchar(10) null,TotalExposure numeric(28,2) null)
Insert into #TmpClExp (Client,TotalExposure)
Select ClientID,SUM(isnull(exposure,0)) from #TmpExp
group by ClientID

Update #TEMP set Exposure=totalexposure from #TmpClExp
where client=customerid
------------------------------Group Total
update #TEMP set Branch_OpeningBal=Opening_Bal,
				Branch_Premium=Pre_mium,
				Branch_MTM=MT_M,
				Branch_FutureSettlement=Future_Settlement,
				Branch_ASNEXCFINSET=ASNEXC_FINSET,
				Branch_Charges=Char_ges,
				Branch_ServTax=Serv_Tax,
				Branch_NetObligation=Net_Obligation,
				Branch_NetAdj=Net_Adj,
				Branch_ClosingBal=Closing_Bal,
				Branch_CashMarnDeposit=CashMarn_Deposit,
				Branch_ColeteralVal=Coleteral_Val,
				Branch_EffecTiveDeposit=EffecTive_Deposit,
				Branch_ApplMargin=Appl_Margin,
				Branch_ExcessShortage=Excess_Shortage,
				Branch_Exposure=Expo_sure,
				Branch_Spanmargin=Sum_Spanmargin,
				Branch_PremiumMargin=Sum_PremiumMargin,
				Branch_ExposureMargin=Sum_ExposureMargin
		
	
				from (select  GrpId as SUM_GrpId, 
				SUM(ISNULL(OpeningBal,0)) As Opening_Bal,
				SUM(ISNULL(Premium,0))As Pre_mium,
				SUM(ISNULL(MTM,0)) as MT_M,
				SUM(ISNULL(FutureSettlement,0)) as Future_Settlement,
				SUM(ISNULL(ASNEXCFINSET,0)) as ASNEXC_FINSET,
				SUM(ISNULL(Charges,0)) as Char_ges,
				SUM(ISNULL(ServTax,0)) as Serv_Tax,
				SUM(ISNULL(NetObligation,0)) as Net_Obligation,
				SUM(ISNULL(NetAdj,0)) as Net_Adj,
				SUM(ISNULL(ClosingBal,0)) as Closing_Bal,
				SUM(ISNULL(CashMarnDeposit,0)) CashMarn_Deposit,
				SUM(ISNULL(ColeteralVal,0)) as Coleteral_Val,
				SUM(ISNULL(EffecTiveDeposit,0)) as EffecTive_Deposit,
				SUM(ISNULL(ApplMargin,0)) as Appl_Margin,
				SUM(ISNULL(ExcessShortage,0)) as Excess_Shortage,
				SUM(ISNULL(Exposure,0))as Expo_sure,
				SUM(ISNULL(Spanmargin,0)) as Sum_Spanmargin,
				SUM(ISNULL(PremiumMargin,0)) as Sum_PremiumMargin,
				SUM(ISNULL(ExposureMargin,0))as Sum_ExposureMargin 
from  #TEMP Group by GrpId) As AA where GrpId=SUM_GrpId


------------------------------------Grand Total

update #TEMP set Grand_OpeningBal=Opening_Bal1,
				Grand_Premium=Pre_mium1,
				Grand_MTM=MT_M1,
				Grand_FutureSettlement=Future_Settlement1,
				Grand_ASNEXCFINSET=ASNEXC_FINSET1,
				Grand_Charges=Char_ges1,
				Grand_ServTax=Serv_Tax1,
				Grand_NetObligation= Net_Obligation1,
				Grand_NetAdj=Net_Adj1,
				Grand_ClosingBal=Closing_Bal1,
				Grand_CashMarnDeposit=CashMarn_Deposit1,
				Grand_ColeteralVal=Coleteral_Val1,
				Grand_EffecTiveDeposit=EffecTive_Deposit1,
				Grand_ApplMargin=Appl_Margin1,
				Grand_ExcessShortage=Excess_Shortage1,
				Grand_Exposure=Expo_sure1,
				Grand_Spanmargin=Sum_Spanmargin,
				Grand_PremiumMargin=Sum_PremiumMargin,
				Grand_ExposureMargin=Sum_ExposureMargin
			
from (select    SUM(ISNULL(OpeningBal,0.00)) As Opening_Bal1,
				SUM(ISNULL(Premium,0.00))As Pre_mium1,
				SUM(ISNULL(MTM,0.00)) as MT_M1,
				SUM(ISNULL(FutureSettlement,0.00)) as Future_Settlement1,
				SUM(ISNULL(ASNEXCFINSET,0.00)) as ASNEXC_FINSET1,
				SUM(ISNULL(Charges,0.00)) as Char_ges1,
				SUM(ISNULL(ServTax,0.00)) as Serv_Tax1,
				SUM(ISNULL(NetObligation,0.00)) as Net_Obligation1,
				SUM(ISNULL(NetAdj,0.00)) as Net_Adj1,
				SUM(ISNULL(ClosingBal,0.00)) as Closing_Bal1,
				SUM(ISNULL(CashMarnDeposit,0.00)) CashMarn_Deposit1,
				SUM(ISNULL(ColeteralVal,0.00)) as Coleteral_Val1,
				SUM(ISNULL(EffecTiveDeposit,0.00)) as EffecTive_Deposit1,
				SUM(ISNULL(ApplMargin,0.00)) as Appl_Margin1,
				SUM(ISNULL(ExcessShortage,0.00)) as Excess_Shortage1,
				SUM(ISNULL(Exposure,0.00))as Expo_sure1,
				SUM(ISNULL(Spanmargin,0)) as Sum_Spanmargin,
				SUM(ISNULL(PremiumMargin,0)) as Sum_PremiumMargin,
				SUM(ISNULL(ExposureMargin,0))as Sum_ExposureMargin 
from  #TEMP) As BB



select customerid,GrpId,GrpName,clientname,ucc,
case when isnull(OpeningBal,0)=0 then null  when isnull(OpeningBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(OpeningBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(OpeningBal,0.00)) AS VARCHAR(8000)),'N') end as OpeningBal,
case when isnull(Premium,0)=0 then null  when isnull(Premium,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Premium,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Premium,0.00)) AS VARCHAR(8000)),'N') end as Premium,
case when isnull(MTM,0)=0 then null  when isnull(MTM,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(MTM,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(MTM,0.00)) AS VARCHAR(8000)),'N') end as MTM,
case when isnull(FutureSettlement,0)=0 then null  when isnull(FutureSettlement,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(FutureSettlement,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(FutureSettlement,0.00)) AS VARCHAR(8000)),'N') end as FutureSettlement,
case when isnull(ASNEXCFINSET,0)=0 then null  when isnull(ASNEXCFINSET,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') end as ASNEXCFINSET,
case when isnull(Charges,0)=0 then null  when isnull(Charges,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Charges,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Charges,0.00)) AS VARCHAR(8000)),'N') end as Charges,
case when isnull(ServTax,0)=0 then null  when isnull(ServTax,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ServTax,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ServTax,0.00)) AS VARCHAR(8000)),'N') end as ServTax,
case when isnull(NetObligation,0)=0 then null  when isnull(NetObligation,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(NetObligation,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(NetObligation,0.00)) AS VARCHAR(8000)),'N') end as NetObligation,
case when isnull(NetAdj,0)=0 then null  when isnull(NetAdj,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(NetAdj,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(NetAdj,0.00)) AS VARCHAR(8000)),'N') end as NetAdj,
case when isnull(ClosingBal,0)=0 then null  when isnull(ClosingBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ClosingBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ClosingBal,0.00)) AS VARCHAR(8000)),'N') end as ClosingBal,
case when isnull(CashMarnDeposit,0)=0 then null  when isnull(CashMarnDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') end as CashMarnDeposit,
case when isnull(ColeteralVal,0)=0 then null  when isnull(ColeteralVal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ColeteralVal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ColeteralVal,0.00)) AS VARCHAR(8000)),'N') end as ColeteralVal,
case when isnull(EffecTiveDeposit,0)=0 then null  when isnull(EffecTiveDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') end as EffecTiveDeposit,
case when isnull(Spanmargin,0)=0 then null  when isnull(Spanmargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Spanmargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Spanmargin,0.00)) AS VARCHAR(8000)),'N') end as Spanmargin,
case when isnull(PremiumMargin,0)=0 then null  when isnull(PremiumMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(PremiumMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(PremiumMargin,0.00)) AS VARCHAR(8000)),'N') end as PremiumMargin,
case when isnull(ExposureMargin,0)=0 then null  when isnull(ExposureMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ExposureMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ExposureMargin,0.00)) AS VARCHAR(8000)),'N') end as ExposureMargin,
case when isnull(ApplMargin,0)=0 then null  when isnull(ApplMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ApplMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ApplMargin,0.00)) AS VARCHAR(8000)),'N') end as ApplMargin,
case when isnull(ExcessShortage,0)=0 then null  when isnull(ExcessShortage,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(ExcessShortage,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(ExcessShortage,0.00)) AS VARCHAR(8000)),'N') end as ExcessShortage,
case when isnull(Exposure,0)=0 then null  when isnull(Exposure,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Exposure,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Exposure,0.00)) AS VARCHAR(8000)),'N') end as Exposure,

case when isnull(Branch_OpeningBal,0)=0 then null  when isnull(Branch_OpeningBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_OpeningBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_OpeningBal,0.00)) AS VARCHAR(8000)),'N') end as Branch_OpeningBal,
case when isnull(Branch_Premium,0)=0 then null  when isnull(Branch_Premium,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Premium,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Premium,0.00)) AS VARCHAR(8000)),'N') end as Branch_Premium,
case when isnull(Branch_MTM,0)=0 then null  when isnull(Branch_MTM,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_MTM,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_MTM,0.00)) AS VARCHAR(8000)),'N') end as Branch_MTM,
case when isnull(Branch_FutureSettlement,0)=0 then null  when isnull(Branch_FutureSettlement,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_FutureSettlement,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_FutureSettlement,0.00)) AS VARCHAR(8000)),'N') end as Branch_FutureSettlement,
case when isnull(Branch_ASNEXCFINSET,0)=0 then null  when isnull(Branch_ASNEXCFINSET,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') end as Branch_ASNEXCFINSET,
case when isnull(Branch_Charges,0)=0 then null  when isnull(Branch_Charges,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Charges,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Charges,0.00)) AS VARCHAR(8000)),'N') end as Branch_Charges,
case when isnull(Branch_ServTax,0)=0 then null  when isnull(Branch_ServTax,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ServTax,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ServTax,0.00)) AS VARCHAR(8000)),'N') end as Branch_ServTax,
case when isnull(Branch_NetObligation,0)=0 then null  when isnull(Branch_NetObligation,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_NetObligation,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_NetObligation,0.00)) AS VARCHAR(8000)),'N') end as Branch_NetObligation,
case when isnull(Branch_NetAdj,0)=0 then null  when isnull(Branch_NetAdj,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_NetAdj,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_NetAdj,0.00)) AS VARCHAR(8000)),'N') end as Branch_NetAdj,
case when isnull(Branch_ClosingBal,0)=0 then null  when isnull(Branch_ClosingBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ClosingBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ClosingBal,0.00)) AS VARCHAR(8000)),'N') end as Branch_ClosingBal,
case when isnull(Branch_CashMarnDeposit,0)=0 then null  when isnull(Branch_CashMarnDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') end as Branch_CashMarnDeposit,
case when isnull(Branch_ColeteralVal,0)=0 then null  when isnull(Branch_ColeteralVal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ColeteralVal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ColeteralVal,0.00)) AS VARCHAR(8000)),'N') end as Branch_ColeteralVal,
case when isnull(Branch_EffecTiveDeposit,0)=0 then null  when isnull(Branch_EffecTiveDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') end as Branch_EffecTiveDeposit,
case when isnull(Branch_ApplMargin,0)=0 then null  when isnull(Branch_ApplMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ApplMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ApplMargin,0.00)) AS VARCHAR(8000)),'N') end as Branch_ApplMargin,
case when isnull(Branch_ExcessShortage,0)=0 then null  when isnull(Branch_ExcessShortage,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ExcessShortage,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ExcessShortage,0.00)) AS VARCHAR(8000)),'N') end as Branch_ExcessShortage,
case when isnull(Branch_Exposure,0)=0 then null  when isnull(Branch_Exposure,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Exposure,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Exposure,0.00)) AS VARCHAR(8000)),'N') end as Branch_Exposure,
case when isnull(Branch_Spanmargin,0)=0 then null  when isnull(Branch_Spanmargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Spanmargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_Spanmargin,0.00)) AS VARCHAR(8000)),'N') end as Branch_Spanmargin,
case when isnull(Branch_PremiumMargin,0)=0 then null  when isnull(Branch_PremiumMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_PremiumMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_PremiumMargin,0.00)) AS VARCHAR(8000)),'N') end as Branch_PremiumMargin,
case when isnull(Branch_ExposureMargin,0)=0 then null  when isnull(Branch_ExposureMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ExposureMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Branch_ExposureMargin,0.00)) AS VARCHAR(8000)),'N') end as Branch_ExposureMargin,

case when isnull(Grand_OpeningBal,0)=0 then null  when isnull(Grand_OpeningBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_OpeningBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_OpeningBal,0.00)) AS VARCHAR(8000)),'N') end as Grand_OpeningBal,
case when isnull(Grand_Premium,0)=0 then null  when isnull(Grand_Premium,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Premium,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Premium,0.00)) AS VARCHAR(8000)),'N') end as Grand_Premium,
case when isnull(Grand_MTM,0)=0 then null  when isnull(Grand_MTM,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_MTM,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_MTM,0.00)) AS VARCHAR(8000)),'N') end as Grand_MTM,
case when isnull(Grand_FutureSettlement,0)=0 then null  when isnull(Grand_FutureSettlement,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_FutureSettlement,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_FutureSettlement,0.00)) AS VARCHAR(8000)),'N') end as Grand_FutureSettlement,
case when isnull(Grand_ASNEXCFINSET,0)=0 then null  when isnull(Grand_ASNEXCFINSET,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ASNEXCFINSET,0.00)) AS VARCHAR(8000)),'N') end as Grand_ASNEXCFINSET,
case when isnull(Grand_Charges,0)=0 then null  when isnull(Grand_Charges,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Charges,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Charges,0.00)) AS VARCHAR(8000)),'N') end as Grand_Charges,
case when isnull(Grand_ServTax,0)=0 then null  when isnull(Grand_ServTax,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ServTax,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ServTax,0.00)) AS VARCHAR(8000)),'N') end as Grand_ServTax,
case when isnull(Grand_NetObligation,0)=0 then null  when isnull(Grand_NetObligation,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_NetObligation,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_NetObligation,0.00)) AS VARCHAR(8000)),'N') end as Grand_NetObligation,
case when isnull(Grand_NetAdj,0)=0 then null  when isnull(Grand_NetAdj,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_NetAdj,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_NetAdj,0.00)) AS VARCHAR(8000)),'N') end as Grand_NetAdj,
case when isnull(Grand_ClosingBal,0)=0 then null  when isnull(Grand_ClosingBal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ClosingBal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ClosingBal,0.00)) AS VARCHAR(8000)),'N') end as Grand_ClosingBal,
case when isnull(Grand_CashMarnDeposit,0)=0 then null  when isnull(Grand_CashMarnDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_CashMarnDeposit,0.00)) AS VARCHAR(8000)),'N') end as Grand_CashMarnDeposit,
case when isnull(Grand_ColeteralVal,0)=0 then null  when isnull(Grand_ColeteralVal,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ColeteralVal,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ColeteralVal,0.00)) AS VARCHAR(8000)),'N') end as Grand_ColeteralVal,
case when isnull(Grand_EffecTiveDeposit,0)=0 then null  when isnull(Grand_EffecTiveDeposit,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_EffecTiveDeposit,0.00)) AS VARCHAR(8000)),'N') end as Grand_EffecTiveDeposit,
case when isnull(Grand_ApplMargin,0)=0 then null  when isnull(Grand_ApplMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ApplMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ApplMargin,0.00)) AS VARCHAR(8000)),'N') end as Grand_ApplMargin,
case when isnull(Grand_ExcessShortage,0)=0 then null  when isnull(Grand_ExcessShortage,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ExcessShortage,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ExcessShortage,0.00)) AS VARCHAR(8000)),'N') end as Grand_ExcessShortage,
case when isnull(Grand_Exposure,0)=0 then null  when isnull(Grand_Exposure,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Exposure,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Exposure,0.00)) AS VARCHAR(8000)),'N') end as Grand_Exposure,
case when isnull(Grand_Spanmargin,0)=0 then null  when isnull(Grand_Spanmargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Spanmargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_Spanmargin,0.00)) AS VARCHAR(8000)),'N') end as Grand_Spanmargin,
case when isnull(Grand_PremiumMargin,0)=0 then null  when isnull(Grand_PremiumMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_PremiumMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_PremiumMargin,0.00)) AS VARCHAR(8000)),'N') end as Grand_PremiumMargin,
case when isnull(Grand_ExposureMargin,0)=0 then null  when isnull(Grand_ExposureMargin,0)<0 then '-'+dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ExposureMargin,0.00)) AS VARCHAR(8000)),'N') else dbo.fn_FormatNumber(CAST(abs(isnull(Grand_ExposureMargin,0.00)) AS VARCHAR(8000)),'N') end as Grand_ExposureMargin


from #TEMP order by GrpName,clientname


SELECT @SQL='SELECT 
					 (select Top 1(cmp_panNo) from tbl_master_company where cmp_internalid='''+@Companyid+''')as cmppanno,
					 isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Work'' AND phf_cntId='''+@Companyid+'''),'''')as cmpphno,
					 (select Top 1(eml_email) from tbl_master_email where eml_cntid='''+@Companyid+''' and eml_type=''Official'')as cmpemail,
					 (select Top 1(cmp_Name) from tbl_master_company where cmp_internalid='''+@Companyid+''')as cmpname,
					 (select Top 1(cmp_ServiceTaxNo) from tbl_master_company where cmp_internalid='''+@Companyid+''')as ServiceTaxNo,
					 (select top 1(isnull(add_address1,'' '')+'' ''+ isnull(add_address2,'' '')+'' ''+isnull(add_address3,'' '')) 
															from tbl_master_address,tbl_master_company,tbl_master_city
															where cmp_internalid=add_cntid and cmp_internalid='''+@Companyid+'''
															and add_city=city_id and add_cntID='''+@Companyid+''' 
															AND add_entity=''Company'' AND add_addressType=''Office'')as cmpaddress,
					(select top 1 (isnull(city_name,'' '')+''-''+ isnull(add_pin,'' ''))
																					from tbl_master_address,tbl_master_company,tbl_master_city
																					where cmp_internalid=add_cntid and cmp_internalid='''+@Companyid+'''
																					and add_city=city_id and add_cntID='''+@Companyid+''' 
																					AND add_entity=''Company'' AND add_addressType=''Office'')as cmpaddress1,
					(SELECT TOP 1 RTRIM(EXCH_TMCODE) FROM TBL_MASTER_COMPANYEXCHANGE 
					 WHERE EXCH_COMPID='''+@Companyid+'''  '
					 IF @MASTERSEGMENT=1
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXN0000002'' AND EXCH_SEGMENTID=''CM'''
					 END 
					 IF @MASTERSEGMENT=2
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXN0000002'' AND EXCH_SEGMENTID=''FO'''
					 END 
					 IF @MASTERSEGMENT=4
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXB0000001'' AND EXCH_SEGMENTID=''CM'''
					 END 
					 IF @MASTERSEGMENT=5
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXB0000001'' AND EXCH_SEGMENTID=''FO'''
					 END 
					 SELECT @SQL=@SQL+' ) AS MEMBERCODE,
					 (SELECT TOP 1 RTRIM(EXCH_SEBINO) FROM TBL_MASTER_COMPANYEXCHANGE 
					 WHERE EXCH_COMPID='''+@Companyid+'''  '
					 IF @MASTERSEGMENT=1
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXN0000002'' AND EXCH_SEGMENTID=''CM'''
					 END 
					 IF @MASTERSEGMENT=2
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXN0000002'' AND EXCH_SEGMENTID=''FO'''
					 END 
					 IF @MASTERSEGMENT=4
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXB0000001'' AND EXCH_SEGMENTID=''CM'''
					 END 
					 IF @MASTERSEGMENT=5
					 BEGIN
							SELECT @SQL=@SQL+' AND EXCH_EXCHID=''EXB0000001'' AND EXCH_SEGMENTID=''FO'''
					 END 
					 SELECT @SQL=@SQL+' ) AS SEBINO'
			EXEC(@SQL)

----------------------------------------------------END
	drop table #TEMP
	drop table #TEMP1
	drop table #MARGINSTOCKS
	drop table #ABC
	drop table #t
	drop table #TABCLIENT
	drop table #TempMargin
	drop table #TmpExp
	drop table #TmpClExp
END

--declare @ClientsID varchar(max),@Branch varchar(max)
--
--set @ClientsID='''CLB0000384'''
--------,''CLA0000234'',''CLA0000403'',''CLA0000426'',''CLA0000459'',''CLB0000146'',
--------''CLB0000219'',''CLC0000014'',''CLD0000222'',''CLE0000002'',''CLI0000015'',''CLJ0000057'',''CLK0000148'',''CLK0000153'',''CLK0000190'',''CLK0000205'',
--------''CLP0000311'',''CLR0000252'',''CLR0000338'',''CLS0000280'',''CLS0000476'',''CLS0000670'',''CLS0000671'',''CLS0000983'',''CLS0001050'',''CLS0001053'',
--------''CLT0000058'',''CLU0000033'',''CLV0000068'''
------set @Branch='All'
--exec [Report_DailyBillsFO] '2011-07-12',@ClientsID,'178','25','COR0000002','2011-2012','Branch','E','2','Include','Chk','ALL'
--




--select * from tbl_master_Contact where cnt_ucc='QB11'

--select * from tbl_master_companyExchange







