
ALTER procedure [dbo].[Sp_FRONTENDEXPORTFILES]
@date varchar(50),
@Companyid varchar(30),
@Clients varchar(max),
@rmscategory varchar(50),
@rolname varchar(50),
@segment varchar(20), -----Note : In Case Of TWA|POS @Segment=UserSegID~ExchangeSegmentID
@ExportType varchar(10),
@segmentforrmslimot varchar(30),
@category varchar(30),
@Finyear varchar(30),
@Tradedate varchar(50),
@SYSTM1date varchar(50),
@SYSTM2date varchar(50),
@closepricedate varchar(50),
@varmargindate varchar(50),
@Product varchar(20),
@collateralholdingdate varchar(50),
@iscollateral int,
@evaluationmethod int,
@capitaltorms numeric(28,2),
@amountto numeric(28,2),
@age int,
@chkrmslimtaging varchar(10),
@unclearban varchar(10),
@unclearbandays int,
@exchangeuseridCM char(10),
@exchangeuseridFO char(10),
@expirydate varchar(50),
@exchangeuserinfo char(12),
@enabledflag char(1),
@POAORNOT varchar(10),
@chkunapproved varchar(10),
@unapprovedshares numeric(28,2),
@PndngPurchase varchar(10)

AS
BEGIN
			declare @SQL varchar(max)
			Declare @segmentselect varchar(max)
			declare @record varchar(50)
			declare @seg varchar(50)

			declare @SQLDEL varchar(max)
			Declare @NextFinYear varchar(15)
			Select @NextFinYear=cast(right(@Finyear,4) as varchar)+'-'+cast(right(@Finyear,4)+1 as varchar)

if(@ExportType='0' or @ExportType='1')--------------------------------"Investor Client Addition/Modification"
	BEGIN
			
			set @SQL=''

			create table #TEMP(clinetid varchar(50),ucc varchar(10),AcName varchar(40),
							clienttype varchar(3),contactstatus char(1),branchcode varchar(30),
							pancard varchar(10),emlid varchar(50),residenceaddr varchar(30),
							officeaddr varchar(30),officeph varchar(30),residenceph varchar(30),
							dpid char(8),dpname varchar(30),dpacno char(8),
							accountnumber varchar(20),micrno char(9),bnkname varchar(30),
							crg_frontofficegroupcode varchar(20))

				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode,
				case when len(isnull(rtrim(cnt_firstName),'''') +''''+
						isnull(rtrim(cnt_middleName),'''')+''''+
							isnull(rtrim(cnt_lastName),''''))>40 
				then  
					substring((isnull(rtrim(cnt_firstName),'''') +''''+
						isnull(rtrim(cnt_middleName),'''')+''''+
							isnull(rtrim(cnt_lastName),'''')),1,40)

				else isnull(rtrim(cnt_firstName),'''') +''''+
							isnull(rtrim(cnt_middleName),'''')+''''+
								isnull(rtrim(cnt_lastName),'''') end as AcName,
				case when cnt_clienttype in(''Retail'',''HNI'',''Trading Member'',''PMS Client'',''NBFC Client'',''Pro Trading'',''Pro Investment'')
				 then ''NI''
					when cnt_clienttype=''NRI'' then ''NRI''
						when cnt_clienttype in(''FI'',''FII'') then ''I''
							when cnt_clienttype=''Foreign National'' then ''FN''
								else ''NI'' end as cnt_clienttype,
				case when cnt_contactstatus in(1,5) then ''A''
					when cnt_contactstatus=8 then ''D''
						when cnt_contactstatus in(4,6) then ''S''
							when cnt_contactstatus=7 then ''Q''
								else ''A'' end as cnt_contactstatus,
				rtrim(ltrim(branch_code)) as branch_code,
				rtrim(ltrim(isnull(crg_frontofficegroupcode,''''))) as crg_frontofficegroupcode
		  
				from tbl_master_contactexchange,tbl_master_contact,tbl_master_branch
				where cnt_branchid=branch_id'
				if @date<>'NA'
						begin
							select @SQL=@SQL+' and isnull(crg_regisdate,''1900-01-01 00:00:00.000'')>='''+@date+''''
						end 
				select @SQL=@SQL+'
				and  crg_cntid in('+@Clients+') and cnt_internalid=crg_cntid
				and crg_company='''+@Companyid+''''
				
		

			insert into #TEMP(clinetid,ucc,AcName,clienttype,contactstatus,branchcode,crg_frontofficegroupcode) exec(@SQL)
			
			update #TEMP set pancard=case when len(rtrim(ltrim(crg_number)))>10 then 
			substring((rtrim(ltrim(crg_number))),1,10) else rtrim(ltrim(crg_number)) end
			from tbl_master_contactregistration
			where crg_type='Pancard' and crg_cntid=clinetid

			update #TEMP set emlid=case when len(rtrim(ltrim(eml_email)))>50 then substring((rtrim(ltrim(eml_email))),1,50) else (rtrim(ltrim(eml_email))) end from tbl_master_email
			where eml_type='Official' and eml_cntid=clinetid

			update #TEMP set residenceaddr=
			case when len(rtrim(ltrim(isnull(add_address1,'')))+' '+rtrim(ltrim(isnull(add_address2,'')))+rtrim(ltrim(isnull(add_address3,'')))+rtrim(ltrim(isnull(add_pin,''))))>30
				then substring((rtrim(ltrim(isnull(add_address1,'')))+' '+rtrim(ltrim(isnull(add_address2,'')))+rtrim(ltrim(isnull(add_address3,''))+rtrim(ltrim(isnull(add_pin,''))))),1,30)
					else rtrim(ltrim(isnull(add_address1,'')))+' '+rtrim(ltrim(isnull(add_address2,'')))+rtrim(ltrim(isnull(add_address3,'')))+rtrim(ltrim(isnull(add_pin,''))) end 

			from tbl_master_address
			where add_cntID=clinetid and add_entity='Customer/Client' 
			and add_addressType=(select top 1 add_addressType from 
			(select add_addressType,
			  case when rtrim(ltrim(add_addressType))='Residence' then 1
			when rtrim(ltrim(add_addressType))='Registered' then 2
			when rtrim(ltrim(add_addressType))='Correspondence' then 3
			else 4 end as addreorder
			from tbl_master_address where 
			add_cntID=clinetid
			and add_entity='Customer/Client') tb
			order by addreorder)

			update #TEMP set officeaddr=
			case when len(rtrim(ltrim(add_address1))+' '+rtrim(ltrim(add_address2))+rtrim(ltrim(add_address3))+rtrim(ltrim(add_pin)))>30
				then substring((rtrim(ltrim(add_address1))+' '+rtrim(ltrim(add_address2))+rtrim(ltrim(add_address3))+rtrim(ltrim(add_pin))),1,30)
					else rtrim(ltrim(add_address1))+' '+rtrim(ltrim(add_address2))+rtrim(ltrim(add_address3))+rtrim(ltrim(add_pin)) end 
			from tbl_master_address
			where add_cntID=clinetid and rtrim(ltrim(add_addressType))='Office'

			update #TEMP set officeph=
			case when len(rtrim(ltrim(phf_phonenumber)))>30  then substring((rtrim(ltrim(phf_phonenumber))),1,30)
			else rtrim(ltrim(phf_phonenumber)) end from tbl_master_phonefax
			where phf_type='Office' and phf_cntid=clinetid
		
			update #TEMP set residenceph=case when len(rtrim(ltrim(phf_phonenumber)))>30 
				then substring((rtrim(ltrim(phf_phonenumber))),1,30) else rtrim(ltrim(phf_phonenumber)) end 
				from tbl_master_phonefax
			where phf_type='Residence' and phf_cntid=clinetid

			update #TEMP set dpid=case when len(rtrim(ltrim(dpd_dpcode)))>8 then 
			substring(rtrim(ltrim(dpd_dpcode)),1,8) else rtrim(ltrim(dpd_dpcode)) end,
			dpacno=case when len(rtrim(ltrim(dpd_clientid)))>8 then 
			 substring((rtrim(ltrim(dpd_clientid))),1,8) else rtrim(ltrim(dpd_clientid)) end 
			from tbl_master_contactdpdetails
			where dpd_cntid=clinetid

			update #TEMP set dpname=case when len(rtrim(ltrim(Dp_Name)))>30
				then substring((rtrim(ltrim(Dp_Name))),1,30)
				 else rtrim(ltrim(Dp_Name)) end 
			from master_DP,tbl_master_contactdpdetails
			where dpd_cntid=clinetid and dpd_dpcode=dp_depositoryid

			update #TEMP set accountnumber=case when len(rtrim(ltrim(cbd_accountnumber)))>20
			then substring((rtrim(ltrim(cbd_accountnumber))),1,20) else rtrim(ltrim(cbd_accountnumber)) end 
			 from tbl_trans_contactbankdetails
			where cbd_cntid=clinetid

			update #TEMP set micrno=case when len(rtrim(ltrim(bnk_micrno)))>9 
				then substring((rtrim(ltrim(bnk_micrno))),1,9) else rtrim(ltrim(bnk_micrno)) end ,
			bnkname=case when len(rtrim(ltrim(bnk_bankname)))>30 then substring((rtrim(ltrim(bnk_bankname))),1,30)
				else rtrim(ltrim(bnk_bankname)) end
			from tbl_trans_contactbankdetails,tbl_master_bank
			where cbd_cntid=clinetid and cbd_bankcode=bnk_id

			if(@ExportType='0')
				begin
						select  ucc,AcName,ucc,branchcode,pancard,null as tranpass,
						emlid,residenceaddr,officeaddr,officeph,residenceph,branchcode,
						dpid,dpname,dpacno,2 as decimalref,
						pancard,clienttype,accountnumber,micrno,bnkname,
						null as bnkaddr,contactstatus,@rmscategory as rmscategory,
						@rolname as rolname,'Online-Sqroff' as clinettypetwo,
						'WEB' as useraccesstype
						from #TEMP
				end
			else 
				begin
						select  ucc,AcName,branchcode,pancard,pancard as tranpass,
						emlid,residenceaddr,officeaddr,officeph,residenceph,branchcode,
						dpid,dpname,dpacno,2 as decimalref,
						pancard,clienttype,accountnumber,micrno,bnkname,
						null as bnkaddr,contactstatus,@rmscategory as rmscategory,
						crg_frontofficegroupcode as rolname,'Online-Sqroff' as clinettypetwo
						from #TEMP
				end
			

			
			set @record=null
			set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='INVCLNT'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				set @seg=''
				set @seg=(select rtrim(ltrim(exch_segmentid))  from tbl_master_companyExchange where exch_internalid=@segment)
			if(@ExportType='1')
				begin
						select 'NOW_CLNT_Addition_'+@seg+'_'+@record as filename,@record as record,
						REPLACE(CONVERT(VARCHAR(10), getdate(), 103), '/', '') as date
				end
			else
				begin
						select 'NOW_INVCLNT_Addition_'+@seg+'_'+@record as filename,@record as record,
						REPLACE(CONVERT(VARCHAR(10), getdate(), 103), '/', '') as date
				end
				
				drop table #TEMP
	END----------------------------------------Investor Client Addition/Modification END
else if(@ExportType='3' or @ExportType='TAW|RMS' or @ExportType='TAW|POS')------------------------------------RMS Limit
	BEGIN
			
			----Split @segment Parameter in Case When @ExportType='TAW|POS'
			Declare @POS_SegmentID int,@POS_ExchangeSegmentID int
			if(@ExportType='TAW|POS')
			Begin
				Select @POS_SegmentID=dbo.fnSplit(@segment,'~',1)
				Select @POS_ExchangeSegmentID=dbo.fnSplit(@segment,'~',2)
				Select @segment=dbo.fnSplit(@segment,'~',1)
			End
			---Note :::::: OLD Code Change For Single Or Multiple Segment (Below Section Denote By O*  For Old   N*  For New)
			set @SQL=''
			
			set @segmentselect=''

			create table #TEMP1_Temp(fullname varchar(200),clinetid varchar(50),ucc_tcode varchar(10),exchange char(10),segment char(10),
			colateralvalue numeric(12))
			
			create table #TEMP1(fullname varchar(200),clinetid varchar(50),ucc_tcode varchar(10),exchange char(10),segment char(10),
			colateralvalue numeric(12))

			create table #Segment(segmentid varchar(10),segmentname varchar(20),ClientID Varchar(20))

			---N*
			create table #Result_Temp(cnt_internalId varchar(50),segmentid varchar(30),
			tradeaccount numeric(28,2),margindep numeric(28,2),
			unclearbal numeric(28,2),
			marginstocks numeric(28,2),holdbackstocks numeric(28,2),
			net numeric(28,2),pndsale numeric(28,2),pndpur numeric(28,2),
			dpnsdl numeric(28,2),dpcdsl numeric(28,2),age varchar(50),POA int)
			
			create table #Result(cnt_internalId varchar(50),segmentid varchar(30),
			tradeaccount numeric(28,2),margindep numeric(28,2),
			unclearbal numeric(28,2),
			marginstocks numeric(28,2),holdbackstocks numeric(28,2),
			net numeric(28,2),pndsale numeric(28,2),pndpur numeric(28,2),
			dpnsdl numeric(28,2),dpcdsl numeric(28,2),age varchar(50),POA int)
			
			CREATE TABLE #MARGINSTOCKS(Clientid varchar(50),Stocksresult numeric(28,6),Quantity numeric(28,6),
			productid varchar(500),closeprice  numeric(28,6),segment varchar(20),
			varmargin numeric(28,6))

			create table #Pndg (Quantity numeric(28,6),productid varchar(50),customer varchar(500),Segment varchar(20),
			netvalue numeric(28,6),qty numeric(28,6),haircut numeric(28,6))

			create table #DematTransactionsT(quantityT numeric(28,6),customeridT varchar(50),productidT varchar(50),segT varchar(50))
			create table #DematTransactionsS(quantityS numeric(28,6),customeridS varchar(50),productidS varchar(50),segS varchar(50))

			create table #TEMOHOLDING_CDSL (client varchar(50),benaccno varchar(500),ISINNo varchar(500),
			Free numeric(28,6),closeprice numeric(28,6),haircut numeric(28,6),ISINValue numeric(28,6),ProductId varchar(40))

			create table #TEMOHOLDING_NSDL (client varchar(50),benaccno varchar(500),ISINNo varchar(100),
			Free numeric(28,6),closeprice numeric(28,6),haircut numeric(28,6),ISINValue numeric(28,6),ProductId varchar(40))
			
			
			--N*
			Create Table #FinalTable1(fullname Varchar(1000),tradeaccount Numeric(18,2),margindep Numeric(18,2),unclearbal Numeric(18,2),
			marginstocks Numeric(18,2),holdbackstocks Numeric(18,2),Pndg Numeric(18,2),dp Numeric(18,2),net Numeric(18,2))

			Create Table #FinalTable2(ucc_tcode Varchar(10),exchange Varchar(15),segment Varchar(15),Product Varchar(500),colateralvalue Numeric(18,2),
			exposuelimt Numeric(18,2),sellexposurelimit Numeric(18,2),buyexposurelimit Numeric(18,2),turnoverlimit Numeric(18,2),
			losslimit Numeric(18,2),delamount Numeric(18,2),financelimit Numeric(18,2),sellsecuritylimit Numeric(18,2),adhocmargin Numeric(18,2),
			entitylevelmargin Numeric(18,2),category Varchar(100),groupwiseidi Varchar(10))
			
			Create Table #FileDetail(filename Varchar(100),record Varchar(100),date Varchar(12))

			Create Table #SegmentName(SegmentName Varchar(20))
			
			-----------------
			
			---Find Segment From Where SP Called
			declare @segmentname1 varchar(30)
			select @segmentname1=(select ltrim(rtrim(exh_shortName)) from tbl_master_exchange 
							where exh_cntId=tbl_master_companyExchange.exch_exchId)+'-'+
							exch_segmentId from tbl_master_companyExchange where exch_internalId=@segment
			
			--Find Client With RegisteredSegment
			Declare @Dsql_GSP Varchar(Max),@CurrentSegment Varchar(5),@HowManySegment_Count int,@Loop_Start int,@Loop_End int,
			@CientIDsWithOutQuote Varchar(Max)
			Set @Loop_Start=1
			select @Loop_End=COUNT(col) from dbo.fnSplitReturnTable(@segmentforrmslimot,',')
			
			Create Table #Contact_FullDetail(Col1 Varchar(20),Col2 Varchar(20),Col3 Varchar(250), Col4 Varchar(250),Col5 Varchar(250),
			Col6 Varchar(250),Col7 Varchar(250),Col8 Varchar(250),Col9 Varchar(250),
			SegmentName Varchar(250),TCode Varchar(20),RegisDate Varchar(50),STTPattern Char(2),STTWap Varchar(100),SegmentID int)
			
			While(@Loop_Start<=@Loop_End)
			Begin
				Select @CurrentSegment=dbo.fnSplit(@segmentforrmslimot,',',@Loop_Start)
				Select @CientIDsWithOutQuote=REPLACE(@Clients,'''','')
				Set @Dsql_GSP='RegisterSegment~'+@CurrentSegment+'~'+@Companyid+'~CLIENT|CLIENT*'+@CientIDsWithOutQuote+'*'
				
				Insert into #Contact_FullDetail (Col1,Col2,Col3,Col4,Col5,Col6,Col7,Col8,Col9,SegmentName,TCode,RegisDate,STTPattern,STTWap)
				exec [GenericStoreProcedure] 'Contact',@Dsql_GSP
				
				--Update Current Segment
				Update #Contact_FullDetail Set SegmentID=@CurrentSegment 
				Where SegmentID Is Null
				
				Set @Loop_Start=@Loop_Start+1
			End
			
			insert into #Segment(segmentid,segmentname,ClientID) Select SegmentID,SegmentName,Col1 ClientID from #Contact_FullDetail
			
			--Select * from #Contact_FullDetail
			--Select * from #Segment
			
			
			--O*
			--select @SQL='select crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode,Crg_Exchange
			--from tbl_master_contactexchange,tbl_master_contact
			--where crg_cntid in('+@Clients+') and cnt_internalid=crg_cntid'
			--if @date<>'NA'
			--		begin
			--			select @SQL=@SQL+' and isnull(crg_regisdate,''1900-01-01 00:00:00.000'')>='''+@date+''''
			--		end 
			--select @SQL=@SQL+'
			--and crg_company='''+@Companyid+''''
			if(Left(@segmentname1,3)='MCX')
				insert into #TEMP1_Temp(clinetid,ucc_tcode,exchange) 
				Select Col1,Ltrim(Rtrim(TCode)),SegmentName from #Contact_FullDetail Where Ltrim(Rtrim(Col2))<>''---Checking Whether Ac not Self
			else
				insert into #TEMP1_Temp(clinetid,ucc_tcode,exchange) 
				Select Col1,Ltrim(Rtrim(Col2)),SegmentName from #Contact_FullDetail Where Ltrim(Rtrim(Col2))<>'' ---Checking Whether Ac not Self
			
			
			--No Need Of Table Now
			Drop Table #Contact_FullDetail
			
			update #TEMP1_Temp set fullname=(isnull(rtrim(cnt_firstName),'') +''+
			isnull(rtrim(cnt_middleName),'')+''+
			isnull(rtrim(cnt_lastName),'')) from tbl_master_contact where cnt_internalid=clinetid

			
			--O*
			--update #TEMP1 set exchange=case when segmentname in('NSE - CM','NSE - FO') then rtrim(ltrim('NSE')) else null end from
			--(select segmentname from #Segment)as tab	
			
			--O*
			--update #TEMP1 set segment=case when seg='NSE - CM' then rtrim(ltrim('CASH')) when seg='NSE - FO' then rtrim(ltrim('FO')) else seg end from
			--(select case when countsegment>1 then null else (select segmentname from #Segment) end as seg  from
			--(select count(segmentid) as countsegment from #Segment)as tab) as tb	
			
			---N*
			Update #TEMP1_Temp Set segment=
									Case 
										When segmentname='NSE - CM' then 'CASH' 
										When segmentname ='NSE - FO' then 'FO'
										When segmentname='MCX - COMM' then 'COMM'
										Else segmentname
									End
			From #Segment
			Where #TEMP1_Temp.clinetid=#Segment.ClientID 
			and exchange=segmentname
			
			--O*
			--insert into #Result(cnt_internalId,segmentid)
			--select crg_cntid,segmentid from tbl_master_contactexchange,#TEMP1,#Segment
			--where crg_cntid=clinetid 
			--and crg_cntid like 'CL%' 
			--and segmentname=crg_exchange
			
			--N*
			insert into #Result_Temp(cnt_internalId,segmentid)
			Select ClientID,segmentid from #TEMP1_Temp,#Segment
			Where #TEMP1_Temp.clinetid=#Segment.ClientID
			and #TEMP1_Temp.exchange=#Segment.segmentname

			update  #Result_Temp set POA=dpd_POA
			from tbl_master_contactdpdetails 
			where cnt_internalId=dpd_cntID and dpd_POA=1
			
			update  #Result_Temp set POA=0 where POA is null
			
			--N* 
			Update #TEMP1_Temp Set exchange=Case When SegmentName in ('NSE - CM','NSE - FO') Then 'NSE' Else Null End From #Segment
			Where #TEMP1_Temp.clinetid=#Segment.ClientID and exchange=segmentname
			
			--N*
			
			
				-----------There Will Be a Looping for Each Segment to Evaluate Exact Relative Values
				Declare @Segment_Mincount int,@Segment_MaxCount int,@Segment_CurrentSegment Varchar(10),@Segment_SegmentName Varchar(10)
				
				Create Table #DistinctSegment(AutoID int identity(1,1),Segment Varchar(10),SegmentName Varchar(10))
				Insert into #DistinctSegment(Segment,SegmentName) Select Distinct segmentid,segmentname from #Segment
				
				Set @Segment_Mincount=1
				Select @Segment_MaxCount=Max(AutoID) From #DistinctSegment
				While(@Segment_Mincount<=@Segment_MaxCount)
				Begin
					Select @Segment_CurrentSegment=Segment,@Segment_SegmentName=SegmentName from #DistinctSegment Where AutoID=@Segment_Mincount
					Set @segmentforrmslimot=@Segment_CurrentSegment
					
					
					Insert into #Result
					Select * from #Result_Temp Where segmentid=@Segment_CurrentSegment
					
					Insert into #TEMP1
					Select * from #TEMP1_Temp Where segment=
														Case 
															When @Segment_SegmentName='NSE - CM' Then 'CASH' 
															When @Segment_SegmentName='NSE - FO' Then 'FO' 
															when @Segment_SegmentName='MCX - COMM' Then 'COMM' 
															Else @Segment_SegmentName
														End
					
					
					------------------------------------------------*********Trd A/c
					if @chkrmslimtaging='YES'
						begin
								select @SQL='update #Result set tradeaccount=closing from
								(select closing,closingclinet,closingSegment from 
								(select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing,
								AccountsLedger_SubAccountID as closingclinet,
								AccountsLedger_ExchangeSegmentID as closingSegment
								from trans_accountsledger,#Result where
								accountsledger_mainaccountid=''SYSTM00001''
								and AccountsLedger_SubAccountID=cnt_internalId '
								If([dbo].[fn_GetFinYear](cast(@Tradedate as datetime))<>@Finyear)
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))
										in ('''+@Finyear+''','''+@NextFinYear+''')'
								End
								Else
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+''''
								End
								select @SQL=@SQL+'
								and AccountsLedger_TransactionDate<='''+@Tradedate+'''
								and AccountsLedger_ExchangeSegmentID=segmentid
								and AccountsLedger_CompanyID='''+@Companyid+'''
								group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tbclosing) as tab
								where cnt_internalId=closingclinet
								and segmentid=closingSegment'
						end
					else
						begin
								select @SQL='update #Result set tradeaccount=closing from
								(select closing,closingclinet,closingSegment from 
								(select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing,
								AccountsLedger_SubAccountID as closingclinet,
								AccountsLedger_ExchangeSegmentID as closingSegment
								from trans_accountsledger,#Result where
								accountsledger_mainaccountid=''SYSTM00001''
								and AccountsLedger_SubAccountID=cnt_internalId '
								If([dbo].[fn_GetFinYear](cast(@SYSTM1date as datetime))<>@Finyear)
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))
										in ('''+@Finyear+''','''+@NextFinYear+''')'
								End
								Else
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+''''
								End
								select @SQL=@SQL+'
								and AccountsLedger_TransactionDate<='''+@SYSTM1date+'''
								and AccountsLedger_ExchangeSegmentID=segmentid
								and AccountsLedger_CompanyID='''+@Companyid+'''
								group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tbclosing) as tab
								where cnt_internalId=closingclinet
								and segmentid=closingSegment'
						end
						exec(@SQL)
						
		--------------------------------------------------*********Marg Dep
						update #Result set margindep=closing from
						(select closing,closingclinet,closingSegment from 
						(select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing,
						AccountsLedger_SubAccountID as closingclinet,
						AccountsLedger_ExchangeSegmentID as closingSegment
						from trans_accountsledger,#Result where
						accountsledger_mainaccountid in('SYSTM00002','SYSTM00003')
						and AccountsLedger_SubAccountID=cnt_internalId 
						and AccountsLedger_TransactionDate<=@SYSTM2date
						and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear 
						and AccountsLedger_ExchangeSegmentID=segmentid
						and AccountsLedger_CompanyID=@Companyid
						group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tbclosing) as tab
						where cnt_internalId=closingclinet
						and segmentid=closingSegment
		--------------------------------------------------*********Unclrd Balnc
				if(@unclearban='YES')----------------------UNCLEAR BALN. Not ALLOWED for some days
							begin
									update #Result set unclearbal=result from
									(select sum(isnull(AccountsLedger_AmountCr,0)-isnull(AccountsLedger_AmountDr,0)) as result,
									AccountsLedger_SubAccountID as SubAccountID,
									AccountsLedger_ExchangeSegmentID as ExchangeSegmentID
									from trans_accountsledger,#Result
									where AccountsLedger_SubAccountID=cnt_internalId
									and AccountsLedger_TransactionType='Cash_Bank'
									and AccountsLedger_TransactionReferenceID like 'R%'
									and (AccountsLedger_ValueDate is null or AccountsLedger_ValueDate='1900-01-01 00:00:00.000' or AccountsLedger_ValueDate>@SYSTM1date)
									and ltrim(rtrim(AccountsLedger_FinYear))=@Finyear 
									and AccountsLedger_ExchangeSegmentID=segmentid
									and AccountsLedger_CompanyID=@Companyid
									group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tab
									where cnt_internalId=SubAccountID
									and segmentid=ExchangeSegmentID
								
							end
				else
							begin
									update #Result set unclearbal=result from
									(select sum(isnull(AccountsLedger_AmountCr,0)-isnull(AccountsLedger_AmountDr,0)) as result,
									AccountsLedger_SubAccountID as SubAccountID,
									AccountsLedger_ExchangeSegmentID as ExchangeSegmentID
									from trans_accountsledger,#Result
									where AccountsLedger_SubAccountID=cnt_internalId
									and AccountsLedger_TransactionType='Cash_Bank'
									and AccountsLedger_TransactionReferenceID like 'R%'
									and AccountsLedger_TransactionDate<dateadd(dd,-@unclearbandays,@Tradedate)
									and (AccountsLedger_ValueDate is null or AccountsLedger_ValueDate='1900-01-01 00:00:00.000')
									and  ltrim(rtrim(AccountsLedger_FinYear))=@Finyear 
									and AccountsLedger_ExchangeSegmentID=segmentid
									and AccountsLedger_CompanyID=@Companyid
									group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tab
									where cnt_internalId=SubAccountID
									and segmentid=ExchangeSegmentID
									

							end
					

		----------------------------------------------------*********Margin Stocks*****************-------------------------
					CREATE TABLE #ABC(QuantityS NUMERIC(28,6),CustomerIDS VARCHAR(50),ProductSeriesIDS VARCHAR(50),
					SegmentIDS VARCHAR(50),SettlementNumberS VARCHAR(50),SettlementNumberT VARCHAR(50),
					SourceSegmentId VARCHAR(50))
					DECLARE @sqlabc VARCHAR(MAX)
					SET @sqlabc=''

					SET @sqlabc='select isnull(DematTransactions_Quantity,0) as QuantityS,
					DematTransactions_CustomerID as CustomerIDS,
					DematTransactions_ProductSeriesID as ProductSeriesIDS,
					DematTransactions_SegmentID as SegmentIDS,
					DematTransactions_SettlementNumberS as SettlementNumberS,
					DematTransactions_SettlementNumberT as SettlementNumberT,
					DematTransactions_SourceSegmentId as SourceSegmentId
					from Trans_DematTransactions where
					(DematTransactions_SettlementNumberS IN (''Margin'',''HLDBK'') 
							OR DematTransactions_SettlementNumberT IN (''Margin'',''HLDBK''))
					AND (DematTransactions_OwnAccountS IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
						 WHERE DPAccounts_CompanyID='''+@CompanyID+''')
						  OR
						 DematTransactions_OwnAccountT IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
						 WHERE DPAccounts_CompanyID='''+@CompanyID+'''))
						
					AND DematTransactions_Date<='''+@collateralholdingdate +'''
					and isnull(DematTransactions_TransferType,''H'')<>''CF''
					and DematTransactions_FinYear='''+@Finyear+'''
					and DematTransactions_CustomerID IN(SELECT DISTINCT cnt_internalId FROM #Result)
					and (DematTransactions_SegmentID IN('+@segmentforrmslimot+') or DematTransactions_SourceSegmentId IN('+@segmentforrmslimot+'))
					and DematTransactions_CompanyID='''+@Companyid+''''
					INSERT INTO #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,SettlementNumberS,SettlementNumberT,
					SourceSegmentId) EXEC(@sqlabc)
		--select * from #ABC
					select * into #t from 
					(select * from #ABC where SourceSegmentId is not null) as tab 
					delete from #ABC where SourceSegmentId is not null

					insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
					SettlementNumberS,SettlementNumberT,SourceSegmentId)
					select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
					SettlementNumberT,null
					from #t where SourceSegmentId<>SegmentIDS


					insert into #ABC(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
					SettlementNumberS,SettlementNumberT,SourceSegmentId)
					select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
					SettlementNumberS,null,null
					from #t where SourceSegmentId<>SegmentIDS

					set @SQLDEL=''
					select @SQLDEL='delete from #ABC where SegmentIDS not in('+@segmentforrmslimot+')'
					exec(@SQLDEL)


						INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity,segment)
						select 
						case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
						case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
						(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,
						case when SegmentIDS is null then SegmentIDT else SegmentIDS end as SegmentIDS from

						(select  sum(isnull(QuantityS,0)) as QuantityS,
						CustomerIDS as CustomerIDS,
						ProductSeriesIDS as ProductSeriesIDS,
						SegmentIDS as SegmentIDS
						from #ABC,#Result where
						rtrim(ltrim(SettlementNumberS))='Margin'
						and SegmentIDS=segmentid and CustomerIDS=cnt_internalid
						group by CustomerIDS,ProductSeriesIDS,SegmentIDS) as tabS
						
						full outer join

						(select  sum(isnull(QuantityS,0)) as QuantityT,
						CustomerIDS as CustomerIDT,
						ProductSeriesIDS as ProductSeriesIDT,
						SegmentIDS as SegmentIDT
						from #ABC,#Result where
						rtrim(ltrim(SettlementNumberT))='Margin'
						and SegmentIDS=segmentid and CustomerIDS=cnt_internalid
						group by CustomerIDS,ProductSeriesIDS,SegmentIDS) as tabT
						
						on(CustomerIDS=CustomerIDT
							and ProductSeriesIDS=ProductSeriesIDT
								and SegmentIDS=SegmentIDT)

				
		-------------------FETCH CLOSE PRICE				
			update #MARGINSTOCKS set closeprice=DailyStat_Close
			from Trans_DailyStatistics,
										(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
										From Trans_DailyStatistics,#MARGINSTOCKS
										where DailyStat_DateTime<=@closepricedate 
										and DailyStat_ProductSeriesID=productid
										Group By DailyStat_ProductSeriesID) as KK

			where DailyStat_ProductSeriesID=productid
			and DailyStat_DateTime=Date
			and DailyStat_ProductSeriesID=PrdId and PrdId=productid

		----------------FETCH VARMARGIN
					if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
								update #MARGINSTOCKS set varmargin=
								case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end
								from Trans_DailyVar,
															(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
															From Trans_DailyVar,#MARGINSTOCKS
															where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
															Group By DailyVar_ProductSeriesID) as KK

								where DailyVar_ProductSeriesID=productid
								and DailyVar_Date=Date
								and DailyVar_ProductSeriesID=PrdId and PrdId=productid


						end
					else
						begin

								update #MARGINSTOCKS set varmargin=DailyVar_AppMargin 
								from Trans_DailyVar,
															(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
															From Trans_DailyVar,#MARGINSTOCKS
															where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
															Group By DailyVar_ProductSeriesID) as KK

								where DailyVar_ProductSeriesID=productid
								and DailyVar_Date=Date
								and DailyVar_ProductSeriesID=PrdId and PrdId=productid
								
						end
						

					update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)

					update #Result set marginstocks=Stocksresult from 
					(select sum(isnull(Stocksresult,0.0)) as Stocksresult,
					Clientid,segment from #MARGINSTOCKS 	
					 group by Clientid,segment) as tab
					where Clientid=cnt_internalId
					and segment=segmentid


		------------------------------------------------*******Margin Stocks END**************-----------------------
		delete from #MARGINSTOCKS
		----------------------------------------------********Holdback Stocks BEGIN**********-------------------------------------
						INSERT INTO #MARGINSTOCKS(Clientid,productid,Quantity,segment)
						select 
						case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
						case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
						(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,
						case when SegmentIDS is null then SegmentIDT else SegmentIDS end as SegmentIDS from

						(select  sum(isnull(QuantityS,0)) as QuantityS,
						CustomerIDS as CustomerIDS,
						ProductSeriesIDS as ProductSeriesIDS,
						SegmentIDS as SegmentIDS
						from #ABC,#Result where
						rtrim(ltrim(SettlementNumberS))='HLDBK'
						and SegmentIDS=segmentid and CustomerIDS=cnt_internalid
						group by CustomerIDS,ProductSeriesIDS,SegmentIDS) as tabS
						
						full outer join

						(select  sum(isnull(QuantityS,0)) as QuantityT,
						CustomerIDS as CustomerIDT,
						ProductSeriesIDS as ProductSeriesIDT,
						SegmentIDS as SegmentIDT
						from #ABC,#Result where
						rtrim(ltrim(SettlementNumberT))='HLDBK'
						and SegmentIDS=segmentid and CustomerIDS=cnt_internalid
						group by CustomerIDS,ProductSeriesIDS,SegmentIDS) as tabT
						
						on(CustomerIDS=CustomerIDT
							and ProductSeriesIDS=ProductSeriesIDT
								and SegmentIDS=SegmentIDT)
					
		-------------------FETCH CLOSE PRICE				

			update #MARGINSTOCKS set closeprice=DailyStat_Close
			from Trans_DailyStatistics,
										(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
										From Trans_DailyStatistics,#MARGINSTOCKS
										where DailyStat_DateTime<=@closepricedate 
										and DailyStat_ProductSeriesID=productid
										Group By DailyStat_ProductSeriesID) as KK

			where DailyStat_ProductSeriesID=productid
			and DailyStat_DateTime=Date
			and DailyStat_ProductSeriesID=PrdId and PrdId=productid



		----------------FETCH VARMARGIN
						if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
									update #MARGINSTOCKS set varmargin=
									case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end
									from Trans_DailyVar,
														(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
														From Trans_DailyVar,#MARGINSTOCKS
														where DailyVar_Date<=@varmargindate 
														and DailyVar_ProductSeriesID=productid
														Group By DailyVar_ProductSeriesID) as KK

									where DailyVar_ProductSeriesID=productid
									and DailyVar_Date=Date
									and DailyVar_ProductSeriesID=PrdId and PrdId=productid

						end
					else
						begin
									update #MARGINSTOCKS set varmargin=DailyVar_AppMargin 
									from Trans_DailyVar,
														(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
														From Trans_DailyVar,#MARGINSTOCKS
														where DailyVar_Date<=@varmargindate 
														and DailyVar_ProductSeriesID=productid
														Group By DailyVar_ProductSeriesID) as KK

									where DailyVar_ProductSeriesID=productid
									and DailyVar_Date=Date
									and DailyVar_ProductSeriesID=PrdId and PrdId=productid
									
						end

					update #MARGINSTOCKS set Stocksresult=((Quantity*isnull(closeprice,0))*(100-isnull(varmargin,0))/100)

					update #Result set holdbackstocks=Stocksresult from 
					(select sum(isnull(Stocksresult,0.0)) as Stocksresult,Clientid,segment from	#MARGINSTOCKS 	
					 group by segment,Clientid) as tab
					where Clientid=cnt_internalId
					and segment=segmentid
		----------------------------------------------********Holdback Stocks END**********-------------------------------------



		----------------------------------------------------------------CALCULATION FOR Pndg.Sales and Pndg.Pur
		---------------------************SETTELMENTNO AND SETTLEMENTTYPE FETCH
						select * into #TEMPSETT from
						(select distinct Settlements_Number,Settlements_TypeSuffix
						from Master_Settlements
						where Settlements_ExchangeSegmentID in(1,2,4)
						and Settlements_StartDateTime<=@Tradedate
						and Settlements_FundsPayin>=@Tradedate)as TAB


		---------------------------------FETCH PENDING SALE AND RECEIVE FROM DEMAT POSITION TABLE
						select * into #dematposition from 
						(select DematPosition_QtyToReceive,DematPosition_QtyToDeliver,
						DematPosition_CustomerID,DematPosition_ProductSeriesID,segmentid,
						DematPosition_SettlementNumber as SettlementsNumber,
						DematPosition_SettlementType as SettlementsType

						from Trans_DematPosition,#TEMPSETT,#Result 
						where DematPosition_SettlementNumber=Settlements_Number
						and DematPosition_SettlementType=Settlements_TypeSuffix
						and DematPosition_Segmentid=segmentid
						and DematPosition_companyid=@Companyid
						and DematPosition_finyear=@Finyear
						and DematPosition_CustomerID=cnt_internalid) as TAB


		-------------------------------FETCH QUANTITY FROM DEMAT TRANSACTION
						insert into #DematTransactionsT(quantityT,customeridT,productidT,segT)
						select DematTransactions_Quantity,DematTransactions_CustomerID,DematTransactions_ProductSeriesID,segmentid
						from Trans_DematTransactions,#TEMPSETT,#Result 
						where DematTransactions_SettlementNumberT=Settlements_Number
						and DematTransactions_SettlementTypeT=Settlements_TypeSuffix
						and DematTransactions_segmentid=segmentid
						and DematTransactions_Date<=@Tradedate
						and DematTransactions_companyid=@Companyid
						and DematTransactions_finyear=@Finyear
						and DematTransactions_CustomerID=cnt_internalid


						insert into #DematTransactionsS(quantityS,customeridS,productidS,segS) 
						select DematTransactions_Quantity,DematTransactions_CustomerID,DematTransactions_ProductSeriesID,segmentid
						from Trans_DematTransactions,#TEMPSETT,#Result 
						where DematTransactions_SettlementNumberS=Settlements_Number
						and DematTransactions_SettlementTypeS=Settlements_TypeSuffix
						and DematTransactions_segmentid=segmentid
						and DematTransactions_Date<=@Tradedate
						and DematTransactions_companyid=@Companyid
						and DematTransactions_finyear=@Finyear
						and cnt_internalid=DematTransactions_CustomerID

		--select * from #DematTransactionsS

		------------------************Pnd. sale
						insert into #Pndg (Quantity,customer,Segment,productid)
						select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
						case when DematPosition_CustomerID is null then customeridT else DematPosition_CustomerID end as customer,
						case when segmentid is null then segT else segmentid end as Segment,
						case when DematPosition_ProductSeriesID is  null then  productidT else DematPosition_ProductSeriesID end as productid


						from
						(select sum(isnull(DematPosition_QtyToReceive,0.0)) as SumQtyToReceive,
						DematPosition_CustomerID,segmentid,
						DematPosition_ProductSeriesID from #dematposition
						where DematPosition_QtyToReceive>0
						group by segmentid,DematPosition_CustomerID,DematPosition_ProductSeriesID) as TAB1

						left outer join

						(select sum(isnull(quantityT,0.0)) as Sum_Quantity,
						customeridT,segT,productidT from #DematTransactionsT
						group by segT,customeridT,productidT) as TAB2

						on(DematPosition_CustomerID=customeridT and segmentid=segT and DematPosition_ProductSeriesID=productidT)


		-------------------------------FECT NETVALUE FROM TRANS_CUSTOMERTRADES
		--				update #Pndg set netvalue=netvaluere,qty=UnitPriceQuantity from
		--				(select customertrades_customerid,
		--				sum(isnull(customertrades_netvalue,0.0)) as netvaluere,
		--				sum(isnull(CustomerTrades_UnitPriceQuantity,0.0)) as UnitPriceQuantity,
		--				customertrades_productseriesid,customertrades_exchangesegment
		--
		--				from trans_customertrades,#dematposition
		--				where customertrades_productseriesid=DematPosition_ProductSeriesID
		--				and CustomerTrades_SettlementNumber=SettlementsNumber
		--				and CustomerTrades_SettlementType=SettlementsType
		--				and isnull(CustomerTrades_UnitPriceQuantity,0.0)>0
		--				and customertrades_brokeragetype='D'
		--				and customertrades_customerid=DematPosition_CustomerID
		--				and customertrades_exchangesegment=segmentid
		--				and customertrades_companyid=@CompanyID
		--				group by customertrades_exchangesegment,customertrades_customerid,customertrades_productseriesid)as tab
		--
		--				where customer=customertrades_customerid
		--				and productid=customertrades_productseriesid
		--				and Segment=customertrades_exchangesegment


		-------------------------HAIRCUT FETCH
						update #Pndg set qty=DailyStat_Close
						from Trans_DailyStatistics,
													(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
													From Trans_DailyStatistics,#Pndg
													where DailyStat_DateTime<=@closepricedate and DailyStat_ProductSeriesID=productid
													Group By DailyStat_ProductSeriesID) as KK

						where DailyStat_ProductSeriesID=productid
						and DailyStat_DateTime=Date
						and DailyStat_ProductSeriesID=PrdId and PrdId=productid

						if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
									if(@rolname='Yes')
										 begin
												update #Pndg set haircut=
												case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end 
												from Trans_DailyVar,
																(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
																From Trans_DailyVar,#Pndg
																where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
																Group By DailyVar_ProductSeriesID) as KK

												where DailyVar_ProductSeriesID=productid
												and DailyVar_Date=Date
												and DailyVar_ProductSeriesID=PrdId and PrdId=productid
										 end


						end
					else
						begin
									if(@rolname='Yes')
										 begin
												update #Pndg set haircut=DailyVar_AppMargin  
												from Trans_DailyVar,
																(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
																From Trans_DailyVar,#Pndg
																where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
																Group By DailyVar_ProductSeriesID) as KK

												where DailyVar_ProductSeriesID=productid
												and DailyVar_Date=Date
												and DailyVar_ProductSeriesID=PrdId and PrdId=productid
										 end

						end

					if(@rolname='Yes')
						begin
								update #Result set pndsale=result from
								(select sum(result) as result,customer,Segment from
				--				(select (((isnull(netvalue,0.0)/isnull(qty,1))*isnull(Quantity,0.0))*(100+haircut)/100) as result,
								(select (((isnull(qty,1))*isnull(Quantity,0.0))*(100+haircut)/100) as result,
								customer,productid,Segment from #Pndg ) as TAB1
								group by customer,Segment) as TAB
								where cnt_internalid=customer
								and segmentid=Segment
						end
				   else
						begin
								update #Result set pndsale=result from
								(select sum(result) as result,customer,Segment from
				--				(select (((isnull(netvalue,0.0)/isnull(qty,1))*isnull(Quantity,0.0))*(100+haircut)/100) as result,
								(select ((isnull(qty,1))*isnull(Quantity,0.0)) as result,
								customer,productid,Segment from #Pndg ) as TAB1
								group by customer,Segment) as TAB
								where cnt_internalid=customer
								and segmentid=Segment
						end

		------------------************Pnd. Sale END****************---------------------------------------------------------
		--select * from #Pndg
		if (@PndngPurchase='false')
		Begin
				
		delete from  #Pndg
		------------------************Pndg.Pur
						insert into #Pndg (Quantity,customer,Segment,productid)
						select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
						case when DematPosition_CustomerID is null then customeridS else DematPosition_CustomerID end as customer,
						case when segmentid is null then segS else segmentid end as Segment,
						case when DematPosition_ProductSeriesID is  null then  productidS else DematPosition_ProductSeriesID end as productid


						from
						(select sum(isnull(DematPosition_QtyToDeliver,0.0)) as SumQtyToReceive,
						DematPosition_CustomerID,segmentid,
						DematPosition_ProductSeriesID from #dematposition
						where DematPosition_QtyToDeliver>0
						group by segmentid,DematPosition_CustomerID,DematPosition_ProductSeriesID) as TAB1

						left outer join

						(select sum(isnull(quantityS,0.0)) as Sum_Quantity,
						customeridS,segS,productidS from #DematTransactionsS
						group by segS,customeridS,productidS) as TAB2

						on(DematPosition_CustomerID=customeridS and segmentid=segS and DematPosition_ProductSeriesID=productidS)



		-------------------------------FECT NETVALUE FROM TRANS_CUSTOMERTRADES
		--				update #Pndg set netvalue=netvaluere,qty=UnitPriceQuantity from
		--				(select customertrades_customerid,
		--				sum(isnull(customertrades_netvalue,0.0)) as netvaluere,
		--				sum(isnull(CustomerTrades_UnitPriceQuantity,0.0)) as UnitPriceQuantity,
		--				customertrades_productseriesid,customertrades_exchangesegment
		--
		--				from trans_customertrades,#dematposition
		--				where customertrades_productseriesid=DematPosition_ProductSeriesID
		--				and CustomerTrades_SettlementNumber=SettlementsNumber
		--				and CustomerTrades_SettlementType=SettlementsType
		--				and isnull(CustomerTrades_UnitPriceQuantity,0.0)<0
		--				and customertrades_brokeragetype='D'
		--				and customertrades_customerid=DematPosition_CustomerID
		--				and customertrades_exchangesegment=segmentid
		--				and customertrades_companyid=@CompanyID
		--				group by customertrades_exchangesegment,customertrades_customerid,customertrades_productseriesid)as tab
		--
		--				where customer=customertrades_customerid
		--				and productid=customertrades_productseriesid
		--				and customertrades_exchangesegment=Segment

		-------------------------HAIRCUT FETCH
						update #Pndg set qty=DailyStat_Close
						from Trans_DailyStatistics,
													(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
													From Trans_DailyStatistics,#Pndg
													where DailyStat_DateTime<=@closepricedate and DailyStat_ProductSeriesID=productid
													Group By DailyStat_ProductSeriesID) as KK

						where DailyStat_ProductSeriesID=productid
						and DailyStat_DateTime=Date
						and DailyStat_ProductSeriesID=PrdId and PrdId=productid


						if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
								if(@rolname='Yes')
								  begin
										update #Pndg set haircut=case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end   
										from Trans_DailyVar,
														(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
														From Trans_DailyVar,#Pndg
														where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
														Group By DailyVar_ProductSeriesID) as KK

										where DailyVar_ProductSeriesID=productid
										and DailyVar_Date=Date
										and DailyVar_ProductSeriesID=PrdId and PrdId=productid
								  end

						end
					else
						begin
								if(@rolname='Yes')
								  begin
										update #Pndg set haircut=DailyVar_AppMargin  
										from Trans_DailyVar,
														(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
														From Trans_DailyVar,#Pndg
														where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
														Group By DailyVar_ProductSeriesID) as KK

										where DailyVar_ProductSeriesID=productid
										and DailyVar_Date=Date
										and DailyVar_ProductSeriesID=PrdId and PrdId=productid
								  end

						end

						if(@rolname='Yes')
							 begin
									update #Result set pndpur=result from
									(select sum(result) as result,customer,Segment from
					--				(select (((isnull(netvalue,0.0)/isnull(qty,1))*isnull(Quantity,0.0))*(100-haircut)/100) as result,
									(select (((isnull(qty,1))*isnull(Quantity,0.0))*(100-haircut)/100) as result,
									customer,productid,Segment from #Pndg ) as TAB1
									group by customer,Segment) as TAB
									where cnt_internalid=customer
									and segmentid=Segment
							end
						else
							begin
									update #Result set pndpur=result from
									(select sum(result) as result,customer,Segment from
					--				(select (((isnull(netvalue,0.0)/isnull(qty,1))*isnull(Quantity,0.0))*(100-haircut)/100) as result,
									(select ((isnull(qty,1))*isnull(Quantity,0.0)) as result,
									customer,productid,Segment from #Pndg ) as TAB1
									group by customer,Segment) as TAB
									where cnt_internalid=customer
									and segmentid=Segment
							end

		--				select * from #Result

		
		End
		--------------------------------------------DP HOLDING(CDSL)---------------------------------------------
						create table #TEMOHOLDING_CDSL1 (client varchar(50),benaccno varchar(30),
						startTime varchar(30),endTime varchar(30))

						insert into #TEMOHOLDING_CDSL1(client,benaccno) 
						select dpd_cntid,dpd_clientid 
						from tbl_master_contactdpdetails,tbl_master_companyexchange,#TEMP1
						where dpd_dpcode=exch_tmcode
						and dpd_cntid=clinetid
						and exch_compid=@CompanyID

						--------Start Date ANd End Date Fetch
						update #TEMOHOLDING_CDSL1 set startTime=startTime_tab,endTime=endTime_tab from
						(select
						(select top 1 convert(varchar(30),CdslHolding_holdingdatetime,101)  from trans_cdslholding 
						order by CdslHolding_holdingdatetime desc) as startTime_tab,
						((select top 1 convert(varchar(30),CdslHolding_holdingdatetime,101)  from trans_cdslholding 
								order by CdslHolding_holdingdatetime desc) + ' 23:59:59') as endTime_tab) as tab

						--------ALL Record  Fetch
						insert into #TEMOHOLDING_CDSL(client,benaccno,ISINNo,Free)
						select client,CdslHolding_BenAccountNumber,CdslHolding_ISIN,CdslHolding_FreeBalance
						from trans_cdslholding,#TEMOHOLDING_CDSL1,
						(select max(CdslHolding_HoldingDateTime) as HoldingDateTime from 
						Trans_CdslHolding,#TEMOHOLDING_CDSL1 
						where CdslHolding_BenAccountNumber=benaccno
						and CdslHolding_holdingdatetime between startTime and endTime)as tb
						where CdslHolding_BenAccountNumber=benaccno
						and CdslHolding_holdingdatetime=HoldingDateTime

						-----------Product Id Fetch
						update #TEMOHOLDING_CDSL Set ProductId=ISIN_ProductSeriesID From 
						master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
						and equity_SeriesId=ISIN_ProductSeriesID and equity_exchsegmentid=1

						update #TEMOHOLDING_CDSL Set ProductId=ISIN_ProductSeriesID From 
						master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
						and equity_SeriesId=ISIN_ProductSeriesID and ProductId is null

						----------Close Price Fetch
						update #TEMOHOLDING_CDSL set closeprice=DailyStat_Close
						from Trans_DailyStatistics,
													(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
													From Trans_DailyStatistics,#TEMOHOLDING_CDSL
													where DailyStat_DateTime<=@closepricedate 
													and DailyStat_ProductSeriesID=ProductId
													Group By DailyStat_ProductSeriesID) as KK

						where DailyStat_ProductSeriesID=ProductId
						and DailyStat_DateTime=Date
						and DailyStat_ProductSeriesID=PrdId and PrdId=ProductId

			if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
							update #TEMOHOLDING_CDSL set haircut=
							case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end 
							from Trans_DailyVar,
											(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
											From Trans_DailyVar,#TEMOHOLDING_CDSL
											where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
											Group By DailyVar_ProductSeriesID) as KK

							where DailyVar_ProductSeriesID=productid
							and DailyVar_Date=Date
							and DailyVar_ProductSeriesID=PrdId and PrdId=productid


						end
					else
						begin
							
							update #TEMOHOLDING_CDSL set haircut=DailyVar_AppMargin
							from Trans_DailyVar,
											(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
											From Trans_DailyVar,#TEMOHOLDING_CDSL
											where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
											Group By DailyVar_ProductSeriesID) as KK

							where DailyVar_ProductSeriesID=productid
							and DailyVar_Date=Date
							and DailyVar_ProductSeriesID=PrdId and PrdId=productid

						end
												
						update #TEMOHOLDING_CDSL set ISINValue=((Free*isnull(closeprice,0))*(100-isnull(haircut,0))/100)

						update #Result set dpcdsl=ISINValue from
						(select sum(isnull(ISINValue,0)) as ISINValue,client from #TEMOHOLDING_CDSL group by client) as tb
						where cnt_internalId=client
		--------------------------------------------DP HOLDING(NSDL)---------------------------------------------
					declare @clientbenno1 table(client varchar(50),benaccno varchar(50))
					insert into @clientbenno1(client,benaccno) 
					select dpd_cntid,dpd_clientid 
					from tbl_master_contactdpdetails,tbl_master_companyexchange,#TEMP1
					where dpd_dpcode=exch_tmcode and dpd_cntid=clinetid and exch_compid=@CompanyID 
					and dpd_accounttype='Default'


					--------ALL Record  Fetch
					insert into #TEMOHOLDING_NSDL(ISINNo,Free,benaccno,client)
					select NsdlHolding_ISIN,
					sum(isnull(NsdlHolding_Free,0)) as NsdlHolding_Free,
					NsdlHolding_BenAccountNumber,client
					from trans_nsdlholding,@clientbenno1
					where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)=
					(select max(cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)) 
					from trans_nsdlholding,@clientbenno1
					where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)<=
					cast(DATEADD(dd, 0, DATEDIFF(dd, 0,@Tradedate)) as datetime)
					and benaccno=NsdlHolding_BenAccountNumber)
					and benaccno=NsdlHolding_BenAccountNumber
					and NsdlHolding_BenCategory = 3
					and NsdlHolding_BenAccountType = 20
					and benaccno=NsdlHolding_BenAccountNumber
					group by NsdlHolding_BenAccountNumber,NsdlHolding_ISIN,client

					--------ALL Record  Fetch
					insert into #TEMOHOLDING_NSDL(ISINNo,Free,benaccno,client)
					select NsdlHolding_ISIN,
					sum(isnull(NsdlHolding_Free,0)) as NsdlHolding_Free,
					NsdlHolding_BenAccountNumber,client
					from trans_nsdlholding,@clientbenno1
					where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)=
					(select max(cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)) 
					from trans_nsdlholding,@clientbenno1
					where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)<=
					cast(DATEADD(dd, 0, DATEDIFF(dd, 0,@Tradedate)) as datetime)
					and benaccno=NsdlHolding_BenAccountNumber)
					and benaccno=NsdlHolding_BenAccountNumber
					and NsdlHolding_BenCategory <> 3
					and NsdlHolding_BenAccountType <> 20
					and benaccno=NsdlHolding_BenAccountNumber
					group by NsdlHolding_BenAccountNumber,NsdlHolding_ISIN,client

						-----------Product Id Fetch
						update #TEMOHOLDING_NSDL Set ProductId=ISIN_ProductSeriesID From 
						master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
						and equity_SeriesId=ISIN_ProductSeriesID and equity_exchsegmentid=1

						update #TEMOHOLDING_NSDL Set ProductId=ISIN_ProductSeriesID From 
						master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
						and equity_SeriesId=ISIN_ProductSeriesID and ProductId is null

						----------Close Price Fetch
						update #TEMOHOLDING_NSDL set closeprice=DailyStat_Close
						from Trans_DailyStatistics,
													(select max(DailyStat_DateTime) as Date,DailyStat_ProductSeriesID as PrdId
													From Trans_DailyStatistics,#TEMOHOLDING_NSDL
													where DailyStat_DateTime<=@closepricedate 
													and DailyStat_ProductSeriesID=ProductId
													Group By DailyStat_ProductSeriesID) as KK

						where DailyStat_ProductSeriesID=ProductId
						and DailyStat_DateTime=Date
						and DailyStat_ProductSeriesID=PrdId and PrdId=ProductId

					-------------HairCut Fetch
					if(@chkunapproved='YES' and @unapprovedshares<>0.0)----------UNAPPROVED SHARES
						begin
								update #TEMOHOLDING_NSDL set haircut=
								case when DailyVar_AppMargin=100 then @unapprovedshares else DailyVar_AppMargin end 
								from Trans_DailyVar,
												(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
												From Trans_DailyVar,#TEMOHOLDING_NSDL
												where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
												Group By DailyVar_ProductSeriesID) as KK

								where DailyVar_ProductSeriesID=productid
								and DailyVar_Date=Date
								and DailyVar_ProductSeriesID=PrdId and PrdId=productid

						end
					else
						begin
								update #TEMOHOLDING_NSDL set haircut=DailyVar_AppMargin
								from Trans_DailyVar,
												(select max(DailyVar_Date) as Date,DailyVar_ProductSeriesID as PrdId
												From Trans_DailyVar,#TEMOHOLDING_NSDL
												where DailyVar_Date<=@varmargindate and DailyVar_ProductSeriesID=productid
												Group By DailyVar_ProductSeriesID) as KK

								where DailyVar_ProductSeriesID=productid
								and DailyVar_Date=Date
								and DailyVar_ProductSeriesID=PrdId and PrdId=productid

						end

					update #TEMOHOLDING_NSDL set ISINValue=((Free*isnull(closeprice,0))*(100-isnull(haircut,0))/100)

					-------------Main Table Update
					update #Result set dpnsdl=ISINValue from
						(select sum(isnull(ISINValue,0)) as ISINValue,client from #TEMOHOLDING_NSDL group by client) as tb
						where cnt_internalId=client
		--------------------------------------------------------AGE DISPLAY-----------------------------------------------
					if(@chkrmslimtaging='YES')
						BEGIN
								create table #CLIENTDISTINCT(client varchar(50),segment varchar(10),id int identity(1,1))
								create table #accountsledger(SubAccountID varchar(50),ExchangeSegmentID varchar(10),
															 BALN numeric(28,2),TransactionDate varchar(50))
								create table #RESULTDATE(DATE varchar(50),DATEID int identity(1,1))

								insert into #CLIENTDISTINCT
								select distinct cnt_internalid,segmentid from #Result where isnull(tradeaccount,0)<0
								order by cnt_internalid,segmentid

								Declare @FAXID int,@FINID int
								Declare @clientid varchar(50),@seg1 varchar(10)

								Declare @SUBFAXID int,@SUBFINID int
								Declare @SUBdate varchar(50),@RESULT NUMERIC(28,6)
								Declare @VARDATE varchar(50)

								select @FAXID=max(id) from #CLIENTDISTINCT
								select @FINID=min(id) from #CLIENTDISTINCT

								;with dates ( date )
									as
									(
									select DATEADD(DD, -(@age-1), CAST(@Tradedate AS datetime))
									union all
									select dateadd(d,1,date)
									from dates
									where date < @Tradedate
									)
							
							INSERT into #RESULTDATE(DATE)
							select date from dates
								


							set @clientid=''

							while @FAXID>=@FINID
							begin
									set @clientid=''

									select @clientid=client,@seg1=segment from #CLIENTDISTINCT where id=@FINID

									select @SUBFAXID=max(DATEID) from #RESULTDATE
									select @SUBFINID=min(DATEID) from #RESULTDATE
									set @SUBdate=NULL
									while @SUBFAXID>=@SUBFINID
										begin
											set @SUBdate=NULL

											SELECT @SUBdate=DATE from #RESULTDATE where DATEID=@SUBFINID
											
											select @SQL='
											select '''+@clientid+''','''+@seg1+''',closing,'''+@SUBdate+''' from 
											(select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing,
											AccountsLedger_SubAccountID as closingclinet,
											AccountsLedger_ExchangeSegmentID as closingSegment
											from trans_accountsledger where
											accountsledger_mainaccountid=''SYSTM00001''
											AND AccountsLedger_SubAccountID='''+@clientid+''''
											If([dbo].[fn_GetFinYear](cast(@SUBdate as datetime))<>@Finyear)
											Begin
													select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))
													in ('''+@Finyear+''','''+@NextFinYear+''')'
											End
											Else
											Begin
													select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+''''
											End
											select @SQL=@SQL+'
											and AccountsLedger_TransactionDate<='''+@SUBdate+'''
											and AccountsLedger_ExchangeSegmentID='''+@seg1+'''
											and AccountsLedger_CompanyID='''+@Companyid+'''
											group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tbclosing'
											insert into #accountsledger(SubAccountID,ExchangeSegmentID,BALN,TransactionDate) exec(@SQL)

											if exists(SELECT 'Y' FROM #accountsledger WHERE ABS(ISNULL(BALN,0))<@amountto AND BALN IS NOT NULL)
												begin
														DELETE FROM #accountsledger
														break;
												end
											if exists(SELECT 'Y' FROM #accountsledger WHERE ISNULL(BALN,0)>0)
												begin
														DELETE FROM #accountsledger
														break;
												end
											 
											select @SUBFINID=@SUBFINID+1
										end

										if exists(SELECT 'Y' FROM #accountsledger WHERE ABS(ISNULL(BALN,0))>@amountto AND BALN IS NOT NULL)
												begin
													
													update #Result set net=@capitaltorms where cnt_internalid=@clientid and segmentid=@seg1
												END
										
									
									DELETE FROM #accountsledger
									select @FINID=@FINID+1
								end

								DROP TABLE #RESULTDATE
								Drop Table #CLIENTDISTINCT
								Drop Table #accountsledger
						End
						
					
		--
		--SELECT * FROM #Result
		-------------------------------------------------------AGE DISPLAY END---------------------------------------------
				if @chkrmslimtaging='YES'
						begin
								select @SQL='update #Result set tradeaccount=closing from
								(select closing,closingclinet,closingSegment from 
								(select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing,
								AccountsLedger_SubAccountID as closingclinet,
								AccountsLedger_ExchangeSegmentID as closingSegment
								from trans_accountsledger,#Result where
								accountsledger_mainaccountid=''SYSTM00001''
								and AccountsLedger_SubAccountID=cnt_internalId '
								If([dbo].[fn_GetFinYear](cast(@SYSTM1date as datetime))<>@Finyear)
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))
										in ('''+@Finyear+''','''+@NextFinYear+''')'
								End
								Else
								Begin
										select @SQL=@SQL+' AND ltrim(rtrim(AccountsLedger_FinYear))='''+@Finyear+''''
								End
								select @SQL=@SQL+'
								and AccountsLedger_TransactionDate<='''+@SYSTM1date+'''
								and AccountsLedger_ExchangeSegmentID=segmentid
								and AccountsLedger_CompanyID='''+@Companyid+'''
								group by AccountsLedger_ExchangeSegmentID,AccountsLedger_SubAccountID) as tbclosing) as tab
								where cnt_internalId=closingclinet
								and segmentid=closingSegment
								and net is null'
								exec(@SQL)
						end


						----------------------*********NET
				if(@unclearban='NA')----------------------UNCLEAR BALN. Not ALLOWED
					begin
							if(@unclearbandays='0')
								begin
										update #Result set net=(isnull(tradeaccount,0)+
										isnull(margindep,0)+
										isnull(marginstocks,0)+
										isnull(holdbackstocks,0)+
										isnull(pndpur,0)-
										isnull(pndsale,0))
										where net is null
								end
							else
								begin
										update #Result set net=(isnull(tradeaccount,0)+
										isnull(margindep,0)-
										isnull(unclearbal,0)+
										isnull(marginstocks,0)+
										isnull(holdbackstocks,0)+
										isnull(pndpur,0)-
										abs(isnull(pndsale,0)))
										where net is null
								end
							
					end
				else
					begin
										update #Result set net=(isnull(tradeaccount,0)+
										isnull(margindep,0)-
										isnull(unclearbal,0)+
										isnull(marginstocks,0)+
										isnull(holdbackstocks,0)+
										isnull(pndpur,0)-
										abs(isnull(pndsale,0)))
										where net is null
					end
			
		-----------------------------FOR POA CLIENT
			
						if not exists(select 'Y' from #TEMP1 where segment='FO')
							begin
								if(@POAORNOT='POACLIENT')
									begin
											IF(@chkrmslimtaging='YES')
												BEGIN
														update #Result set net=isnull(net,0)+isnull(dpnsdl,0)+isnull(dpcdsl,0) 
														where POA=1 and net<>@capitaltorms
												END
											ELSE 
												BEGIN
														update #Result set net=isnull(net,0)+isnull(dpnsdl,0)+isnull(dpcdsl,0) 
														where POA=1
												END
									end
								else if(@POAORNOT='ALLCLIENT')
									begin
											
											update #Result set net=isnull(net,0)+isnull(dpnsdl,0)+isnull(dpcdsl,0) 
																	
									end
							end
									


						update #TEMP1 set colateralvalue=net from
						(select sum(net)as net,cnt_internalid  from #Result group by cnt_internalid)as tab
						where cnt_internalid=clinetid

						if not exists(select 'Y' from #TEMP1 where segment='FO')
							BEGIN
								if((Select isnull(COUNT(fullname),0) from #FinalTable1)=0)
								Begin
									Insert into #FinalTable1
									select case when POA=1 then (Ltrim(Rtrim(fullname))+'['+Ltrim(Rtrim(ucc_tcode))+']'+'[POA CLIENT]') else (fullname+'['+ucc_tcode+']') end as fullname,
									cast(round(tradeaccount,0) as varchar) as tradeaccount,
									cast(margindep as varchar) as margindep,
									cast(unclearbal as varchar) as unclearbal,
									cast(marginstocks as varchar) as marginstocks,
									cast(holdbackstocks as varchar) as holdbackstocks,
									case when (isnull(pndpur,0)-abs(isnull(pndsale,0)))=0.0 then null 
										else cast((isnull(pndpur,0)-abs(isnull(pndsale,0))) as varchar) end as pndg,
									case when (isnull(dpnsdl,0)+isnull(dpcdsl,0))=0.0 then null 
										else cast((isnull(dpnsdl,0)+isnull(dpcdsl,0)) as varchar) end as dp,
									case when net=0.0 then null 
										when net<0 then cast(1  as varchar)
										else cast(abs(net) as varchar) end as net
									from #Result,#TEMP1
									where clinetid=cnt_internalid and net<>0.0
								End
								Else
								Begin
									Update #FinalTable1
									Set 
									#FinalTable1.tradeaccount=isnull(#FinalTable1.tradeaccount,0.00)+isnull(T2.tradeaccount,0.00),
									#FinalTable1.margindep=isnull(#FinalTable1.margindep,0.00)+isnull(T2.margindep,0.00),
									#FinalTable1.unclearbal=isnull(#FinalTable1.unclearbal,0.00)+isnull(T2.unclearbal,0.00),
									#FinalTable1.marginstocks=isnull(#FinalTable1.marginstocks,0.00)+isnull(T2.marginstocks,0.00),
									#FinalTable1.holdbackstocks=isnull(#FinalTable1.holdbackstocks,0.00)+isnull(T2.holdbackstocks,0.00),
									#FinalTable1.Pndg=isnull(#FinalTable1.Pndg,0.00)+isnull(T2.pndg,0.00),
									#FinalTable1.dp=isnull(#FinalTable1.dp,0.00)+isnull(T2.dp,0.00),
									#FinalTable1.net=isnull(#FinalTable1.net,0.00)+isnull(T2.net,0.00)
									From
									(Select case when POA=1 then (Ltrim(Rtrim(fullname))+'['+Ltrim(Rtrim(ucc_tcode))+']'+'[POA CLIENT]') else (fullname+'['+ucc_tcode+']') end as fullname,
									cast(round(tradeaccount,0) as varchar) as tradeaccount,
									cast(margindep as varchar) as margindep,
									cast(unclearbal as varchar) as unclearbal,
									cast(marginstocks as varchar) as marginstocks,
									cast(holdbackstocks as varchar) as holdbackstocks,
									case when (isnull(pndpur,0)-abs(isnull(pndsale,0)))=0.0 then null 
										else cast((isnull(pndpur,0)-abs(isnull(pndsale,0))) as varchar) end as pndg,
									case when (isnull(dpnsdl,0)+isnull(dpcdsl,0))=0.0 then null 
										else cast((isnull(dpnsdl,0)+isnull(dpcdsl,0)) as varchar) end as dp,
									case when net=0.0 then null 
										when net<0 then cast(1  as varchar)
										else cast(abs(net) as varchar) end as net
									from #Result,#TEMP1
									where clinetid=cnt_internalid and net<>0.0) T2
									Where #FinalTable1.fullname=T2.fullname
								End
							End
							ELSE
							BEGIN
								if((Select isnull(COUNT(fullname),0) from #FinalTable1)=0)
								Begin
									Insert into #FinalTable1
									select case when POA=1 then (Ltrim(Rtrim(fullname))+'['+Ltrim(Rtrim(ucc_tcode))+']'+'[POA CLIENT]') else (fullname+'['+ucc_tcode+']') end as fullname,
									cast(round(tradeaccount,0) as varchar) as tradeaccount,
									cast(margindep as varchar) as margindep,
									cast(unclearbal as varchar) as unclearbal,
									cast(marginstocks as varchar) as marginstocks,
									cast(holdbackstocks as varchar) as holdbackstocks,
									case when (isnull(pndpur,0)-abs(isnull(pndsale,0)))=0.0 then null 
										else cast((isnull(pndpur,0)-abs(isnull(pndsale,0))) as varchar) end as pndg,
									null as dp,
									case when net=0.0 then null 
										when net<0 then cast(1  as varchar)
										else cast(abs(net) as varchar) end as net
									from #Result,#TEMP1
									where clinetid=cnt_internalid and net<>0.0
								End
								Else
								Begin
									Update #FinalTable1
									Set 
									#FinalTable1.tradeaccount=isnull(#FinalTable1.tradeaccount,0.00)+isnull(T2.tradeaccount,0.00),
									#FinalTable1.margindep=isnull(#FinalTable1.margindep,0.00)+isnull(T2.margindep,0.00),
									#FinalTable1.unclearbal=isnull(#FinalTable1.unclearbal,0.00)+isnull(T2.unclearbal,0.00),
									#FinalTable1.marginstocks=isnull(#FinalTable1.marginstocks,0.00)+isnull(T2.marginstocks,0.00),
									#FinalTable1.holdbackstocks=isnull(#FinalTable1.holdbackstocks,0.00)+isnull(T2.holdbackstocks,0.00),
									#FinalTable1.Pndg=isnull(#FinalTable1.Pndg,0.00)+isnull(T2.pndg,0.00),
									#FinalTable1.dp=isnull(#FinalTable1.dp,0.00)+isnull(T2.dp,0.00),
									#FinalTable1.net=isnull(#FinalTable1.net,0.00)+isnull(T2.net,0.00)
									From
									(Select case when POA=1 then (Ltrim(Rtrim(fullname))+'['+Ltrim(Rtrim(ucc_tcode))+']'+'[POA CLIENT]') else (fullname+'['+ucc_tcode+']') end as fullname,
									cast(round(tradeaccount,0) as varchar) as tradeaccount,
									cast(margindep as varchar) as margindep,
									cast(unclearbal as varchar) as unclearbal,
									cast(marginstocks as varchar) as marginstocks,
									cast(holdbackstocks as varchar) as holdbackstocks,
									case when (isnull(pndpur,0)-abs(isnull(pndsale,0)))=0.0 then null 
										else cast((isnull(pndpur,0)-abs(isnull(pndsale,0))) as varchar) end as pndg,
									null as dp,
									case when net=0.0 then null 
										when net<0 then cast(1  as varchar)
										else cast(abs(net) as varchar) end as net
									from #Result,#TEMP1
									where clinetid=cnt_internalid and net<>0.0) T2
									Where #FinalTable1.fullname=T2.fullname
								End
							END
							if((Select isnull(COUNT(ucc_tcode),0) from #FinalTable2)=0)
							Begin
								Insert into #FinalTable2
								select ucc_tcode,rtrim(ltrim(exchange)) as exchange,rtrim(ltrim(segment)) as segment,
								case when  @Product='All Products' then null else @Product end as Product,
								case when colateralvalue=0 then 0 when colateralvalue<0 then 1 else round(abs(colateralvalue),0) end as colateralvalue,
								null as exposuelimt,
								null as sellexposurelimit,
								null as buyexposurelimit,
								null as turnoverlimit,
								null as losslimit,
								null as delamount,
								null as financelimit,
								null as sellsecuritylimit,
								null as adhocmargin,
								null as entitylevelmargin,
								case when @category='NA' then NULL else @category end as category,
								'no' as groupwiseidi
				--				null as grosslimit
								from #TEMP1
							End
							Else
							Begin
								Update #FinalTable2
								Set #FinalTable2.colateralvalue=isnull(#FinalTable2.colateralvalue,0.00)+isnull(T2.colateralvalue,0.00)
								from 
								(select ucc_tcode,rtrim(ltrim(exchange)) as exchange,rtrim(ltrim(segment)) as segment,
								case when  @Product='All Products' then null else @Product end as Product,
								case when colateralvalue=0 then 0 when colateralvalue<0 then 1 else round(abs(colateralvalue),0) end as colateralvalue,
								null as exposuelimt,
								null as sellexposurelimit,
								null as buyexposurelimit,
								null as turnoverlimit,
								null as losslimit,
								null as delamount,
								null as financelimit,
								null as sellsecuritylimit,
								null as adhocmargin,
								null as entitylevelmargin,
								case when @category='NA' then NULL else @category end as category,
								'no' as groupwiseidi
								from #TEMP1) T2
								Where #FinalTable2.ucc_tcode=T2.ucc_tcode
							End
					set @record=null
					
					
					if(Left(@segmentname1,3)='MCX')
					Begin
						if(@ExportType='TAW|RMS')
							Select @record= MAX(Exportfiles_BatchNumber) from Trans_ExportFiles Where ExportFiles_Type='Exposure' And Left(ExportFiles_Name,3)='AMR'
							and Cast(SubString(Exportfiles_Name,4,8) as DateTime)=(DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))) 
						else
							Select @record= MAX(Exportfiles_BatchNumber) from Trans_ExportFiles Where ExportFiles_Type='Exposure' And Left(ExportFiles_Name,3)='MCX'
							and Cast(SubString(Exportfiles_Name,4,8) as DateTime)=(DATEADD(dd, 0, DATEDIFF(dd, 0, GETDATE()))) 
						
					End
					Else
					Begin
						set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
									[ExportFiles_Segment]=@segment and [ExportFiles_Type]='EXPOSURE'
										and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
											cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
					End
						if(@record is null)
								begin
									set @record='01'
								end
						else 
								begin
									set @record=@record+1
									if (@record<=9)
										begin
											set @record='0'+@record
										end
									if(@record>9 and @record<=99)
										begin
											set @record=@record
										end
								end
						
						
						--Select @Segment_Mincount,* from #FinalTable1
						  
						--Regain Resources
						Set @Segment_Mincount=@Segment_Mincount+1
						
		 				
						Delete From #Result
						Delete From #TEMP1
						Delete From #DematTransactionsS
						Delete From #DematTransactionsT
						Delete From #MARGINSTOCKS
						Delete From #Pndg
						Delete From #TEMOHOLDING_NSDL
						Delete From #TEMOHOLDING_CDSL
						Drop Table #TEMPSETT
						Drop Table #dematposition
						Drop Table #TEMOHOLDING_CDSL1
						Drop Table #ABC
						Drop Table #t
						
						
			End
			
			---Display To Export
			
			set @seg=''
			Select * from #FinalTable1
			
			if((Select COUNT(*) from #DistinctSegment)>1)
			Begin
				update #FinalTable2
				Set segment=null,
				exchange=null
			End
			Else
				set @seg=(select top 1 dbo.fnSplit(segmentname,'-', 2)  from #Segment where segmentid=@segment)+'_'
			
			if(@ExportType='3' Or @ExportType='TAW|RMS')
			Begin
				Select * from #FinalTable2
				if(Left(@segmentname1,3)='MCX')
				Begin
					Declare @FormattedDate Varchar(8)
					Select @FormattedDate=Left(replace(convert(varchar, getdate(), 120),'-',''),8)
					Select 'AMR'+@FormattedDate+'_'+@record as filename,@record as BatchNumber,
					@FormattedDate Date,(Select COUNT(*) from #FinalTable2) TotalNoOFRecord
				End
				else
					select 'NOW_RMSLIMIT_'+@seg+@record as filename,@record as record,
					REPLACE(CONVERT(VARCHAR(10),getdate() , 103), '/', '') as date

				select @segmentname1 as segmentname
			End
			Else if(@ExportType='TAW|POS')
			Begin
				Declare @TotalCount int
				Select ucc_tcode,identifier,TickerSymbol,ExpiryDate,StrikePrice,TickerSeries,BuyQty,SellQty,
				Case When BuyQty>0 Then  Cast(Cast(isnull(BuyUnitPriceQty*ComDailyStat_SettlementPrice,0.0) as Numeric(24,2)) as Varchar(30))  Else '0' End BuyAmt,
				Case When SellQty>0 Then  Cast(Cast(isnull(SellUnitPriceQty*ComDailyStat_SettlementPrice,0.0) as Numeric(24,2)) as Varchar(30))  Else '0' End SellAmt
				From
				(select 
				ltrim(rtrim(crg_Tcode)) ucc_tcode,
				ltrim(rtrim(Commodity_Identifier)) identifier,
				ltrim(rtrim(Commodity_TickerSymbol))as TickerSymbol,
				Left(Convert(Varchar,Commodity_EffectiveDate,120),10) ExpiryDate,
				Left(Convert(Varchar,Commodity_StrikePrice,120),10) StrikePrice,
				Ltrim(Rtrim(Commodity_TickerSeries)) TickerSeries,
				Case When QuantityRESULT <0 Then ABS(Cast(QuantityRESULT as int)) Else 0 End BuyQty,
				Case When QuantityRESULT >0 Then ABS(Cast(QuantityRESULT as int)) Else 0 End SellQty,
				Case When UnitPriceQtyRESULT <0 Then ABS(Cast(UnitPriceQtyRESULT as int)) Else 0 End BuyUnitPriceQty,
				Case When UnitPriceQtyRESULT >0 Then ABS(Cast(UnitPriceQtyRESULT as int)) Else 0 End SellUnitPriceQty,
				ProductSeriesID
				from Master_Commodity,tbl_Master_Contact,tbl_Master_ContactExchange,
				(select distinct case when Minus_ProductSeriesID is null then Positive_ProductSeriesID else Minus_ProductSeriesID end as ProductSeriesID,
				case when Positive_CustomerID is null then Minus_CustomerID else Positive_CustomerID end as CustomerID,
				isnull(Positive_Quantity,0.0)-isnull(Minus_Quantity,0.0) as QuantityRESULT,
				isnull(Positive_UnitPriceQty,0.0)-isnull(Minus_UnitPriceQty,0.0) as UnitPriceQtyRESULT
				from 
				(Select sum(abs(isnull(Minus_Quantity,0.0))) as Minus_Quantity,sum(abs(isnull(Minus_UnitPriceQty,0.0))) as Minus_UnitPriceQty,
				Minus_ProductSeriesID,Minus_CustomerID
				from 
				(Select 
				ComCustomerTrades_QuantityLots as Minus_Quantity,
				ComCustomerTrades_ProductSeriesID as Minus_ProductSeriesID,
				ComCustomerTrades_CustomerID as  Minus_CustomerID,
				ComCustomerTrades_UnitPriceQuantity as Minus_UnitPriceQty
				from Trans_ComCustomerTrades where ComCustomerTrades_CompanyID=@Companyid
				and ComCustomerTrades_ExchangeSegment=@POS_SegmentID
				and ComCustomerTrades_TradeDate<=@Tradedate
				and Isnull(ComCustomerTrades_TradeCategory,'XXX') not in ('ARS','ART') and ComCustomerTrades_CustomerID in(Select clinetid from #Temp1_Temp)
				and ComCustomerTrades_QuantityLots<0 ) ComCustomerTrades
				group by Minus_CustomerID,Minus_ProductSeriesID) as Tab_Minus
				full outer join
				(Select sum(abs(isnull(Positive_Quantity,0.0))) as Positive_Quantity,sum(abs(isnull(Positive_UnitPriceQty,0.0))) as Positive_UnitPriceQty,
				Positive_ProductSeriesID,Positive_CustomerID
				from 
				(Select 
				ComCustomerTrades_QuantityLots as Positive_Quantity,
				ComCustomerTrades_ProductSeriesID as Positive_ProductSeriesID,
				ComCustomerTrades_CustomerID as  Positive_CustomerID,
				ComCustomerTrades_UnitPriceQuantity as Positive_UnitPriceQty
				from Trans_ComCustomerTrades where ComCustomerTrades_CompanyID=@Companyid
				and ComCustomerTrades_ExchangeSegment=@POS_SegmentID
				and ComCustomerTrades_TradeDate<=@Tradedate
				and Isnull(ComCustomerTrades_TradeCategory,'XXX') not in ('ARS','ART') and ComCustomerTrades_CustomerID in(Select clinetid from #Temp1_Temp)
				and ComCustomerTrades_QuantityLots>0 ) ComCustomerTrades
				group by Positive_CustomerID,Positive_ProductSeriesID) as Tab_Positive

				on(Minus_ProductSeriesID=Positive_ProductSeriesID and Positive_CustomerID=Minus_CustomerID))as tb where Commodity_ExchangeSegmentID=@POS_ExchangeSegmentID
				and Commodity_ProductSeriesID=ProductSeriesID
				and cnt_Internalid=CustomerID
				and crg_Cntid=CustomerID
				and crg_Exchange='MCX - COMM'
				and crg_company=@Companyid
				and QuantityRESULT<>0.0 
				and Commodity_EffectiveDate>@Tradedate) T
				Left Outer Join
				(Select ComDailyStat_SettlementPrice,ComDailyStat_ProductSeriesID from Trans_ComDailyStat
				Where ComDailyStat_DateTime=(Select MAX(ComdailyStat_DateTime) from Trans_ComDailyStat Where 
				ComDailyStat_DateTime<=@Tradedate)) ComDailyStat
				on ComDailyStat_ProductSeriesID=ProductSeriesID
				Group By ucc_tcode,identifier,TickerSymbol,ExpiryDate,StrikePrice,TickerSeries,BuyQty,SellQty,BuyUnitPriceQty,SellUnitPriceQty,ComDailyStat_SettlementPrice

				
				Select @TotalCount=@@ROWCOUNT

				Declare @POS_FormattedDate Varchar(8)
				Select @POS_FormattedDate=Left(replace(convert(varchar, GETDATE(), 120),'-',''),8)
				Select 'MCX'+@POS_FormattedDate+'_'+@record as filename,@record as BatchNumber,
				@POS_FormattedDate Date,@TotalCount TotalNoOFRecord
				
				select @segmentname1 as segmentname
			
			End

			
			Drop Table #DematTransactionsS
			Drop Table #DematTransactionsT
			Drop Table #MARGINSTOCKS
			Drop Table #Pndg
			Drop Table #TEMOHOLDING_CDSL
			Drop Table #TEMOHOLDING_NSDL
			drop table #Result
			drop table #TEMP1
			Drop Table #FinalTable1
			Drop Table #FinalTable2
			Drop Table #FileDetail
			Drop Table #SegmentName
			Drop Table #DistinctSegment
			Drop Table #Segment
			Drop Table #Result_Temp
			Drop Table #TEMP1_Temp
	End------------------------------------RMS Limit END
ELSE if(@ExportType='4')--------------------------------"Holding With Collateral Quantity"
	BEGIN
			set @SQL=''
			set @segmentselect=''
			create table #Segment1(segmentid varchar(10),segmentname varchar(20))
			create table #CLIENTTEMP(clinetid varchar(50),ucccode varchar(20))
			CREATE TABLE #MARGINSTOCKS1(Clientid varchar(50),Quantity numeric(28,6),
			productid varchar(500),segment varchar(20))

			create table #Pndg1 (Quantity numeric(28,6),productid varchar(50),customer varchar(500),Segment varchar(20),
			netvalue numeric(28,6),qty numeric(28,6),haircut numeric(28,6))

			create table #TEMPTAB(clientfinal varchar(50),product varchar(50),qty numeric(28,0),status varchar(2),
			symbol varchar(50),series varchar(50),haircut numeric(28,0))
			create table #DematTransactionsSS(quantityS numeric(28,6),customeridS varchar(50),productidS varchar(50),segS varchar(50))
			create table #DematTransactionsTT(quantityS numeric(28,6),customeridS varchar(50),productidS varchar(50),segS varchar(50))

			create table #TEMOHOLDING_CDSL11 (client varchar(50),benaccno varchar(500),ISINNo varchar(500),
			Free numeric(28,6),productid varchar(50))

			create table #TEMOHOLDING_NSDL11 (client varchar(50),benaccno varchar(500),ISINNo varchar(100),
			Free numeric(28,6),productid varchar(50))

			select @segmentselect='Select * from (select exch_internalId,
			isnull((select exh_shortName from tbl_master_Exchange 
			where exh_cntId=tbl_master_companyExchange.exch_exchId)+'' ''+''-''+'' ''+exch_segmentId,exch_membershiptype) as Comp 
			from tbl_master_companyExchange where exch_compid='''+@Companyid+''') as D 
			WHERE exch_internalId in('+@segmentforrmslimot+')' 
			insert into #Segment1(segmentid,segmentname) exec(@segmentselect)
			
				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode
				from tbl_master_contactexchange,tbl_master_contact
				where crg_cntid in('+@Clients+') and cnt_internalid=crg_cntid'
				if @date<>'NA'
						begin
							select @SQL=@SQL+' and isnull(crg_regisdate,''1900-01-01 00:00:00.000'')>='''+@date+''''
						end 
				select @SQL=@SQL+'
				and crg_company='''+@Companyid+''''
		
			insert into #CLIENTTEMP(clinetid,ucccode) exec(@SQL)

			----------------------------------------------------*********Margin Stocks*****************-------------------------
			create table #ABC1(QuantityS numeric(28,6),CustomerIDS varchar(50),ProductSeriesIDS varchar(50),
			SegmentIDS varchar(20),SettlementNumberS varchar(50),SettlementNumberT varchar(50),
			SourceSegmentId varchar(20),OwnAccountS BigInt,OwnAccountT BigInt)

			set @SQLDEL=''
			select @SQLDEL='
			select isnull(DematTransactions_Quantity,0) as QuantityS,
			DematTransactions_CustomerID as CustomerIDS,
			DematTransactions_ProductSeriesID as ProductSeriesIDS,
			DematTransactions_SegmentID as SegmentIDS,
			DematTransactions_SettlementNumberS as SettlementNumberS,
			DematTransactions_SettlementNumberT as SettlementNumberT,
			DematTransactions_SourceSegmentId as SourceSegmentId,
			DematTransactions_OwnAccountS as OwnAccountS,
			DematTransactions_OwnAccountT as OwnAccountT
			from Trans_DematTransactions where
			(DematTransactions_SettlementNumberS IN (''Margin'',''HLDBK'') 
					OR DematTransactions_SettlementNumberT IN (''Margin'',''HLDBK''))
			AND (DematTransactions_OwnAccountS IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
				 WHERE DPAccounts_CompanyID='''+@CompanyID+''' AND DPAccounts_IsPledgeAccount IS NULL)
                  OR
				 DematTransactions_OwnAccountT IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
				 WHERE DPAccounts_CompanyID='''+@CompanyID+'''  AND DPAccounts_IsPledgeAccount IS NULL))
			AND DematTransactions_Date<='''+@Tradedate +'''
			and isnull(DematTransactions_TransferType,''H'')<>''CF''
			and DematTransactions_FinYear='''+@Finyear+'''
			and DematTransactions_CustomerID IN(SELECT DISTINCT clinetid FROM #CLIENTTEMP)
			and (DematTransactions_SegmentID in('+@segmentforrmslimot+') or DematTransactions_SourceSegmentId in('+@segmentforrmslimot+'))
			and DematTransactions_CompanyID='''+@Companyid+''''

			insert into #ABC1(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
			SettlementNumberS,SettlementNumberT,SourceSegmentId,OwnAccountS,OwnAccountT) exec(@SQLDEL)
				


			select * into #t1 from 
			(select * from #ABC1 where SourceSegmentId is not null) as tab 
			delete from #ABC1 where SourceSegmentId is not null

			insert into #ABC1(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
			SettlementNumberS,SettlementNumberT,SourceSegmentId,OwnAccountS,OwnAccountT)
			select QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,null,
			SettlementNumberT,null,OwnAccountS,OwnAccountT
			from #t1 where SourceSegmentId<>SegmentIDS


			insert into #ABC1(QuantityS,CustomerIDS,ProductSeriesIDS,SegmentIDS,
			SettlementNumberS,SettlementNumberT,SourceSegmentId,OwnAccountS,OwnAccountT)
			select QuantityS,CustomerIDS,ProductSeriesIDS,SourceSegmentId,
			SettlementNumberS,null,null,OwnAccountS,OwnAccountT
			from #t1 where SourceSegmentId<>SegmentIDS

			--Select * into ABC1 from #ABC1

			set @SQLDEL=''
			select @SQLDEL='delete from #ABC1 where SegmentIDS not in('+@segmentforrmslimot+')'
			exec(@SQLDEL)



			INSERT INTO #MARGINSTOCKS1(Clientid,productid,Quantity,segment)
			Select Client,product,QuantityTTEMP,SegmentIDS From
			(select 
			case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
			case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
			(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,
			case when SegmentIDS is null then SegmentIDT else SegmentIDS end as SegmentIDS,OwnAccountS,OwnAccountT from

			(select  sum(isnull(QuantityS,0)) as QuantityS,
			CustomerIDS as CustomerIDS,
			ProductSeriesIDS as ProductSeriesIDS,
			SegmentIDS as SegmentIDS,
			OwnAccountS
			from #ABC1 where
			rtrim(ltrim(SettlementNumberS))='Margin'
			group by CustomerIDS,ProductSeriesIDS,SegmentIDS,OwnAccountS) as tabS
			
			full outer join

			(select  sum(isnull(QuantityS,0)) as QuantityT,
			CustomerIDS as CustomerIDT,
			ProductSeriesIDS as ProductSeriesIDT,
			SegmentIDS as SegmentIDT,OwnAccountT
			from #ABC1 where
			rtrim(ltrim(SettlementNumberT))='Margin'
			group by CustomerIDS,ProductSeriesIDS,SegmentIDS,OwnAccountT) as tabT
			
			on(CustomerIDS=CustomerIDT
				and ProductSeriesIDS=ProductSeriesIDT
					and SegmentIDS=SegmentIDT and OwnAccountS=OwnAccountT)) as Tab1
			Where
			(OwnAccountS IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
			 WHERE DPAccounts_CompanyID=@CompanyID AND DPAccounts_IsPledgeAccount IS NULL)
			  OR
			 OwnAccountT IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
			 WHERE DPAccounts_CompanyID=@CompanyID AND DPAccounts_IsPledgeAccount IS NULL))
			
				


------------------------------------------------*******Margin Stocks END**************-----------------------
				
----------------------------------------------********Holdback Stocks BEGIN**********-------------------------------------
			INSERT INTO #MARGINSTOCKS1(Clientid,productid,Quantity,segment)
			Select Client,product,QuantityTTEMP,SegmentIDS From
			(select 
			case when CustomerIDS is null then CustomerIDT else CustomerIDS end as Client,
			case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end as product,
			(ISNULL(Quantityt,0.0)-ISNULL(QuantityS,0.0)) AS QuantityTTEMP,
			case when SegmentIDS is null then SegmentIDT else SegmentIDS end as SegmentIDS,OwnAccountS,OwnAccountT from

			(select  sum(isnull(QuantityS,0)) as QuantityS,
			CustomerIDS as CustomerIDS,
			ProductSeriesIDS as ProductSeriesIDS,
			SegmentIDS as SegmentIDS,
			OwnAccountS
			from #ABC1 where
			rtrim(ltrim(SettlementNumberS))='HLDBK'
			group by CustomerIDS,ProductSeriesIDS,SegmentIDS,OwnAccountS) as tabS
			
			full outer join

			(select  sum(isnull(QuantityS,0)) as QuantityT,
			CustomerIDS as CustomerIDT,
			ProductSeriesIDS as ProductSeriesIDT,
			SegmentIDS as SegmentIDT,OwnAccountT
			from #ABC1 where
			rtrim(ltrim(SettlementNumberT))='HLDBK'
			group by CustomerIDS,ProductSeriesIDS,SegmentIDS,OwnAccountT) as tabT
			
			on(CustomerIDS=CustomerIDT
				and ProductSeriesIDS=ProductSeriesIDT
					and SegmentIDS=SegmentIDT and OwnAccountS=OwnAccountT)) as Tab1
			Where
			(OwnAccountS IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
			 WHERE DPAccounts_CompanyID=@CompanyID AND DPAccounts_IsPledgeAccount IS NULL)
			  OR
			 OwnAccountT IN(SELECT DPAccounts_ID FROM Master_DPAccounts 
			 WHERE DPAccounts_CompanyID=@CompanyID AND DPAccounts_IsPledgeAccount IS NULL))
	
			--Select * into MARGINSTOCKS1 from #MARGINSTOCKS1
----------------------------------------------********Holdback Stocks END**********-------------------------------------
				insert into #TEMPTAB(clientfinal,product,qty,status)
				select Clientid,productid,sum(isnull(Quantity,0)) as Quantity,0
				from #MARGINSTOCKS1 group by Clientid,productid,segment

----------------------------------------------------------------CALCULATION FOR Pndg.Pur
---------------------************SETTELMENTNO AND SETTLEMENTTYPE FETCH
				select * into #TEMPSETT1 from
				(select distinct Settlements_Number,Settlements_TypeSuffix
				from Master_Settlements
				where Settlements_ExchangeSegmentID in(1,2,4)
				and Settlements_StartDateTime<=@Tradedate
				and Settlements_FundsPayin>=@Tradedate)as TAB


---------------------------------FETCH PENDING SALE AND RECEIVE FROM DEMAT POSITION TABLE
				select * into #dematposition1 from 
				(select DematPosition_QtyToReceive,DematPosition_QtyToDeliver,
				DematPosition_CustomerID,DematPosition_ProductSeriesID,segmentid,
				DematPosition_SettlementNumber as SettlementsNumber,
				DematPosition_SettlementType as SettlementsType

				from Trans_DematPosition,#TEMPSETT1,#CLIENTTEMP,#Segment1 
				where DematPosition_SettlementNumber=Settlements_Number
				and DematPosition_SettlementType=Settlements_TypeSuffix
				and DematPosition_Segmentid=segmentid
				and DematPosition_companyid=@Companyid
				and DematPosition_finyear=@Finyear
				and DematPosition_CustomerID=clinetid) as TAB


-------------------------------FETCH QUANTITY FROM DEMAT TRANSACTION

				insert into #DematTransactionsSS(quantityS,customeridS,productidS,segS) 
				select DematTransactions_Quantity,DematTransactions_CustomerID,DematTransactions_ProductSeriesID,segmentid
				from Trans_DematTransactions,#TEMPSETT1,#CLIENTTEMP,#Segment1   
				where DematTransactions_SettlementNumberS=Settlements_Number
				and DematTransactions_SettlementTypeS=Settlements_TypeSuffix
				and DematTransactions_segmentid=segmentid
				and DematTransactions_Date<=@Tradedate
				and DematTransactions_companyid=@Companyid
				and DematTransactions_finyear=@Finyear
				and clinetid=DematTransactions_CustomerID

				insert into #DematTransactionsTT(quantityS,customeridS,productidS,segS) 
				select DematTransactions_Quantity,DematTransactions_CustomerID,DematTransactions_ProductSeriesID,segmentid
				from Trans_DematTransactions,#TEMPSETT1,#CLIENTTEMP,#Segment1   
				where DematTransactions_SettlementNumberT=Settlements_Number
				and DematTransactions_SettlementTypeT=Settlements_TypeSuffix
				and DematTransactions_segmentid=segmentid
				and DematTransactions_Date<=@Tradedate
				and DematTransactions_companyid=@Companyid
				and DematTransactions_finyear=@Finyear
				and clinetid=DematTransactions_CustomerID
---------------------------------------PNDG PURCHASE
				insert into #Pndg1 (Quantity,customer,Segment,productid)
				select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
				case when DematPosition_CustomerID is null then customeridS else DematPosition_CustomerID end as customer,
				case when segmentid is null then segS else segmentid end as Segment,
				case when DematPosition_ProductSeriesID is  null then  productidS else DematPosition_ProductSeriesID end as productid


				from
				(select sum(isnull(DematPosition_QtyToDeliver,0.0)) as SumQtyToReceive,
				DematPosition_CustomerID,segmentid,
				DematPosition_ProductSeriesID from #dematposition1
				where DematPosition_QtyToDeliver>0
				group by segmentid,DematPosition_CustomerID,DematPosition_ProductSeriesID) as TAB1

				left outer join

				(select sum(isnull(quantityS,0.0)) as Sum_Quantity,
				customeridS,segS,productidS from #DematTransactionsSS
				group by segS,customeridS,productidS) as TAB2

				on(DematPosition_CustomerID=customeridS and segmentid=segS and DematPosition_ProductSeriesID=productidS)


				insert into #TEMPTAB(clientfinal,product,qty,status)
				select customer,productid,sum(isnull(Quantity,0)) as Quantity,0
				from #Pndg1 group by customer,productid,Segment


				DELETE from #Pndg1

---------------------------------------PNDG SALES

				insert into #Pndg1 (Quantity,customer,Segment,productid)
				select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
				case when DematPosition_CustomerID is null then customeridS else DematPosition_CustomerID end as customer,
				case when segmentid is null then segS else segmentid end as Segment,
				case when DematPosition_ProductSeriesID is  null then  productidS else DematPosition_ProductSeriesID end as productid


				from
				(select sum(isnull(DematPosition_QtyToReceive,0.0)) as SumQtyToReceive,
				DematPosition_CustomerID,segmentid,
				DematPosition_ProductSeriesID from #dematposition1
				where DematPosition_QtyToReceive>0
				group by segmentid,DematPosition_CustomerID,DematPosition_ProductSeriesID) as TAB1

				left outer join

				(select sum(isnull(quantityS,0.0)) as Sum_Quantity,
				customeridS,segS,productidS from #DematTransactionsTT
				group by segS,customeridS,productidS) as TAB2

				on(DematPosition_CustomerID=customeridS and segmentid=segS and DematPosition_ProductSeriesID=productidS)

				insert into #TEMPTAB(clientfinal,product,qty,status)
				select customer,productid,sum(isnull(Quantity,0)) as Quantity,2
				from #Pndg1 group by customer,productid,Segment





--------------------------------------------DP HOLDING(CDSL)---------------------------------------------
				create table #TEMOHOLDING_CDSL111 (client varchar(50),benaccno varchar(30),
				startTime varchar(30),endTime varchar(30))

				insert into #TEMOHOLDING_CDSL111(client,benaccno) 
				select dpd_cntid,dpd_clientid 
				from tbl_master_contactdpdetails,tbl_master_companyexchange,#CLIENTTEMP
				where dpd_dpcode=exch_tmcode
				and dpd_accounttype='Default'
				and dpd_cntid=clinetid
				and exch_compid=@CompanyID


 
				update #TEMOHOLDING_CDSL111 set startTime=startTime_tab,endTime=endTime_tab from
				(select
				(select top 1 convert(varchar(30),CdslHolding_holdingdatetime,101)  from trans_cdslholding 
				order by CdslHolding_holdingdatetime desc) as startTime_tab,
				((select top 1 convert(varchar(30),CdslHolding_holdingdatetime,101)  from trans_cdslholding 
					order by CdslHolding_holdingdatetime desc) + ' 23:59:59') as endTime_tab) as tab


				insert into #TEMOHOLDING_CDSL11(client,benaccno,ISINNo,Free)
				select client,CdslHolding_BenAccountNumber,CdslHolding_ISIN,CdslHolding_FreeBalance
				from trans_cdslholding,#TEMOHOLDING_CDSL111,
				(select max(CdslHolding_HoldingDateTime) as HoldingDateTime from 
				Trans_CdslHolding,#TEMOHOLDING_CDSL111 
				where CdslHolding_BenAccountNumber=benaccno
				and CdslHolding_holdingdatetime between startTime and endTime)as tb
				where CdslHolding_BenAccountNumber=benaccno
				and CdslHolding_holdingdatetime=HoldingDateTime

				-----------Product Id Fetch
				update #TEMOHOLDING_CDSL11 Set productid=ISIN_ProductSeriesID From 
				master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
				and equity_SeriesId=ISIN_ProductSeriesID and equity_exchsegmentid=1

				update #TEMOHOLDING_CDSL11 Set productid=ISIN_ProductSeriesID From 
				master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
				and equity_SeriesId=ISIN_ProductSeriesID and productid is null
	
				delete from #TEMOHOLDING_CDSL11 where productid is null

				insert into #TEMPTAB(clientfinal,product,qty,status)
				select client,productid,sum(isnull(Free,0)) as Free,0
				from #TEMOHOLDING_CDSL11 group by client,productid

--------------------------------------------DP HOLDING(NSDL)---------------------------------------------

			declare @clientbenno table(client varchar(50),benaccno varchar(50))

			insert into @clientbenno(client,benaccno) 
			select dpd_cntid,dpd_clientid 
			from tbl_master_contactdpdetails,tbl_master_companyexchange,#CLIENTTEMP
			where dpd_dpcode=exch_tmcode and dpd_cntid=clinetid and exch_compid=@CompanyID 
			and dpd_accounttype='Default'



			insert into #TEMOHOLDING_NSDL11(client,benaccno,ISINNo,Free)
			select client,NsdlHolding_BenAccountNumber,NsdlHolding_ISIN,sum(isnull(NsdlHolding_Free,0))
			from trans_nsdlholding,@clientbenno
			where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)=
			(select max(cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)) 
			from trans_nsdlholding,@clientbenno
			where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)<=
			cast(DATEADD(dd, 0, DATEDIFF(dd, 0,@Tradedate)) as datetime) 
			AND  NsdlHolding_BenAccountNumber=benaccno
			and NsdlHolding_BenCategory = 3
			and NsdlHolding_BenAccountType = 20
			group by NsdlHolding_BenAccountNumber,NsdlHolding_ISIN)
			AND  NsdlHolding_BenAccountNumber=benaccno
			and NsdlHolding_BenCategory = 3
			and NsdlHolding_BenAccountType = 20
			group by client,NsdlHolding_BenAccountNumber,NsdlHolding_ISIN


			insert into #TEMOHOLDING_NSDL11(client,benaccno,ISINNo,Free)
			select client,NsdlHolding_BenAccountNumber,NsdlHolding_ISIN,sum(isnull(NsdlHolding_Free,0))
			from trans_nsdlholding,@clientbenno
			where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)=
			(select max(cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)) 
			from trans_nsdlholding
			where cast(DATEADD(dd, 0, DATEDIFF(dd, 0,NsdlHolding_HoldingDateTime)) as datetime)<=
			cast(DATEADD(dd, 0, DATEDIFF(dd, 0,@Tradedate)) as datetime))
			AND  NsdlHolding_BenAccountNumber=benaccno
			and NsdlHolding_BenCategory <> 3
			and NsdlHolding_BenAccountType <> 20
			group by client,NsdlHolding_BenAccountNumber,NsdlHolding_ISIN

				-----------Product Id Fetch
				update #TEMOHOLDING_NSDL11 Set productid=ISIN_ProductSeriesID From 
				master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
				and equity_SeriesId=ISIN_ProductSeriesID and equity_exchsegmentid=1

				update #TEMOHOLDING_NSDL11 Set productid=ISIN_ProductSeriesID From 
				master_isin,master_equity Where substring(isin_number,1,12)=ISINNo
				and equity_SeriesId=ISIN_ProductSeriesID and productid is null
	
				delete from #TEMOHOLDING_CDSL11 where productid is null

				insert into #TEMPTAB(clientfinal,product,qty,status)
				select client,productid,sum(isnull(Free,0)) as Free,0
				from #TEMOHOLDING_NSDL11 group by client,productid


				update #TEMPTAB set haircut=DailyVar_AppMargin 
				from Trans_DailyVar,
									(select max(DailyVar_Date) as date,DailyVar_ProductSeriesID as prdid 
									from Trans_DailyVar,#TEMPTAB
									 where DailyVar_Date<=@Tradedate
									 and DailyVar_ProductSeriesID=product 
									 group by DailyVar_ProductSeriesID) as kk
				where DailyVar_ProductSeriesID=product 
				and prdid=product 
				and DailyVar_ProductSeriesID=prdid 
				and DailyVar_Date=date

				update #TEMPTAB set symbol=rtrim(ltrim(isnull(Equity_TickerSymbol,''))),
				series=rtrim(ltrim(isnull(Equity_Series,'')))
				from master_equity where
				product=Equity_SeriesID and Equity_ExchSegmentID=1




				select * into #TEMPTABFinal from
				(select  ucccode,symbol,series,sum(isnull(qty,0)) as tb1sumqty,product as tb1product,
				clientfinal as tb1clientfinal,status,haircut from #TEMPTAB,#CLIENTTEMP
				where status=2 and clientfinal=clinetid
				group by clientfinal,product,ucccode,symbol,series,status,haircut ) as tab



				insert into #TEMPTABFinal(ucccode,symbol,series,tb1sumqty,tb1product,tb1clientfinal,status,haircut) 
				select  ucccode,symbol,series,sum(isnull(qty,0)) as tb1sumqty,product as tb1product,
				clientfinal as tb1clientfinal,status,haircut from #TEMPTAB,#CLIENTTEMP
				where status<>2 and clientfinal=clinetid
				group by clientfinal,product,ucccode,symbol,series,status,haircut 
				


				

-------------------------------------Result Display
--------------CHK
				SELECT 
				distinct ucccode,symbol,series,ROUND(tabsumqty,0) AS tabsumqty,@iscollateral as iscollateral,
				@evaluationmethod as evaluationmethod,ROUND(tabsumqty,0) AS tabsumqty,ROUND(haircut,0)
				FROM
				(SELECT 
				distinct ucccode,symbol,series,haircut,
				round(SUM((isnull(sumqty,0)))-SUM(isnull(sumqty1,0)),0) as tabsumqty FROM
				(
				SELECT 
				CASE WHEN tabclientfinal1 IS NULL THEN tabclientfinal2 ELSE tabclientfinal1 END AS tabclientfinal ,
				CASE WHEN tabproduct1 IS NULL THEN tabproduct2 ELSE tabproduct1 END AS tabproduct ,
				CASE WHEN ucccode1 IS NULL THEN ucccode2 ELSE ucccode1 END AS ucccode ,
				CASE WHEN symbol1 IS NULL THEN symbol2 ELSE symbol1 END symbol ,
				CASE WHEN series1 IS NULL THEN series2 ELSE series1 END as series,
				isnull(sumqty,0) AS sumqty,isnull(sumqty1,0) AS sumqty1,
				CASE WHEN round(haircut1,0) IS NULL THEN round(haircut2,0) ELSE round(haircut1,0)  END AS haircut from

				(
				select abs(sum(isnull(tb1sumqty,0))) as sumqty,tb1product as tabproduct1,
				tb1clientfinal as tabclientfinal1,ucccode as ucccode1 ,symbol as symbol1,series as series1,
				haircut as haircut1
				from #TEMPTABFinal where  status<>2 and haircut is not null and tb1sumqty<>0
				group by tb1clientfinal,tb1product,ucccode,symbol,series,haircut
				) as tb

				FULL outer join

				(
				select abs(sum(isnull(tb1sumqty,0))) as sumqty1,tb1product as tabproduct2,
				tb1clientfinal as tabclientfinal2,ucccode as ucccode2,symbol as symbol2,series as series2,
				haircut as haircut2
				from #TEMPTABFinal where  status=2  and haircut is not null and tb1sumqty<>0
				group by tb1clientfinal,tb1product,ucccode,symbol,series,haircut
				) as tb1
			
				on(tabproduct1=tabproduct2 and tabclientfinal1=tabclientfinal2 
				and round((isnull(sumqty,0)-isnull(sumqty1,0)),0)<>0)
				) AS TAB GROUP BY tabclientfinal,tabproduct,ucccode,symbol,series,haircut) AS BB
				WHERE tabsumqty<>0
				
--------------CHK

				set @record=null
			    set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='POSITION'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				
				set @seg=''
				set @seg=(select Top 1 dbo.fnSplit(segmentname,'-', 2)  from #Segment1 where segmentid=@segment)

				select 'NOW_Collateral_'+@seg+'_'+@record as filename,@record as record,
				REPLACE(CONVERT(VARCHAR(10),getdate() , 103), '/', '') as date

				drop table #TEMPTAB
				drop table #DematTransactionsSS
				drop table #ABC1
				drop table #t1
				drop table #MARGINSTOCKS1
				drop table #TEMPSETT1
				drop table #dematposition1
				drop table #Pndg1
				drop table #TEMOHOLDING_NSDL11
				drop table #TEMOHOLDING_CDSL111
				drop table #TEMOHOLDING_CDSL11
--				drop table #TEMPTABFinal
			
	END--------------------------------"Holding With Collateral Quantity"

if(@ExportType='5')--------------------------------"T1 Holdings FOR CM"
	BEGIN
			set @SQL=''
			
			create table #CLIENTTEMP1(clinetid varchar(50),ucccode varchar(20))

			create table #Pndg11 (Quantity numeric(28,6),productid varchar(50),customer varchar(500),Segment varchar(20),
			netvalue numeric(28,6),qty numeric(28,6),haircut numeric(28,6))

			create table #TEMPTAB1(clientfinal varchar(50),product varchar(50),qty numeric(28,0),
			symbol varchar(50),series varchar(50))
			create table #DematTransactionsSSS(quantityS numeric(28,6),customeridS varchar(50),productidS varchar(50),segS varchar(50))

			
				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode
				from tbl_master_contactexchange,tbl_master_contact
				where crg_cntid in('+@Clients+') and cnt_internalid=crg_cntid'
				if @date<>'NA'
						begin
							select @SQL=@SQL+' and isnull(crg_regisdate,''1900-01-01 00:00:00.000'')>='''+@date+''''
						end 
				select @SQL=@SQL+'
				and crg_company='''+@Companyid+''''
		
			insert into #CLIENTTEMP1(clinetid,ucccode) exec(@SQL)
			
			---------------------************SETTELMENTNO AND SETTLEMENTTYPE FETCH
				select * into #TEMPSETT11 from
				(select distinct Settlements_Number,Settlements_TypeSuffix
				from Master_Settlements
				where Settlements_ExchangeSegmentID in(1,4)
				and Settlements_StartDateTime<=@Tradedate
				and Settlements_FundsPayin>=@Tradedate)as TAB


---------------------------------FETCH PENDING SALE AND RECEIVE FROM DEMAT POSITION TABLE
				select * into #dematposition11 from 
				(select DematPosition_QtyToReceive,DematPosition_QtyToDeliver,
				DematPosition_CustomerID,DematPosition_ProductSeriesID,
				DematPosition_SettlementNumber as SettlementsNumber,
				DematPosition_SettlementType as SettlementsType

				from Trans_DematPosition,#TEMPSETT11,#CLIENTTEMP1
				where DematPosition_SettlementNumber=Settlements_Number
				and DematPosition_SettlementType=Settlements_TypeSuffix
				and DematPosition_Segmentid=@segment
				and DematPosition_companyid=@Companyid
				and DematPosition_finyear=@Finyear
				and DematPosition_CustomerID=clinetid) as TAB

-------------------------------FETCH QUANTITY FROM DEMAT TRANSACTION
				insert into #DematTransactionsSSS(quantityS,customeridS,productidS) 
				select DematTransactions_Quantity,DematTransactions_CustomerID,DematTransactions_ProductSeriesID
				from Trans_DematTransactions,#TEMPSETT11,#CLIENTTEMP1  
				where DematTransactions_SettlementNumberS=Settlements_Number
				and DematTransactions_SettlementTypeS=Settlements_TypeSuffix
				and DematTransactions_segmentid=@segment
				and DematTransactions_Date<=@Tradedate
				and DematTransactions_companyid=@Companyid
				and DematTransactions_finyear=@Finyear
				and clinetid=DematTransactions_CustomerID
---------------------------------------PNDG PURCHASE
				insert into #Pndg11 (Quantity,customer,productid)
				select (isnull(SumQtyToReceive,0.0)-isnull(Sum_Quantity,0.0)) as Quantity,
				case when DematPosition_CustomerID is null then customeridS else DematPosition_CustomerID end as customer,
				case when DematPosition_ProductSeriesID is  null then  productidS else DematPosition_ProductSeriesID end as productid


				from
				(select sum(isnull(DematPosition_QtyToDeliver,0.0)) as SumQtyToReceive,
				DematPosition_CustomerID,
				DematPosition_ProductSeriesID from #dematposition11
				where DematPosition_QtyToDeliver>0
				group by DematPosition_CustomerID,DematPosition_ProductSeriesID) as TAB1

				left outer join

				(select sum(isnull(quantityS,0.0)) as Sum_Quantity,
				customeridS,productidS from #DematTransactionsSSS
				group by customeridS,productidS) as TAB2

				on(DematPosition_CustomerID=customeridS  and DematPosition_ProductSeriesID=productidS)

				insert into #TEMPTAB1(clientfinal,product,qty)
				select customer,productid,sum(isnull(Quantity,0)) as Quantity
				from #Pndg11 group by customer,productid

				update #TEMPTAB1 set symbol=rtrim(ltrim(isnull(Equity_TickerSymbol,''))),
				series=rtrim(ltrim(isnull(Equity_Series,'')))
				from master_equity where
				product=Equity_SeriesID and Equity_ExchSegmentID=1

--------------------------------RESULT
				select ucccode,symbol,series,qty from #TEMPTAB1,#CLIENTTEMP1
				where clinetid=clientfinal
				
				set @record=null
			set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='POSITION'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				
				select 'NOW_T1Holdings_'+@record as filename,@record as record,
				REPLACE(CONVERT(VARCHAR(10),getdate() , 103), '/', '') as date

				drop table #CLIENTTEMP1
				drop table #Pndg11
				drop table #TEMPTAB1
				drop table #DematTransactionsSSS
				
END--------------------------------------------T1 Holdings FOR CM END
else if(@ExportType='8')--------------------------------"Client Segment Enabled"
	BEGIN
			set @SQL=''
			set @segmentselect=''
			
			create table #CLIENTTEMP11(clinetid varchar(50),crg_tcode varchar(50),crg_exchange varchar(50))
			
			
				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode,
				crg_exchange
				from tbl_master_contactexchange,tbl_master_contact
				where crg_cntid in('+@Clients+') 
				and cnt_internalid=crg_cntid
				and crg_exchange in(select Comp from (select 
				isnull((select exh_shortName from tbl_master_Exchange 
				where exh_cntId=tbl_master_companyExchange.exch_exchId)+'' ''+''-''+'' ''+exch_segmentId,
				exch_membershiptype) as Comp 
				from tbl_master_companyExchange where exch_compid='''+@Companyid+''' 
				and exch_internalId in('+@segmentforrmslimot+')) as D)
				and crg_company='''+@Companyid+''''
		
			insert into #CLIENTTEMP11(clinetid,crg_tcode,crg_exchange) exec(@SQL)
--			select * from #CLIENTTEMP11
			select * into #TEMPC from  
			(select count(clinetid) as countclient,clinetid as clinet from #CLIENTTEMP11 group by clinetid) as tb
--			select * from #TEMPC
-----------------------------------ALL RECORD FETCH
			select distinct crg_tcode,case when crg_exchange='NSE - CM' then 'NSE' else 'NSEFO' end as seg,
			null as seg1
			from #CLIENTTEMP11,#TEMPC
			where countclient=1 and clinetid=clinet
			union all
			select distinct crg_tcode,'NSE' as seg,'NSEFO' as seg1
			from #CLIENTTEMP11,#TEMPC
			where countclient>1 and clinetid=clinet

			set @record=null
			set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='CLIENTSEGMENT'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				
				select 'NOW_CLIENTSEGMENT_'+@record as filename,@record as record,
				REPLACE(CONVERT(VARCHAR(10),getdate() , 103), '/', '') as date

			

			drop table #CLIENTTEMP11
			drop table #TEMPC
		
	END--------------------------------"Client Segment Enabled END"
else if(@ExportType='9')--------------------------------"Client Products Enabled"
	BEGIN
			set @SQL=''
			set @segmentselect=''
			
			create table #CLIENTTEMP12(clinetid varchar(50),crg_tcode varchar(50))
			
			
				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode
				from tbl_master_contactexchange,tbl_master_contact
				where crg_cntid in('+@Clients+') 
				and cnt_internalid=crg_cntid
				and crg_exchange in(select Comp from (select 
				isnull((select exh_shortName from tbl_master_Exchange 
				where exh_cntId=tbl_master_companyExchange.exch_exchId)+'' ''+''-''+'' ''+exch_segmentId,
				exch_membershiptype) as Comp 
				from tbl_master_companyExchange where exch_compid='''+@Companyid+''' 
				and exch_internalId in('+@segmentforrmslimot+')) as D)
				and crg_company='''+@Companyid+''''
		
			insert into #CLIENTTEMP12(clinetid,crg_tcode) exec(@SQL)

-----------------------------------ALL RECORD FETCH
			select distinct crg_tcode
			from #CLIENTTEMP12

			set @record=null
			set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='CLIENTPRODUCT'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				
				select 'NOW_CLIENTPRODUCT_'+@record as filename,@record as record,
				REPLACE(CONVERT(VARCHAR(10),getdate() , 103), '/', '') as date

			

			drop table #CLIENTTEMP12
		
		
	END--------------------------------"Client Products Enabled END"
else if(@ExportType='10')--------------------------------"Investor Client Segment Enabling"
	BEGIN
			set @SQL=''
			
			create table #CLIEN(clinetid varchar(50),ucccode varchar(20),crg_exchange varchar(50))
			
				select @SQL='select distinct crg_cntid,rtrim(ltrim(crg_tcode)) as crg_tcode,crg_exchange
				from tbl_master_contactexchange,tbl_master_contact
				where crg_cntid in('+@Clients+') and cnt_internalid=crg_cntid'
				if @date<>'NA'
						begin
							select @SQL=@SQL+' and isnull(crg_regisdate,''1900-01-01 00:00:00.000'')>='''+@date+''''
						end 
				select @SQL=@SQL+'
				and crg_exchange in(select Comp from (select 
				isnull((select exh_shortName from tbl_master_Exchange 
				where exh_cntId=tbl_master_companyExchange.exch_exchId)+'' ''+''-''+'' ''+exch_segmentId,
				exch_membershiptype) as Comp 
				from tbl_master_companyExchange where exch_compid='''+@Companyid+''' 
				and exch_internalId in('+@segmentforrmslimot+')) as D)
				and crg_company='''+@Companyid+''''
		
			insert into #CLIEN(clinetid,ucccode,crg_exchange) exec(@SQL)


			select ucccode,ucccode,
			case when crg_exchange='NSE - CM' then 'NSE' 
				when  crg_exchange='NSE - FO' then 'NSEFO' else null end crg_exchange,
			case when crg_exchange='NSE - CM' then rtrim(ltrim(@exchangeuseridCM))
				when crg_exchange='NSE - FO' then rtrim(ltrim(@exchangeuseridFO)) else null end as exchangeuserid,
			CONVERT(VARCHAR(10),cast(@expirydate as datetime), 103) as expirydate,
			rtrim(ltrim(@exchangeuserinfo)) as exchangeuserinfo,
			rtrim(ltrim(@enabledflag)) as  enabelflag from #CLIEN


			set @record=null
			set @record=(select max(ExportFiles_BatchNumber) from Trans_ExportFiles where 
						[ExportFiles_Segment]=@segment and [ExportFiles_Type]='INVESTORSEGMENT'
							and cast(DATEADD(dd, 0, DATEDIFF(dd, 0,[ExportFiles_CreateDateTime])) as datetime)=
								cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime))
				if(@record is null)
						begin
							set @record='01'
						end
				else 
						begin
							set @record=@record+1
							if (@record<=9)
								begin
									set @record='0'+@record
								end
							if(@record>9 and @record<=99)
								begin
									set @record=@record
								end
						end
				
				select 'NOW_INVESTOR_SEGMENT_' as filename,@record as record,
				REPLACE(CONVERT(VARCHAR(10),getdate() , 112), '/', '') as date

				select distinct crg_exchange as  exchange from #CLIEN order by crg_exchange

			drop table #CLIEN
			
			
	END--------------------------------"Investor Client Segment Enabling"
	
END
