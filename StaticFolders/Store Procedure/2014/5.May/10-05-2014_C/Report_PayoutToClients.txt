

ALTER procedure [dbo].[Report_PayoutToClients] ---------This Sp For Payout To Clients In Delivery Processing
@FinYear varchar(15),
@CompanyID varchar(15),
@Segmentid varchar(30),
@PositionOf varchar(15),
@Clients varchar(max),
@Scrip varchar(max),
@GrpId varchar(max),
@GrpType varchar(20),
@branchhiearchy varchar(max),
@StocksDetails varchar(200)

--Declare @Client varchar(max),@GrpId varchar(max)
--Select @Client='ALL'
--Select @GrpId='197,157,185,204,139,180,1,162,169,174,161,153,135,149,164,193,186,170,129,192,189,167,178,188,150,198,137,166,191,134,199,133,145,142,196,143,131,130,200,190'
--exec [Report_PayoutToClients] '2012-2013','COR0000002','24','2013053N',@Client,'ALL','ALL','BRANCH',@GrpId,'2013053N~42~1'

As
Begin 
Set NoCOunt On

---------------------*****************----------------------Declare Table and Variable Begin
		Declare @Sql varchar(max)
		Declare @MAXID INT,@MINID INT
		Declare @StocksOf varchar(15),@StocksAc varchar(30),@OrderBy varchar(2),@OffMkt varchar(10),@TransferType varchar(10),@AccountType varchar(30)
		
		Select @StocksOf=dbo.fnSplit(@StocksDetails,'~', 1)
		Select @StocksAc=dbo.fnSplit(@StocksDetails,'~', 2) 
		Select @OrderBy=dbo.fnSplit(@StocksDetails,'~', 3) 
		Select @OffMkt=dbo.fnSplit(@StocksDetails,'~', 4) 
		Select @TransferType=dbo.fnSplit(@StocksDetails,'~', 5) 
        Select @AccountType=ltrim(rtrim(DPAccounts_AccountType)) from Master_DPAccounts where DPAccounts_ID=@StocksAc
        
		declare @sqlselect varchar(max),@sqlwhere varchar(max)
					declare @SettTypeFrom varchar(5),@SettNumberFrom varchar(15)

					set @SettNumberFrom  =substring(@PositionOf,1,7)---------Only Number ---------
					set @SettTypeFrom =substring(@PositionOf,8,1)-------Only Character --------

					declare @SettTypeTo varchar(5),@SettNumberTo varchar(15)

					set @SettNumberTo  =substring(@StocksOf,1,7)---------Only Number ---------
					set @SettTypeTo =substring(@StocksOf,8,1)-------Only Character --------

		-------Main Table
		Create Table #TabPayout(ClientId varchar(15),ProdcutId varchar(30),ISINNo varchar(30),ToDeliver numeric(28,0),
		TotalStocks numeric(28,0),TxtBoxEditableOrNot varchar(2),Deliverable numeric(28,0),

		DlvProfile_OutgoingDeliveries int,DlvProfile_HoldbackEntireDeliveries int,DlvProfile_MarkupOnDebitBalance numeric(5,2),
		DlvProfile_NoPartialHoldback varchar(2),DlvProfile_DebitGrace numeric(4,2),DlvProfile_HoldBackMinAmount numeric(14,2),
		DlvProfile_DesignatedBenAccount int,DlvProfile_HldConsolidateAllSegmentBalance int,ProfileName Varchar(150),
		DlvProfile_HldApplicableMarginMarkUp numeric(3,0),
	
		Sys1LedgerBaln numeric(28,2),Sys1UnClearBaln numeric(28,2),Sys1EffectBaln numeric(28,2),
		Sys2LedgerBaln numeric(28,2),Sys2UnClearBaln numeric(28,2),Sys2EffectBaln numeric(28,2),
		Sys3LedgerBaln numeric(28,2),Sys3UnClearBaln numeric(28,2),Sys3EffectBaln numeric(28,2),
		MrgnHldbkValue numeric(28,2),MrgnHldbkValueWithHaircut numeric(28,2),MrgnHldbkEffectBaln numeric(28,2),
		PurchaseValue numeric(28,2),PurchaseWithHaircut numeric(28,2),PurchaseEffectBaln numeric(28,2),
		SalesValue numeric(28,2),SalesWithHaircut numeric(28,2),SalesEffectBaln numeric(28,2),
		TotalValue numeric(28,2),TotalMiddle numeric(28,2),TotalEffectBaln numeric(28,2),
		AppMargin numeric(28,2),AppMarginWithmarkUp numeric(28,2),AppMarginEffectBaln numeric(28,2),
		NetWorth numeric(28,2),

		TransferAcId varchar(20),TransferAcIdForColor int,ToDeliverValue numeric(28,2),SumToDeliverValue numeric(28,2),Sys1BalnWithMarkUp numeric(28,6),
		DeliveryValueWithPercentageOrMin numeric(28,6),ConsiderHoldbkRule varchar(2),
		RemainShareValue numeric(28,2),GiveShareValue numeric(28,2),SumGiveShareValue numeric(28,2),ClientType int,AcName varchar(150),
		ClientName varchar(150),Ucc varchar(20),ScripName varchar(150),BranchCode varchar(20),CntClientType varchar(3),
		ForAcId varchar(8)
		)

		---------SegmentId Fetch
		Create Table #TbCmSegment(CmSegment  varchar(10))
		-------Stocks Fetch
		Create Table #TabStocks(Seriesid varchar(30),ISINNumber varchar(30),Stocks numeric(28,0))

		-------Create Table For Calculation
		Create Table #TbOther(Customerid varchar(15),Other varchar(20),Balnance numeric(28,2),VarMargin numeric(28,6),CloseRate numeric(28,6))
		----------All Result Fetch From Transaction

		Create Table #TranSaction (Quantity numeric(28,0),CustomerID varchar(12),ProductSeriesID varchar(20),ISIN varchar(12),
		SegmentID varchar(10),SourceSegmentId varchar(10),SettlementNumberS varchar(12),SettlementNumberT varchar(10))

		----------Create Table For Margin-Hldbk
		Create Table #Collateral(Client varchar(15),Product varchar(30),Qty numeric(28,0),ClosePrice numeric(28,6),
		HairCut numeric(28,6),StocksValueWithoutHairCut numeric(28,2),StocksValueWithHairCut numeric(28,2))

		-----------Create Table PendingPurChase and Sales
		Create Table #Pndg(Customer varchar(15),Prdid varchar(30),SettlementNo varchar(30),PndType varchar(2),
		Purchase numeric(28,0),Sales numeric(28,0),ClosePrice numeric(28,6),HairCut numeric(28,6),
		PurchaseWithHaircut numeric(28,2),PurchaseWithOutHaircut numeric(28,2),
		SalesWithHaircut numeric(28,2),SalesWithOutHaircut numeric(28,2))
		--------------Sett No Fetch
		Create Table #SetNo  (SetNo VARCHAR(20),SetType VARCHAR(5))

		--------Temp Table Create For Client Details Fetch
		Create Table #TBClient(clientid1 varchar(12),clientname1 varchar(200),clientucc1 varchar(20),grpid1 varchar(20),grpname1 varchar(200),cntclienttype1 varchar(5))
				
---------------------*****************----------------------Declare Table and Variable End
		-------client details fetch
		select @sqlselect='Select distinct cnt_internalid,(isnull(rtrim(cnt_firstName),'+char(39)+''+char(39)+') +'
					+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_middleName),'+char(39)+''+char(39)+')+'
					+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_lastName),'+char(39)+''+char(39)+')),
					rtrim(cnt_UCC) AS UCC,'
		if(@GrpType='BRANCH')
				BEGIN
					Select @sqlselect=@sqlselect+'branch_id,rtrim(branch_code)'
				END
		ELSE 
				BEGIN
						Select @sqlselect=@sqlselect+'gpm_id,rtrim(GPM_CODE)'
				END
		
		Select @sqlwhere=',left(isnull(cnt_clienttype,''RRR''),1) From tbl_master_contact,'
		if(@GrpType='BRANCH')
			BEGIN
				Select @sqlwhere=@sqlwhere+' tbl_master_branch 
				where cnt_branchid=branch_id'
				If @GrpId<>'ALL'
				begin
					Select @sqlwhere=@sqlwhere+ ' and cnt_branchid in ('+@GrpId+')'
				end
			END
		ELSE
			BEGIN
				Select @sqlwhere=@sqlwhere+' tbl_master_groupmaster,tbl_trans_group
				where cnt_internalid=grp_contactid
				AND gpm_type='''+@grptype+'''
				AND grp_groupmaster=gpm_id
				AND GRP_GROUPTYPE='''+@grptype+''''
				If @GrpId<>'ALL'
				begin
					Select @sqlwhere=@sqlwhere+ ' and grp_groupmaster in ('+@GrpId+')'
				end
			END
		if @Clients<>'ALL'
			BEGIN
						select @sqlwhere=@sqlwhere+' and cnt_internalid in ('+@Clients+')'
			END
		Select @sqlwhere=@sqlwhere+' and cnt_branchid in ('+@branchhiearchy+')'
	
	
		INSERT INTO #TBClient(clientid1,clientname1,clientucc1,grpid1,grpname1,cntclienttype1)
		exec (@sqlselect+@sqlwhere)
		--------------Insert Into Main Table For ToDeliver Quantity Fetch
		
				
		Select @sqlselect='
		Select DematPosition_CustomerID,DematPosition_ProductSeriesID,DematPosition_Isin,'
		if @OffMkt='false'
		Begin
			Select @sqlselect=@sqlselect+' abs(Sum(isnull(DematPosition_QtyToDeliver,0)-(isnull(DematPosition_QtyDelivered,0))))'
		End
		else
		Begin
			Select @sqlselect=@sqlselect+' abs(Sum(isnull(DematPosition_QtyReceived,0)-isnull(DematPosition_QtyToReceive,0)-isnull(DematPosition_QtyDelivered,0)+isnull(DematPosition_QtyToDeliver,0)))'
					-------[-(isnull(DematPosition_QtyDelivered,0)-isnull(DematPosition_QtyToDeliver,0))))]
		End
		Select @sqlwhere='
		From Trans_DematPosition
		where DematPosition_CustomerID like ''CL%''
		and DematPosition_CustomerID in (Select clientid1 From #TBClient)'
		If @Scrip<>'All'
		Begin
				Select @sqlwhere=@sqlwhere+' and DematPosition_ProductSeriesID in ('+@Scrip+')'
		End
		Select @sqlwhere=@sqlwhere+'
		and DematPosition_SettlementNumber='''+@SettNumberFrom+'''
		and DematPosition_SettlementType='''+@SettTypeFrom+'''
		and DematPosition_finyear='''+@FinYear+'''
		and DematPosition_Segmentid='''+@SegmentID+'''
		and DematPosition_companyid='''+@CompanyID+'''
		Group By DematPosition_ProductSeriesID,DematPosition_Isin,DematPosition_CustomerID Having'
		if @OffMkt='false'
		Begin
			Select @sqlwhere=@sqlwhere+'  Sum(isnull(DematPosition_QtyToDeliver,0)-(isnull(DematPosition_QtyDelivered,0)))>0'
		End
		else
		Begin
			Select @sqlwhere=@sqlwhere+' Sum(isnull(DematPosition_QtyReceived,0)-isnull(DematPosition_QtyToReceive,0)-isnull(DematPosition_QtyDelivered,0)+isnull(DematPosition_QtyToDeliver,0))>0 and Sum(isnull(DematPosition_QtyReceived,0))>0'
		End
		Insert Into #TabPayout(ClientId,ProdcutId,ISINNo,ToDeliver)exec (@sqlselect+@sqlwhere)

		-----------------------Client Details Fetch
		Update #TabPayout Set  ClientName=clientname1
							  ,Ucc=clientucc1
							  ,BranchCode=grpname1
							  ,CntClientType=cntclienttype1
		From #TBClient
		Where clientid1=ClientId
		
		select @StocksAc=Case When @AccountType ='[PLDRCTDEL]'
				  Then (select DPAccounts_ID from Master_DPAccounts where DPAccounts_ShortName='P008-NSE POOL ACC-10000359')
			 Else @StocksAc End
		
		--------Stocks Fetch
		Insert Into #TabStocks(Seriesid,ISINNumber,Stocks)
		Select DematStocks_ProductSeriesid,DematStocks_ISIN,
		Sum(isnull(DematStocks_OpeningQty,0)+isnull(DematStocks_InQty,0)-isnull(DematStocks_OutQty,0))
		From Trans_DematStocks,
								(Select Distinct ProdcutId,ISINNo From #TabPayout) as kk
		Where DematStocks_ProductSeriesid=ProdcutId
		and DematStocks_ISIN=ISINNo
		and DematStocks_FinYear=@FinYear
		and DematStocks_SettlementNumber=@SettNumberTo
		and DematStocks_SettlementType=@SettTypeTo
		and DematStocks_Accountid= @StocksAc
		Group By DematStocks_ProductSeriesid,DematStocks_ISIN
		Having Sum(isnull(DematStocks_OpeningQty,0)+isnull(DematStocks_InQty,0)-isnull(DematStocks_OutQty,0))<>0
		
		----------Total Stocks Deliver Per Product
		Update #TabPayout Set TotalStocks=Stocks,TxtBoxEditableOrNot='Y' From #TabStocks Where 
		Seriesid=ProdcutId and ISINNumber=ISINNo
		
		---------TxtBoxEditableOrNot
		Update #TabPayout Set TxtBoxEditableOrNot='N' Where TotalStocks is null

		--------Segments Fetch
		Insert Into #TbCmSegment(CmSegment)
		Select distinct exch_internalid from tbl_master_companyexchange
		Where exch_compid=@CompanyID and exch_segmentid='CM'


----------------If Profile Exists
Update #TabPayout Set 
 DlvProfile_OutgoingDeliveries=DeliveryProfile_OutgoingDeliveries,DlvProfile_HoldbackEntireDeliveries=DeliveryProfile_HoldbackEntireDeliveries
,DlvProfile_MarkupOnDebitBalance=DeliveryProfile_MarkupOnDebitBalance,DlvProfile_NoPartialHoldback=DeliveryProfile_NoPartialHoldback
,DlvProfile_DebitGrace=DeliveryProfile_DebitGrace,DlvProfile_HoldBackMinAmount=DeliveryProfile_HoldBackMinAmount
,DlvProfile_DesignatedBenAccount=DeliveryProfile_DesignatedBenAccount,DlvProfile_HldConsolidateAllSegmentBalance=DeliveryProfile_HldConsolidateAllSegmentBalance
,ProfileName=Case When DeliveryProfile_HldConsolidateAllSegmentBalance=1 
				  Then TradingProfile_Name+' [Consolidated Across CM-Segments]' 
			 Else TradingProfile_Name End
,DlvProfile_HldApplicableMarginMarkUp=DeliveryProfile_HldApplicableMarginMarkUp
From Config_DeliveryProfile,Trans_ProfileMember,Master_TradingProfile
Where 
DeliveryProfile_Code=ProfileMember_Code 
and TradingProfile_Code=DeliveryProfile_Code
and ProfileMember_Code=TradingProfile_Code
and ProfileMember_CustomerID=ClientId 
and ProfileMember_Type=2 and CntClientType='R'
and DeliveryProfile_SegmentID=@SegmentID
and (cast(GetDate() as datetime) between DeliveryProfile_DateFrom and isnull(DeliveryProfile_DateTo,'10/10/2100'))
and (cast(GetDate() as datetime) between ProfileMember_DateFrom and isnull(ProfileMember_DateTo,'10/10/2100'))

----------------If Profile Not Exists [DEFAULTDLV]
Update #TabPayout Set 
 DlvProfile_OutgoingDeliveries=DeliveryProfile_OutgoingDeliveries,DlvProfile_HoldbackEntireDeliveries=DeliveryProfile_HoldbackEntireDeliveries
,DlvProfile_MarkupOnDebitBalance=DeliveryProfile_MarkupOnDebitBalance,DlvProfile_NoPartialHoldback=DeliveryProfile_NoPartialHoldback
,DlvProfile_DebitGrace=DeliveryProfile_DebitGrace,DlvProfile_HoldBackMinAmount=DeliveryProfile_HoldBackMinAmount
,DlvProfile_DesignatedBenAccount=DeliveryProfile_DesignatedBenAccount,DlvProfile_HldConsolidateAllSegmentBalance=DeliveryProfile_HldConsolidateAllSegmentBalance
,ProfileName=Case When DeliveryProfile_HldConsolidateAllSegmentBalance=1 
				  Then TradingProfile_Name+' [Consolidated Across CM-Segments]' 
			 Else TradingProfile_Name End
,DlvProfile_HldApplicableMarginMarkUp=DeliveryProfile_HldApplicableMarginMarkUp
From Config_DeliveryProfile,Master_TradingProfile
Where ProfileName is null
and TradingProfile_Code=DeliveryProfile_Code
and TradingProfile_Code='DEFAULTDLV'
and TradingProfile_Type=2 and CntClientType='R'
and DeliveryProfile_SegmentID=@SegmentID
and (cast(GetDate() as datetime) between DeliveryProfile_DateFrom and isnull(DeliveryProfile_DateTo,'10/10/2100'))

------------LedgerBaln Fetch [Consolidated Across CM-Segments]
Insert Into #TbOther(Customerid,Other,Balnance)
Select AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid,
sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))
From Trans_Accountsledger
Where AccountsLedger_Mainaccountid in ('SYSTM00001','SYSTM00002','SYSTM00003')
and AccountsLedger_FinYear=@Finyear 
and AccountsLedger_ExchangeSegmentID in (Select CmSegment From #TbCmSegment)
and AccountsLedger_SubAccountID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=1 )
and AccountsLedger_CompanyID=@CompanyID
Group By AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid

------------LedgerBaln Fetch [For Segment]
Insert Into #TbOther(Customerid,Other,Balnance)
Select AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid,
sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))
From Trans_Accountsledger
Where AccountsLedger_Mainaccountid in ('SYSTM00001','SYSTM00002','SYSTM00003')
and AccountsLedger_FinYear=@Finyear 
and AccountsLedger_ExchangeSegmentID=@SegmentID
and AccountsLedger_SubAccountID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=0)
and AccountsLedger_CompanyID=@CompanyID
Group By AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid

----------Balnces Fetch
Update #TabPayout Set Sys1LedgerBaln=Balnance,Sys1EffectBaln=Balnance
From #TbOther Where Other='SYSTM00001' and ClientId =Customerid and CntClientType='R'

---- Vedika: Consider DP Segment Debit Balance while making payout to clients -------
	Create Table #DpDebit (CustomerID varchar(10) null,ClientID varchar(10) null,DPAc varchar(10) null,Amount numeric(12,2) null)

	Insert into #DpDebit (CustomerID,ClientID,DPAc)
	Select NsdlClients_ContactID,NsdlClients_BenAccountID,'SYSTM00043' 
	from Master_NsdlClients,#TbOther
	where NsdlClients_ContactID=#TbOther.Customerid

	Insert into #DpDebit (CustomerID,ClientID,DPAc)
	Select CdslClients_ContactID,CdslClients_BenAccountNumber,'SYSTM00042' 
	from Master_CdslClients,#TbOther
	where CdslClients_ContactID=#TbOther.Customerid
	
	Update #DpDebit Set Amount=DpBal.Net
	From (	select AccountsLedger_MainAccountID As Account,AccountsLedger_SubAccountID As Clid,
			sum(isnull(AccountsLedger_AmountCr,0)-isnull(AccountsLedger_AmountDr,0)) As Net
			from Trans_AccountsLedger where AccountsLedger_CompanyID=@CompanyID
			and AccountsLedger_FinYear=@FinYear and AccountsLedger_ExchangeSegmentID in (select exch_internalId from tbl_master_companyExchange 
			where exch_membershipType in ('NSDL','CDSL'))
			and AccountsLedger_MainAccountID in ('SYSTM00042','SYSTM00043')
			Group by AccountsLedger_MainAccountID,AccountsLedger_SubAccountID) As DpBal
	WHERE DPAc=Account AND ClientID=Clid
	
	----SELECT * FROM #DpDebit

	Update #TabPayout Set	Sys1LedgerBaln=Sys1LedgerBaln+isnull(DpBal.Net,0),
							Sys1EffectBaln=Sys1EffectBaln+isnull(DpBal.Net,0)
	from (	SELECT CustomerID as Clid,sum(isnull(Amount,0)) As Net 
			FROM #DpDebit
			Group by CustomerID
			having sum(isnull(Amount,0))<0 )As DpBal
	where ClientId=Clid
-------------------------------------------------------------------------------------

Update #TabPayout Set Sys2LedgerBaln=Balnance,Sys2EffectBaln=Balnance
From #TbOther Where Other='SYSTM00002' and ClientId =Customerid and CntClientType='R'

Update #TabPayout Set Sys3LedgerBaln=Balnance,Sys3EffectBaln=Balnance
From #TbOther Where Other='SYSTM00003' and ClientId =Customerid and CntClientType='R'

TrunCate Table #TbOther
------------ Unclear Balance Fetch [Consolidated Across CM-Segments]
Insert Into #TbOther(Customerid,Other,Balnance)
Select AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid,
sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))
From Trans_Accountsledger
Where AccountsLedger_Mainaccountid in ('SYSTM00001','SYSTM00002','SYSTM00003')
and AccountsLedger_FinYear=@Finyear
and AccountsLedger_ExchangeSegmentID in (Select CmSegment From #TbCmSegment)
and AccountsLedger_SubAccountID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=1)
AND AccountsLedger_TransactionType='Cash_Bank'
AND AccountsLedger_TransactionReferenceID like 'R%' 
AND (AccountsLedger_ValueDate is null or  AccountsLedger_ValueDate='1900-01-01 00:00:00.000' or AccountsLedger_ValueDate>GetDate())
and AccountsLedger_CompanyID=@CompanyID
Group By AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid

------------Unclear Balance Fetch [For Segment]
Insert Into #TbOther(Customerid,Other,Balnance)
Select AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid,
sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))
From Trans_Accountsledger
Where AccountsLedger_Mainaccountid in ('SYSTM00001','SYSTM00002','SYSTM00003')
and AccountsLedger_FinYear=@Finyear
and AccountsLedger_SubAccountID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=0)
AND AccountsLedger_TransactionType='Cash_Bank'
and AccountsLedger_ExchangeSegmentID=@SegmentID
AND AccountsLedger_TransactionReferenceID like 'R%'
AND (AccountsLedger_ValueDate is null or  AccountsLedger_ValueDate='1900-01-01 00:00:00.000' or AccountsLedger_ValueDate>GetDate())
and AccountsLedger_CompanyID=@CompanyID
Group By AccountsLedger_SubAccountID,AccountsLedger_Mainaccountid

----------Balnces Fetch
Update #TabPayout Set Sys1UnClearBaln =Balnance,
					  Sys1EffectBaln=isnull(Sys1EffectBaln,0)-isnull(Balnance,0)
From #TbOther Where Other='SYSTM00001' and ClientId =Customerid and CntClientType='R'

Update #TabPayout Set Sys2UnClearBaln =Balnance,
					  Sys2EffectBaln=isnull(Sys2EffectBaln,0)-isnull(Balnance,0)
From #TbOther  Where Other='SYSTM00002' and ClientId =Customerid and CntClientType='R'

Update #TabPayout Set Sys3UnClearBaln =Balnance,
					  Sys3EffectBaln=isnull(Sys3EffectBaln,0)-isnull(Balnance,0)
From #TbOther Where Other='SYSTM00003' and ClientId =Customerid and CntClientType='R'

-----------------------------------------------Collateral [Margin and Hldbk] Begin
----[Consolidated Across CM-Segments]
Insert Into #TranSaction (Quantity,CustomerID,ProductSeriesID,ISIN,SegmentID,SourceSegmentId,SettlementNumberS,SettlementNumberT)
Select isnull(DematTransactions_Quantity,0),DematTransactions_CustomerID,DematTransactions_ProductSeriesID,DematTransactions_ISIN,
DematTransactions_SegmentID,DematTransactions_SourceSegmentId,DematTransactions_SettlementNumberS,DematTransactions_SettlementNumberT
From Trans_DematTransactions
Where DematTransactions_FinYear=@FinYear
and (DematTransactions_SettlementNumberS in ('HLDBK','MARGIN') or DematTransactions_SettlementNumberT in ('HLDBK','MARGIN'))
and (DematTransactions_SegmentID in (Select CmSegment From #TbCmSegment) or DematTransactions_SourceSegmentId  in (Select CmSegment From #TbCmSegment))
and DematTransactions_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=1)
and DematTransactions_CompanyID=@CompanyID

----[For Segments]
Insert Into #TranSaction (Quantity,CustomerID,ProductSeriesID,ISIN,SegmentID,SourceSegmentId,SettlementNumberS,SettlementNumberT)
Select isnull(DematTransactions_Quantity,0),DematTransactions_CustomerID,DematTransactions_ProductSeriesID,DematTransactions_ISIN,
DematTransactions_SegmentID,DematTransactions_SourceSegmentId,DematTransactions_SettlementNumberS,DematTransactions_SettlementNumberT
From Trans_DematTransactions
Where DematTransactions_FinYear=@FinYear
and (DematTransactions_SettlementNumberS in ('HLDBK','MARGIN') or DematTransactions_SettlementNumberT in ('HLDBK','MARGIN'))
and (DematTransactions_SegmentID=@SegmentID or DematTransactions_SourceSegmentId=@SegmentID)
and DematTransactions_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=0)
and DematTransactions_CompanyID=@CompanyID

----------------------IF SOURCE SEGMENT IS NOT NULL		
 Select * into #TempTranSaction from 
(Select * From #TranSaction where SourceSegmentId is not null) as tab 

 Delete From #TranSaction where SourceSegmentId is not null

-----------------------SPLIT RECORDS FOR SOURCE SEGMENT ID
Insert into #TranSaction(Quantity,CustomerID,ProductSeriesID,SegmentID,SettlementNumberS,SettlementNumberT,SourceSegmentId,ISIN)
select Quantity,CustomerID,ProductSeriesID,SegmentID,null,SettlementNumberT,null,ISIN
From #TempTranSaction Where SourceSegmentId<>SegmentID


Insert into #TranSaction(Quantity,CustomerID,ProductSeriesID,SegmentID,SettlementNumberS,SettlementNumberT,SourceSegmentId,ISIN)
Select Quantity,CustomerID,ProductSeriesID,SourceSegmentId,SettlementNumberS,null,null,ISIN
From #TempTranSaction Where SourceSegmentId<>SegmentID

--------For Margin
Insert Into #Collateral(Client,Product,Qty)

Select case when CustomerIDS is null then CustomerIDT else CustomerIDS end
,case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end
,(ISNULL(QuantityT,0.0)-ISNULL(QuantityS,0.0))
From

(Select sum(isnull(Quantity,0)) as QuantityS,CustomerID as CustomerIDS,ProductSeriesID as ProductSeriesIDS
From #TranSaction where SettlementNumberS='MARGIN' Group By CustomerID,ProductSeriesID) as TABS
Full Outer Join
(Select sum(isnull(Quantity,0)) as QuantityT,CustomerID as CustomerIDT,ProductSeriesID as ProductSeriesIDT
From #TranSaction where SettlementNumberT='MARGIN' Group By CustomerID,ProductSeriesID) as TABT

on(CustomerIDS=CustomerIDT and ProductSeriesIDS=ProductSeriesIDT)

--------For Hldbk
Insert Into #Collateral(Client,Product,Qty)

Select case when CustomerIDS is null then CustomerIDT else CustomerIDS end
,case when ProductSeriesIDS is null then ProductSeriesIDT else ProductSeriesIDS end
,(ISNULL(QuantityT,0.0)-ISNULL(QuantityS,0.0))
From

(Select sum(isnull(Quantity,0)) as QuantityS,CustomerID as CustomerIDS,ProductSeriesID as ProductSeriesIDS
From #TranSaction where SettlementNumberS='HLDBK' Group By CustomerID,ProductSeriesID) as TABS
Full Outer Join
(Select sum(isnull(Quantity,0)) as QuantityT,CustomerID as CustomerIDT,ProductSeriesID as ProductSeriesIDT
From #TranSaction where SettlementNumberT='HLDBK' Group By CustomerID,ProductSeriesID) as TABT

on(CustomerIDS=CustomerIDT and ProductSeriesIDS=ProductSeriesIDT)

Delete From #Collateral Where isnull(Qty,0)<=0
-----------------------------------------------Collateral [Margin and Hldbk] End
----------------------------------------------Pending Purchase and Sales Fetch Begin
------------Sett No. Fetch
insert into #SetNo(SetNo,SetType)
select Distinct rtrim(Settlements_Number),rtrim(Settlements_TypeSuffix)
from Master_Settlements
where Settlements_ExchangeSegmentID in (1,4)
and Settlements_StartDateTime<=cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime)
and Settlements_FundsPayin>=DATEADD(day, -7, cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime)) 

-------All Data Fetch [Consolidated Across CM-Segments]
Insert Into #Pndg(Sales,Purchase,Customer,Prdid,SettlementNo,PndType)
Select 
		sum(
			 (isnull(DematPosition_QtyToReceive,0)-
			 (isnull(DematPosition_QtyReceived,0)-(isnull(DematPosition_AuctionCFQty,0)+isnull(DematPosition_AuctionCFQtyForOutGoing,0)))
			 )
		   ) 
		,sum(
			  isnull(DematPosition_QtyToDeliver,0)-
			 (isnull(DematPosition_QtyDelivered,0)-isnull(DematPosition_AuctionCFQty,0))
			) 
		,DematPosition_CustomerID
		,DematPosition_ProductSeriesID
		,DematPosition_SettlementNumber+DematPosition_SettlementType,'N'
From Trans_DematPosition,#SetNo
where DematPosition_SettlementNumber=SetNo
and DematPosition_SettlementType=SetType
and DematPosition_Finyear=@Finyear
and DematPosition_CustomerID like 'CL%'
and DematPosition_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=1)
and DematPosition_Segmentid in (Select CmSegment From #TbCmSegment)
and DematPosition_companyid=@Companyid
Group By DematPosition_CustomerID,DematPosition_ProductSeriesID,DematPosition_SettlementNumber,DematPosition_SettlementType

-------All Data Fetch [For Segments]
Insert Into #Pndg(Sales,Purchase,Customer,Prdid,SettlementNo,PndType)
Select 
		sum(
			 (isnull(DematPosition_QtyToReceive,0)-
			 (isnull(DematPosition_QtyReceived,0)-(isnull(DematPosition_AuctionCFQty,0)+isnull(DematPosition_AuctionCFQtyForOutGoing,0)))
			 )
		   ) 
		,sum(
			  isnull(DematPosition_QtyToDeliver,0)-
			 (isnull(DematPosition_QtyDelivered,0)-isnull(DematPosition_AuctionCFQty,0))
			) 
		,DematPosition_CustomerID
		,DematPosition_ProductSeriesID
		,DematPosition_SettlementNumber+DematPosition_SettlementType,'N'
From Trans_DematPosition,#SetNo
where DematPosition_SettlementNumber=SetNo
and DematPosition_SettlementType=SetType
and DematPosition_Finyear=@Finyear
and DematPosition_CustomerID like 'CL%'
and DematPosition_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=0)
and DematPosition_Segmentid=@SegmentID
and DematPosition_companyid=@Companyid
Group By DematPosition_CustomerID,DematPosition_ProductSeriesID,DematPosition_SettlementNumber,DematPosition_SettlementType


Update #Pndg Set Purchase=0 Where isnull(Purchase,0)<>0 and SettlementNo=@PositionOf

Insert Into #Pndg(Sales,Purchase,Customer,Prdid,PndType)
Select Sum(Isnull(Sales,0)),Sum(isnull(Purchase,0)),Customer,Prdid,'Y' 
From #Pndg Group By Customer,Prdid

Delete From #Pndg Where PndType='N'
----------------------------------------------Pending Purchase and Sales Fetch End
----------All Product Fetch
Truncate Table #TbOther
Insert Into #TbOther(Other)
Select Distinct ProdcutId  From  #TabPayout
Union
Select Distinct Product From  #Collateral
Union
Select Distinct Prdid From  #Pndg

---------------------------CLose Price
Update #TbOther set CloseRate =DailyStat_Close
from 
Trans_DailyStatistics,
				(
				select MAX(DailyStat_DateTime) AS DATE,DailyStat_ProductSeriesID AS PRDID
				from Trans_DailyStatistics,#TbOther
				where DailyStat_DateTime<=GetDate()
				AND DailyStat_ProductSeriesID=Other
				GROUP BY DailyStat_ProductSeriesID
				) AS TB
WHERE DailyStat_ProductSeriesID=Other
AND PRDID=Other AND DailyStat_ProductSeriesID=PRDID
AND DailyStat_DateTime=DATE

---------------------------Hair Cut
update #TbOther set VarMargin =DailyVar_AppMargin
from 
Trans_DailyVar,
				(
				select MAX(DailyVar_Date) AS DATE,DailyVar_ProductSeriesID AS PRDID
				from Trans_DailyVar,#TbOther
				where DailyVar_Date<=GetDate()
				AND DailyVar_ProductSeriesID=Other
				GROUP BY DailyVar_ProductSeriesID
				) AS TB
WHERE DailyVar_ProductSeriesID=Other
AND PRDID=Other AND DailyVar_ProductSeriesID=PRDID
AND DailyVar_Date=DATE

--------Cllateral Value Calculation and Main Tab Update
Update #Collateral Set ClosePrice =CloseRate,HairCut =VarMargin From #TbOther Where Other=Product 
update #Collateral set StocksValueWithoutHairCut =(isnull(ClosePrice,0)*isnull(Qty ,0)),
					   StocksValueWithHairCut =(isnull(ClosePrice,0)*isnull(Qty,0))*(100-isnull(HairCut,0))/100

Update #TabPayout Set MrgnHldbkValue=WithOutHairCut,MrgnHldbkValueWithHaircut=WithHairCut,MrgnHldbkEffectBaln=WithHairCut From 
(Select Sum(isnull(StocksValueWithHairCut,0)) as WithHairCut,Sum(isnull(StocksValueWithoutHairCut,0)) as WithOutHairCut,Client
 From #Collateral Group By Client) as dd			   
Where ClientId =Client and CntClientType='R'

--------Pending Pur-Sales and Main Tab Update
Update #Pndg Set ClosePrice =CloseRate,HairCut =VarMargin From #TbOther Where Other=Prdid  
update #Pndg set PurchaseWithOutHaircut =(isnull(ClosePrice,0)*isnull(Purchase  ,0)),
				 PurchaseWithHaircut =(isnull(ClosePrice,0)*isnull(Purchase,0))*(100-isnull(HairCut,0))/100,
				 SalesWithOutHaircut =(isnull(ClosePrice,0)*isnull(Sales   ,0)),
				 SalesWithHaircut =(isnull(ClosePrice,0)*isnull(Sales ,0))*(100+isnull(HairCut,0))/100
					    
Update #TabPayout Set PurchaseValue=PurWithOutHairCut,PurchaseWithHaircut=PurWithHairCut,PurchaseEffectBaln=PurWithHairCut,
					  SalesValue =SaleWithOutHairCut,SalesWithHaircut =SaleWithHairCut,SalesEffectBaln =SaleWithHairCut
From 
(Select Sum(isnull(PurchaseWithHaircut,0)) as PurWithHairCut,Sum(isnull(PurchaseWithOutHaircut,0)) as PurWithOutHairCut,Customer,
 Sum(isnull(SalesWithHaircut ,0)) as SaleWithHairCut,Sum(isnull(SalesWithOutHaircut ,0)) as SaleWithOutHairCut
 From #Pndg Group By Customer) as dd			   
Where ClientId =Customer and CntClientType='R'

----------Total Baln Cal
Update #TabPayout Set TotalValue=Baln1,TotalMiddle=Baln2,TotalEffectBaln=Baln3
From
(Select 
(isnull(Sys1LedgerBaln,0)+isnull(Sys2LedgerBaln,0)+isnull(Sys3LedgerBaln,0)+isnull(MrgnHldbkValue,0)+isnull(PurchaseValue,0)-isnull(SalesValue,0)) as Baln1,
(isnull(Sys1UnClearBaln ,0)+isnull(Sys2UnClearBaln ,0)+isnull(Sys3UnClearBaln ,0)+isnull(MrgnHldbkValueWithHaircut ,0)+isnull(PurchaseWithHaircut ,0)-isnull(SalesWithHaircut ,0)) as Baln2,
(isnull(Sys1EffectBaln ,0)+isnull(Sys2EffectBaln ,0)+isnull(Sys3EffectBaln ,0)+isnull(MrgnHldbkEffectBaln ,0)+isnull(PurchaseEffectBaln ,0)-isnull(SalesEffectBaln ,0)) as Baln3,
ClientId as Client
From #TabPayout) as kk
Where ClientId =Client and CntClientType='R'


-----------------AppMargin Cal
-----[Consolidated Across CM-Segments]
Update #TabPayout set AppMargin=result,
					  AppMarginWithmarkUp=case when isnull(DlvProfile_HldApplicableMarginMarkUp,0)=0 then result else isnull(result,0)*(DlvProfile_HldApplicableMarginMarkUp/100) end,
					  AppMarginEffectBaln=case when isnull(DlvProfile_HldApplicableMarginMarkUp,0)=0 then (-1)*isnull(result,0) else (-1)*(isnull(result,0)+(isnull(result,0)*(DlvProfile_HldApplicableMarginMarkUp/100))) end 
From 
(Select Sum(isnull(CMMarginSummary_TotalMargin,0)) as result,
CMMarginSummary_CustomerID
from Trans_CMMarginSummary
where CMMarginSummary_Date=(Select MAX(CMMarginSummary_Date) 
							from Trans_CMMarginSummary
							where CMMarginSummary_Date<=cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime)
							and CMMarginSummary_ExchangesegmentId in (Select CmSegment From #TbCmSegment)
							AND CMMarginSummary_CalculationType='Exch'
							AND CMMarginSummary_CompanyID=@Companyid)
AND CMMarginSummary_CalculationType='Exch'
AND CMMarginSummary_ExchangesegmentId in (Select CmSegment From #TbCmSegment)
AND CMMarginSummary_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=1)
AND CMMarginSummary_CompanyID=@Companyid
GROUP BY CMMarginSummary_CustomerID
) as kt
where CMMarginSummary_CustomerID=ClientId 
and  DlvProfile_HldConsolidateAllSegmentBalance=1 and CntClientType='R'

-----[For Segment]
Update #TabPayout set AppMargin=result,
					  AppMarginWithmarkUp=case when isnull(DlvProfile_HldApplicableMarginMarkUp,0)=0 then result else isnull(result,0)*(DlvProfile_HldApplicableMarginMarkUp/100) end,
					  AppMarginEffectBaln=case when isnull(DlvProfile_HldApplicableMarginMarkUp,0)=0 then (-1)*isnull(result,0) else (-1)*(isnull(result,0)+(isnull(result,0)*(DlvProfile_HldApplicableMarginMarkUp/100))) end 
From 
(Select Sum(isnull(CMMarginSummary_TotalMargin,0)) as result,
CMMarginSummary_CustomerID
from Trans_CMMarginSummary
where CMMarginSummary_Date=(Select MAX(CMMarginSummary_Date) 
							from Trans_CMMarginSummary
							where CMMarginSummary_Date<=cast(DATEADD(dd, 0, DATEDIFF(dd, 0,getdate())) as datetime)
							and CMMarginSummary_ExchangesegmentId=@SegmentID
							AND CMMarginSummary_CalculationType='Exch'
							AND CMMarginSummary_CompanyID=@Companyid)
AND CMMarginSummary_CalculationType='Exch'
AND CMMarginSummary_ExchangesegmentId=@SegmentID
AND CMMarginSummary_CustomerID in (Select Distinct ClientId from #TabPayout Where DlvProfile_HldConsolidateAllSegmentBalance=0)
AND CMMarginSummary_CompanyID=@Companyid
GROUP BY CMMarginSummary_CustomerID
) as kt
where CMMarginSummary_CustomerID=ClientId 
and  DlvProfile_HldConsolidateAllSegmentBalance=0 and CntClientType='R'

------------Net Worth Calculation
Update #TabPayout Set NetWorth=isnull(TotalEffectBaln,0)+isnull(AppMarginEffectBaln,0) Where CntClientType='R'
----------------If Ledger Balnce is Credit
Update #TabPayout Set ConsiderHoldbkRule='N' Where TxtBoxEditableOrNot ='Y' and isnull(Sys1LedgerBaln,0)>=0
and DlvProfile_OutgoingDeliveries in (2,3,4,6) and CntClientType='R'

Update #TabPayout Set ConsiderHoldbkRule='N' Where TxtBoxEditableOrNot ='Y' and isnull(Sys1EffectBaln,0)>=0
and DlvProfile_OutgoingDeliveries=1 and CntClientType='R'

-----------Transfer If Profile Outgoing Deliveries :[Always Deliver To Client]
Update #TabPayout Set ConsiderHoldbkRule='N' Where  DlvProfile_OutgoingDeliveries=2 and TxtBoxEditableOrNot ='Y' and CntClientType='R'
-----------Transfer If Profile Outgoing Deliveries :[Always Transfer To Margin A/c]
Update #TabPayout Set TransferAcId=DlvProfile_DesignatedBenAccount,ConsiderHoldbkRule='N' Where  DlvProfile_OutgoingDeliveries=3 and TxtBoxEditableOrNot ='Y' and CntClientType='R'
-----------Transfer If Profile Outgoing Deliveries :[Always Transfer To Holdback A/c]
Update #TabPayout Set TransferAcId=DlvProfile_DesignatedBenAccount,ConsiderHoldbkRule='N' Where  DlvProfile_OutgoingDeliveries=4 and TxtBoxEditableOrNot ='Y' and CntClientType='R'

-----------Transfer If Profile [Holdback Entire Delivery is Checked]
Update #TabPayout Set ConsiderHoldbkRule='N' Where  DlvProfile_HoldbackEntireDeliveries=1 and TxtBoxEditableOrNot ='Y' and CntClientType='R'

--------------Value Of Shares To Deliver [Per Share]
Update #TabPayout Set ToDeliverValue=(isnull(ToDeliver,0)*isnull(CloseRate,0))
From #TbOther Where Other=ProdcutId and CntClientType='R'
--------------Value Of Shares To Deliver [Per Client]
Update #TabPayout Set  SumToDeliverValue=ToDeliverValue1 From
(Select Sum(Isnull(ToDeliverValue,0)) as ToDeliverValue1,ClientId as Client From #TabPayout Group By ClientId) as kk
Where ClientId=Client and CntClientType='R'
 
-------------Markup On Debit Balance [Deliver Only If Clear Ledger Balance]
Update #TabPayout Set Sys1BalnWithMarkUp=Case When isnull(DlvProfile_MarkupOnDebitBalance,0)=0 Then isnull(Sys1EffectBaln,0) Else isnull(Sys1EffectBaln,0)*(1+(isnull(DlvProfile_MarkupOnDebitBalance,0)/100)) End
Where DlvProfile_OutgoingDeliveries=1 and TxtBoxEditableOrNot ='Y' and DlvProfile_HoldbackEntireDeliveries=0 
and ConsiderHoldbkRule is null and CntClientType='R'
-------------Markup On Debit Balance [Deliver If Credit Balance]
Update #TabPayout Set Sys1BalnWithMarkUp=Case When isnull(DlvProfile_MarkupOnDebitBalance,0)=0 Then isnull(Sys1LedgerBaln,0) Else isnull(Sys1LedgerBaln,0)*(1+(isnull(DlvProfile_MarkupOnDebitBalance,0)/100)) End
Where DlvProfile_OutgoingDeliveries=6 and TxtBoxEditableOrNot ='Y' and DlvProfile_HoldbackEntireDeliveries=0 
and ConsiderHoldbkRule is null and CntClientType='R'

---------------Apply Holdback Rule If Debit Balance Is More Than
Update #TabPayout Set DeliveryValueWithPercentageOrMin=isnull(SumToDeliverValue,0)*(isnull(DlvProfile_DebitGrace ,0)/100)
Where  DlvProfile_OutgoingDeliveries in (1,6) and TxtBoxEditableOrNot ='Y'
and isnull(DlvProfile_DebitGrace ,0)<>0 and DlvProfile_HoldbackEntireDeliveries=0
and ConsiderHoldbkRule is null and CntClientType='R'

Update #TabPayout Set DeliveryValueWithPercentageOrMin=
			Case 
			When isnull(DlvProfile_HoldBackMinAmount,0)=0 and isnull(DeliveryValueWithPercentageOrMin,0)<>0 Then DeliveryValueWithPercentageOrMin
			When isnull(DeliveryValueWithPercentageOrMin,0)=0 and isnull(DlvProfile_HoldBackMinAmount,0)<>0 Then DlvProfile_HoldBackMinAmount
			When isnull(DeliveryValueWithPercentageOrMin,0)<>0 and isnull(DlvProfile_HoldBackMinAmount,0)<>0 and isnull(DlvProfile_HoldBackMinAmount,0)>isnull(DeliveryValueWithPercentageOrMin,0) Then isnull(DeliveryValueWithPercentageOrMin,0)
			Else isnull(DlvProfile_HoldBackMinAmount,0)
			End 
Where  DlvProfile_OutgoingDeliveries in (1,6) and TxtBoxEditableOrNot ='Y' and DlvProfile_HoldbackEntireDeliveries=0
and ConsiderHoldbkRule is null and CntClientType='R'

-------------Consider Debit Baln
Update #TabPayout Set ConsiderHoldbkRule=
		Case 
		When isnull(DeliveryValueWithPercentageOrMin,0)<>0 and abs(isnull(DeliveryValueWithPercentageOrMin,0))>abs(isnull(Sys1BalnWithMarkUp,0))  Then 'N'
		Else 'Y'
		End
Where  DlvProfile_OutgoingDeliveries in (1,6) and TxtBoxEditableOrNot ='Y' and DlvProfile_HoldbackEntireDeliveries=0
and ConsiderHoldbkRule is null and CntClientType='R'


------------Remain Share and Give Share
Update  #TabPayout Set RemainShareValue=abs(isnull(Sys1BalnWithMarkUp,0))
					  ,GiveShareValue=(isnull(SumToDeliverValue,0)-abs(isnull(Sys1BalnWithMarkUp,0)))
Where DlvProfile_OutgoingDeliveries in (1,6) and TxtBoxEditableOrNot ='Y' 
and DlvProfile_HoldbackEntireDeliveries=0 and ConsiderHoldbkRule='Y'
and (abs(isnull(SumToDeliverValue,0))>abs(isnull(Sys1BalnWithMarkUp,0))) 
and CntClientType='R'

Update  #TabPayout Set ConsiderHoldbkRule='A'
Where DlvProfile_OutgoingDeliveries in (1,6) and TxtBoxEditableOrNot ='Y' 
and DlvProfile_HoldbackEntireDeliveries=0 and ConsiderHoldbkRule='Y'
and (abs(isnull(SumToDeliverValue,0))<abs(isnull(Sys1BalnWithMarkUp,0)))
and CntClientType='R'

--------------------------------------**********HoldbackRule Apply Begin
Create Table #TbHldbkRule(Client varchar(15),PrdId varchar(30),Qty numeric(28,0),CloseRate numeric(28,6),
						  VarMargin numeric(28,6),ShareValue numeric(28,6),HldType varchar(2),StatusRelease int)

Insert Into #TbHldbkRule(Client,PrdId,Qty,CloseRate,VarMargin,ShareValue,HldType)
Select ClientId ,ProdcutId,ToDeliver,CloseRate,VarMargin,(isnull(ToDeliver,0)*isnull(CloseRate,0)),'1'
From #TabPayout,#TbOther Where ConsiderHoldbkRule='Y'
and ProdcutId=Other 


-----For Order By
Insert Into #TbHldbkRule(Client,PrdId,Qty,CloseRate,VarMargin,ShareValue,HldType,StatusRelease)
Select Client,PrdId,Qty,CloseRate,VarMargin,ShareValue,'2',0
From #TbHldbkRule order by Client asc,VarMargin desc

Delete From #TbHldbkRule Where HldType='1' 
Alter Table #TbHldbkRule Add AutoId int Identity(1,1)


	Declare @Client varchar(15),@PrevClient varchar(15),@GiveShare numeric(28,2),@ShareValue numeric(28,2),
	@PartialRelease Varchar(2)


	---------Loop Begin
	Select @MAXID=max(AutoId) from #TbHldbkRule
	Select @MINID=min(AutoId) from #TbHldbkRule	

	Select @PrevClient='B'
	While @MAXID>=@MINID
	Begin 
		Select @Client=Client,@ShareValue=ShareValue From #TbHldbkRule Where AutoId=@MINID and StatusRelease=0

		if(@Client<>@PrevClient)-------Give Share Fetch
		Begin

			Select @GiveShare=GiveShareValue,@PartialRelease=DlvProfile_NoPartialHoldback  
			From #TabPayout Where ClientId=@Client and ConsiderHoldbkRule='Y'
		End	

		if(@ShareValue>@GiveShare and @PartialRelease=1)-------No-Consider This Qty
		Begin
			Update #TbHldbkRule Set StatusRelease=2 Where AutoId=@MINID and StatusRelease=0
		End		
		if(@ShareValue<=@GiveShare and @PartialRelease=1)-------Consider This Qty
		Begin
			Update #TbHldbkRule Set StatusRelease=1 Where AutoId=@MINID and StatusRelease=0
		End	
		if(@ShareValue<@GiveShare and @PartialRelease=0)-------Split is Needed 
		Begin
				Insert Into #TbHldbkRule(Client,PrdId,Qty,CloseRate,VarMargin,ShareValue,HldType,StatusRelease)
				Select Client,PrdId,(isnull(@GiveShare,0)-isnull(@ShareValue,0))/isnull(CloseRate,1),
				CloseRate,VarMargin,
				isnull(@GiveShare,0)-isnull(@ShareValue,0),
				'3',1
				From #TbHldbkRule Where AutoId=@MINID and StatusRelease=0

				Update #TbHldbkRule Set StatusRelease=1 Where AutoId=@MINID and StatusRelease=0
		End	
		if(@ShareValue>=@GiveShare and @PartialRelease=0)-------Split is Needed 
		Begin
				Update #TbHldbkRule Set StatusRelease=1,ShareValue=@GiveShare,
				Qty=isnull(@GiveShare,0)/isnull(CloseRate,1)
				Where AutoId=@MINID and StatusRelease=0
		End	

		Select @GiveShare=abs(abs(@GiveShare)-abs(@ShareValue))
		Select @MAXID=max(AutoId) From  #TbHldbkRule
		Select @PrevClient=@Client
		Select @MINID=@MINID+1
	End

Update #TabPayout Set GiveShareValue=null Where ConsiderHoldbkRule='Y'
---------Loop End


Update #TabPayout Set ToDeliver=Qty
From #TbHldbkRule Where StatusRelease=1 and Client=ClientId and PrdId=ProdcutId and ConsiderHoldbkRule='Y'

Update #TabPayout Set ConsiderHoldbkRule='A'
From #TbHldbkRule Where StatusRelease=2 and Client=ClientId and PrdId=ProdcutId and ConsiderHoldbkRule='Y'
and CntClientType='R'


Insert Into #TabPayout( ClientId,ProdcutId,ISINNo,ToDeliver,TotalStocks,TxtBoxEditableOrNot,
						Sys1LedgerBaln,Sys1UnClearBaln,Sys1EffectBaln,
						Sys2LedgerBaln,Sys2UnClearBaln,Sys2EffectBaln,
						Sys3LedgerBaln,Sys3UnClearBaln,Sys3EffectBaln,
						MrgnHldbkValue,MrgnHldbkValueWithHaircut,MrgnHldbkEffectBaln,
						PurchaseValue,PurchaseWithHaircut,PurchaseEffectBaln,
						SalesValue,SalesWithHaircut,SalesEffectBaln,
						TotalValue,TotalMiddle,TotalEffectBaln,
						AppMargin,AppMarginWithmarkUp,AppMarginEffectBaln,
						NetWorth,ToDeliverValue,GiveShareValue,ConsiderHoldbkRule)
Select					ClientId,ProdcutId,ISINNo,ToDeliver,TotalStocks,TxtBoxEditableOrNot,
						Sys1LedgerBaln,Sys1UnClearBaln,Sys1EffectBaln,
						Sys2LedgerBaln,Sys2UnClearBaln,Sys2EffectBaln,
						Sys3LedgerBaln,Sys3UnClearBaln,Sys3EffectBaln,
						MrgnHldbkValue,MrgnHldbkValueWithHaircut,MrgnHldbkEffectBaln,
						PurchaseValue,PurchaseWithHaircut,PurchaseEffectBaln,
						SalesValue,SalesWithHaircut,SalesEffectBaln,
						TotalValue,TotalMiddle,TotalEffectBaln,
						AppMargin,AppMarginWithmarkUp,AppMarginEffectBaln,
						NetWorth,ToDeliverValue,GiveShareValue,'Y'
From #TbHldbkRule,#TabPayout  
Where StatusRelease=1 and Client=ClientId and PrdId=ProdcutId and HldType='3' and ConsiderHoldbkRule='Y'


------------------------------------**********HoldbackRule Apply End


--------------------***************-------------Loop For Split Stocks Begin----------------**************-----------------------
		
		Create Table #TabPayoutLoop (AutoId int identity(1,1),Customerid varchar(15),Prdid varchar(30),Isin varchar(30),Position numeric(28,0),GiveStocks numeric(28,0))

		Insert Into #TabPayoutLoop (Customerid,Prdid,Isin,Position)
		Select ClientId,ProdcutId,ISINNo,ToDeliver
		From #TabPayout Where TxtBoxEditableOrNot='Y' and isnull(ToDeliver,0)<>0
		Order By ProdcutId,ISINNo

		Declare @PayoutPrdid varchar(30),@PayoutIsin varchar(30),@PayoutPosition numeric(28,0)
		Declare @StocksPrdid varchar(30),@StocksIsin varchar(30),@Stocks numeric(28,0)

		Select @MAXID=max(AutoId) from #TabPayoutLoop
		Select @MINID=min(AutoId) from #TabPayoutLoop	

		While @MAXID>=@MINID
		Begin 
				------Payout Position Find
				Select @PayoutPrdid=Prdid,@PayoutIsin=Isin,@PayoutPosition=Position From #TabPayoutLoop Where AutoId=@MINID 
				------Stocks Find
				Select @StocksPrdid=Seriesid,@StocksIsin=ISINNumber,@Stocks=Stocks From #TabStocks 
				Where Seriesid=@PayoutPrdid and  ISINNumber=@PayoutIsin

				---------Payout Position Update Begin
				Update #TabPayoutLoop Set GiveStocks=isnull(@PayoutPosition,0) From #TabPayoutLoop Where AutoId=@MINID 
				and isnull(@Stocks,0)>=0 and isnull(@Stocks,0)>=isnull(@PayoutPosition,0)

				Update #TabPayoutLoop Set GiveStocks=isnull(@Stocks,0) From #TabPayoutLoop Where AutoId=@MINID 
				and isnull(@Stocks,0)>=0 and isnull(@Stocks,0)<isnull(@PayoutPosition,0)
				---------Payout Position Update End

				--------Stcoks Update
				Update #TabStocks Set Stocks=Case When (isnull(@Stocks,0)-isnull(@PayoutPosition,0))<0 Then 0 Else (isnull(@Stocks,0)-isnull(@PayoutPosition,0)) End
				From #TabStocks 
				Where Seriesid=@PayoutPrdid and  ISINNumber=@PayoutIsin

				Select @MINID=@MINID+1
		End

--------Mian Table Update 
Update #TabPayout Set Deliverable=isnull(GiveStocks,0) From #TabPayoutLoop
Where Customerid=ClientId and Prdid=ProdcutId and Isin=ISINNo

----------------------***************-------------Loop For Split Stocks End----------------**************-----------------------
-------Give Share
Update #TabPayout Set GiveShareValue=isnull(Deliverable,0)*isnull(CloseRate,0)
From #TbOther
Where isnull(Deliverable,0)<>0 and Other=ProdcutId and  isnull(ConsiderHoldbkRule,'R')<>'A'

--------Give Sum Share Value
Update #TabPayout Set  SumGiveShareValue=ToDeliverValue1 From
(Select Sum(Isnull(GiveShareValue,0)) as ToDeliverValue1,ClientId as Client From #TabPayout Group By ClientId) as kk
Where ClientId=Client 



-----------Scrip Fetch
Update #TabPayout Set ScripName=(isnull(Equity_TickerSymbol,''))+' '+(isnull(Equity_Series,ISNULL('['+Equity_TICKERCODE+']','')))
From master_equity where Equity_SeriesID=ProdcutId 

-----------DP
Update #TabPayout set ClientType=0----'DP' 
From Tbl_master_contactdpdetails,tbl_master_companyexchange 
Where exch_membershiptype in ('NSDL','CDSL')
AND dpd_dpcode=exch_tmcode AND dpd_CNTID=ClientId 
			
-----------POA
Update #TabPayout set ClientType=1---'POA' 
From Tbl_master_contactdpdetails 
Where ClientId =dpd_cntID and dpd_POA=1 and ClientType=0

-----------Target ClientId And DP ID Fetch For Client
if(@AccountType<>'[PLDRCTDEL]')   
Begin 
	Update #TabPayout Set   
							TransferAcId =dpd_id,ForAcId='Client',
							AcName=rtrim(replace(dp_dpname,char(160),''))+' ['+rtrim(dpd_clientid)+']' +'['+rtrim(dpd_accounttype)+']',
							TransferAcIdForColor=0---Green
	From tbl_master_contactdpdetails,tbl_master_depositoryparticipants
	Where dpd_CNTID=ClientId and dpd_accounttype='Default' and dpd_dpcode=dp_dpid and CntClientType='R'
	and TransferAcId is null and isnull(Deliverable,0)<>0 and CntClientType='R' and isnull(ConsiderHoldbkRule,'R')<>'A'
End
else
Begin
	Update #TabPayout Set   
							TransferAcId =dpd_id,ForAcId='Client',
							AcName=rtrim(replace(dp_dpname,char(160),''))+' ['+rtrim(dpd_clientid)+']' +'['+rtrim(dpd_accounttype)+']',
							TransferAcIdForColor=0---Green
	From tbl_master_contactdpdetails,tbl_master_depositoryparticipants
	Where dpd_CNTID=ClientId 
	and dpd_accounttype='Default' and dpd_dpcode=dp_dpid and CntClientType='R'
	and TransferAcId is null 
	--and isnull(Deliverable,0)<>0 and CntClientType='R' and isnull(ConsiderHoldbkRule,'R')<>'A'
	
	
End
Update #TabPayout Set   
						TransferAcId =dpd_id,ForAcId='Client',
						AcName=rtrim(replace(dp_dpname,char(160),''))+' ['+rtrim(dpd_clientid)+']' +'['+rtrim(dpd_accounttype)+']',
						TransferAcIdForColor=3---Black
From tbl_master_contactdpdetails,tbl_master_depositoryparticipants
Where dpd_CNTID=ClientId and AcName is null and dpd_dpcode=dp_dpid and CntClientType='R'
and TransferAcId is null and isnull(Deliverable,0)<>0 and CntClientType='R' and isnull(ConsiderHoldbkRule,'R')<>'A'

--------For Margin or Holdback
Update #TabPayout Set AcName=rtrim(Dpaccounts_Shortname),SumGiveShareValue=0,
					  ForAcId=Case When rtrim(Dpaccounts_AccountType)='[MRGIN]' Then 'Margin' Else 'Hldbk' End,
					  TransferAcIdForColor=Case When rtrim(Dpaccounts_AccountType)='[MRGIN]' Then 1 Else 2 End---1=Red and 2=Blue
From Master_Dpaccounts Where AcName is null and CntClientType='R'
and Dpaccounts_id=TransferAcId and isnull(Deliverable,0)<>0 and isnull(ConsiderHoldbkRule,'R')<>'A' and isnull(DpAccounts_IsClosed,'NULL') <> 'C'

--------For Self
Update #TabPayout Set AcName=rtrim(Dpaccounts_Shortname),TransferAcIdForColor=3,ForAcId='Client',TransferAcId=Dpaccounts_id,SumGiveShareValue=0
From Master_Dpaccounts Where AcName is null 
and isnull(Deliverable,0)<>0 and CntClientType='P' 
and Dpaccounts_AccountType='[Own]' and isnull(ConsiderHoldbkRule,'R')<>'A' and isnull(DpAccounts_IsClosed,'NULL') <> 'C'

--------For Margin or Holdback[Same Segment]
Update #TabPayout Set AcName=rtrim(Dpaccounts_Shortname),TransferAcId=Dpaccounts_id,SumGiveShareValue=0,
					  TransferAcIdForColor=2 ---Blue
					  ,ForAcId='Hldbk'
From Master_Dpaccounts Where AcName is null and CntClientType='R'
and isnull(Deliverable,0)<>0 
and rtrim(Dpaccounts_AccountType)='[HOLDBK]'  and dpaccounts_exchangesegmentid=@Segmentid and isnull(DpAccounts_IsClosed,'NULL') <> 'C'

--------For Margin or Holdback[Other Segment]
Update #TabPayout Set AcName=rtrim(Dpaccounts_Shortname),TransferAcId=Dpaccounts_id,SumGiveShareValue=0,
					  TransferAcIdForColor=2 ---Blue
					  ,ForAcId='Hldbk'
From Master_Dpaccounts Where AcName is null and CntClientType='R' and isnull(DpAccounts_IsClosed,'NULL') <> 'C'
and isnull(Deliverable,0)<>0 
and rtrim(Dpaccounts_AccountType)='[HOLDBK]'  
and dpaccounts_exchangesegmentid=(Select exch_internalid from tbl_master_companyexchange
								  where exch_segmentid='CM' and exch_exchid='EXN0000002' and exch_compid=@CompanyID)

if(@AccountType ='[PLDRCTDEL]')
Begin
	Update #TabPayout Set   
							TransferAcId =dpd_id,ForAcId='Client',
							AcName=rtrim(replace(dp_dpname,char(160),''))+' ['+rtrim(dpd_clientid)+']' +'['+rtrim(dpd_accounttype)+']',
							TransferAcIdForColor=0---Green
	
	From tbl_master_contactdpdetails,tbl_master_depositoryparticipants,#TabPayout
	where ForAcId is null
	
	Update #TabPayout Set Deliverable=ToDeliver
	Update #TabPayout set TotalStocks=ToDeliver ,TxtBoxEditableOrNot='Y' where TotalStocks is null
End
--------------------Respect To Transfer Type

----------------Select All Record
Select @Sql='
Select 
ClientName+''[''+Ucc+'']'' as Client,ClientName,Ucc,BranchCode,ClientId,ProdcutId,ScripName,ISINNo,TotalStocks ,
ToDeliver,Deliverable,TransferAcId,
isnull(AcName,''No Stocks For This Share In This Account/Settlement'') as AcName,
isnull(ClientType,2) as ClientType,
Case When isnull(Deliverable,0)<>0 Then TxtBoxEditableOrNot Else ''N'' End as TxtBoxEditableOrNot,CntClientType,
isnull(TransferAcIdForColor,3) as TransferAcIdForColor,ForAcId,
ProfileName,
CASE WHEN ISNULL(SumToDeliverValue  ,0)=0 THEN ''&nbsp;'' WHEN SumToDeliverValue  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SumToDeliverValue  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(SumToDeliverValue   AS VARCHAR(8000)),''N'') END AS ToDeliverValue,
CASE WHEN ISNULL(SumGiveShareValue  ,0)=0 THEN ''&nbsp;'' WHEN SumGiveShareValue  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SumGiveShareValue  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(SumGiveShareValue   AS VARCHAR(8000)),''N'') END AS GiveShareValue,
CASE WHEN ISNULL(Sys1LedgerBaln ,0)=0 THEN ''&nbsp;'' WHEN Sys1LedgerBaln <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys1LedgerBaln ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys1LedgerBaln  AS VARCHAR(8000)),''N'') END AS Sys1LedgerBaln  ,
CASE WHEN ISNULL(Sys1UnClearBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys1UnClearBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys1UnClearBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys1UnClearBaln   AS VARCHAR(8000)),''N'') END AS Sys1UnClearBaln   ,
CASE WHEN ISNULL(Sys1EffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys1EffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys1EffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys1EffectBaln   AS VARCHAR(8000)),''N'') END AS Sys1EffectBaln   ,
CASE WHEN ISNULL(Sys2LedgerBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys2LedgerBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys2LedgerBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys2LedgerBaln  AS VARCHAR(8000)),''N'') END AS Sys2LedgerBaln   ,
CASE WHEN ISNULL(Sys2UnClearBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys2UnClearBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys2UnClearBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys2UnClearBaln   AS VARCHAR(8000)),''N'') END AS Sys2UnClearBaln   ,
CASE WHEN ISNULL(Sys2EffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys2EffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys2EffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys2EffectBaln   AS VARCHAR(8000)),''N'') END AS Sys2EffectBaln   ,
CASE WHEN ISNULL(Sys3LedgerBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys3LedgerBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys3LedgerBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys3LedgerBaln   AS VARCHAR(8000)),''N'') END AS Sys3LedgerBaln   ,
CASE WHEN ISNULL(Sys3UnClearBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys3UnClearBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys3UnClearBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys3UnClearBaln   AS VARCHAR(8000)),''N'') END AS Sys3UnClearBaln   ,
CASE WHEN ISNULL(Sys3EffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN Sys3EffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(Sys3EffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(Sys3EffectBaln   AS VARCHAR(8000)),''N'') END AS Sys3EffectBaln   ,
CASE WHEN ISNULL(MrgnHldbkValue  ,0)=0 THEN ''&nbsp;'' WHEN MrgnHldbkValue  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MrgnHldbkValue  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(MrgnHldbkValue   AS VARCHAR(8000)),''N'') END AS MrgnHldbkValue   ,
CASE WHEN ISNULL(MrgnHldbkValueWithHaircut  ,0)=0 THEN ''&nbsp;'' WHEN MrgnHldbkValueWithHaircut  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MrgnHldbkValueWithHaircut  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(MrgnHldbkValueWithHaircut   AS VARCHAR(8000)),''N'') END AS MrgnHldbkValueWithHaircut   ,
CASE WHEN ISNULL(MrgnHldbkEffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN MrgnHldbkEffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MrgnHldbkEffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(MrgnHldbkEffectBaln   AS VARCHAR(8000)),''N'') END AS MrgnHldbkEffectBaln   ,
CASE WHEN ISNULL(PurchaseValue  ,0)=0 THEN ''&nbsp;'' WHEN PurchaseValue  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PurchaseValue  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(PurchaseValue   AS VARCHAR(8000)),''N'') END AS PurchaseValue   ,
CASE WHEN ISNULL(PurchaseWithHaircut  ,0)=0 THEN ''&nbsp;'' WHEN PurchaseWithHaircut  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PurchaseWithHaircut  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(PurchaseWithHaircut   AS VARCHAR(8000)),''N'') END AS PurchaseWithHaircut   ,
CASE WHEN ISNULL(PurchaseEffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN PurchaseEffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PurchaseEffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(PurchaseEffectBaln   AS VARCHAR(8000)),''N'') END AS PurchaseEffectBaln ,
CASE WHEN ISNULL(SalesValue  ,0)=0 THEN ''&nbsp;'' WHEN SalesValue  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SalesValue  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(SalesValue   AS VARCHAR(8000)),''N'') END AS SalesValue   ,
CASE WHEN ISNULL(SalesWithHaircut  ,0)=0 THEN ''&nbsp;'' WHEN SalesWithHaircut  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SalesWithHaircut  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(SalesWithHaircut   AS VARCHAR(8000)),''N'') END AS SalesWithHaircut   ,
CASE WHEN ISNULL(SalesEffectBaln  ,0)=0 THEN ''&nbsp;'' WHEN SalesEffectBaln  <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SalesEffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(SalesEffectBaln   AS VARCHAR(8000)),''N'') END AS SalesEffectBaln   ,
CASE WHEN ISNULL(TotalValue,0)=0 THEN ''&nbsp;'' WHEN TotalValue <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(TotalValue) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(TotalValue AS VARCHAR(8000)),''N'') END AS TotalValue  ,
CASE WHEN ISNULL(TotalMiddle,0)=0 THEN ''&nbsp;'' WHEN TotalMiddle <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(TotalMiddle) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(TotalMiddle  AS VARCHAR(8000)),''N'') END AS TotalMiddle    ,
CASE WHEN ISNULL(TotalEffectBaln,0)=0 THEN ''&nbsp;'' WHEN TotalEffectBaln <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(TotalEffectBaln  ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(TotalEffectBaln AS VARCHAR(8000)),''N'') END AS TotalEffectBaln ,
CASE WHEN ISNULL(AppMargin,0)=0 THEN ''&nbsp;'' WHEN AppMargin   <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AppMargin) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(AppMargin AS VARCHAR(8000)),''N'') END AS AppMargin    ,
CASE WHEN ISNULL(AppMarginWithmarkUp,0)=0 THEN ''&nbsp;'' WHEN AppMarginWithmarkUp   <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AppMarginWithmarkUp) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(AppMarginWithmarkUp AS VARCHAR(8000)),''N'') END AS AppMarginWithmarkUp,
CASE WHEN ISNULL(AppMarginEffectBaln,0)=0 THEN ''&nbsp;'' WHEN AppMarginEffectBaln   <0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AppMarginEffectBaln   ) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(AppMarginEffectBaln AS VARCHAR(8000)),''N'') END AS AppMarginEffectBaln ,
CASE WHEN ISNULL(NetWorth ,0)=0 THEN ''&nbsp;'' WHEN NetWorth<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(NetWorth) AS VARCHAR(8000)),''N'')  ELSE dbo.fn_FormatNumber(CAST(NetWorth AS VARCHAR(8000)),''N'') END AS NetWorth
From #TabPayout '
If @TransferType='HoldBack'
Begin
	Select @Sql=@Sql+ ' Where ForAcId=''Hldbk'''
End
If @TransferType='Margin'
Begin
	Select @Sql=@Sql+ ' Where ForAcId=''Margin'''
End
If @TransferType='Clients'
Begin
	Select @Sql=@Sql+ ' Where ForAcId=''Client'''
End
Select @Sql=@Sql+ ' Order By '
If @OrderBy='1'
Begin
	Select @Sql=@Sql+ 'BranchCode,ClientName'
End
If @OrderBy='2'
Begin
	Select @Sql=@Sql+ 'ClientName,ScripName'
End
If @OrderBy='3'
Begin
	Select @Sql=@Sql+ 'ScripName,ClientName'
End
exec(@Sql)
---------------------Table Drop
Drop Table #TabPayout
Drop Table #TabStocks
Drop Table #TabPayoutLoop
Drop Table #TempTranSaction
Drop Table #TranSaction
Drop Table #TbHldbkRule
Drop Table #TbCmSegment
Drop Table #TbOther
Drop Table #Collateral
Drop Table #Pndg
Drop Table #SetNo  
Drop Table #DpDebit
Drop Table #TBClient
End



