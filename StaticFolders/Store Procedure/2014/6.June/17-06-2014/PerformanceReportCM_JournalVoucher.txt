
ALTER procedure [dbo].[PerformanceReportCM_JournalVoucher]
@companyid Varchar(Max), 
@segment varchar(max),
@fromdate  varchar(50),
@todate  varchar(50),
@clients varchar(max),
@Seriesid varchar(max),
@finyear varchar(50),
@grptype VARCHAR(50),
@rpttype varchar(10),
@PRINTCHK VARCHAR(200),
@clienttype VARCHAR(500),
@closemethod varchar(10),
@jvcreate varchar(20),
@SEGMENTJV VARCHAR(50),
@chkexcludesqr VARCHAR(10),
@chkstt VARCHAR(10),
@ValuationDate varchar(35),
@CreateUser varchar(35),
@ReportView char(1)

--DECLARE @CLI VARCHAR(MAX)
--SELECT @CLI='''CLS0000067'''
----SELECT @CLI='''CallBill~'',''CLG0000083'',''CLG0000090'',''CLS0000067'',''CLS0000457'',''CLS0000563'',''CLS0000565'',''CLG0000083'',''CLG0000090'',''CLS0000067'',''CLS0000457'',''CLS0000563'',''CLS0000565'''
--EXEC [PerformanceReportCM_JournalVoucher] 'COR0000002','24,30','2011-06-28','NA',@CLI,'ALL','2011-2012','BRANCH','1','SHOW',
--							'cnt_clienttype=''Pro Trading''','2','YES','24','UnCHK','UnCHK','2011-06-30','555'
AS
BEGIN--------1ST BEGIN SP
set nocount on

BEGIN TRY


------------------------------------------Notes-------------------------------------------------------------------
/*
Change 1:	Filter Given For Company Selection And Two Type Of Company Filter (1.Only Qty 2.With Valuation)
			When [User Select Company Param '@Company' Will Have Value Like 'CompanyID(s)|Company Filter' 
			e.i ('COR0000002,COR0000001'|'OnlyQty)] Else [Current Company]


*/
------------------------------------------End Notes----------------------------------------------------------------

----Change 1:
if(@rpttype=3)
Begin
	---Old Table
	Create Table #TabClosing(GROUPID VARCHAR(50),GRPNAME VARCHAR(200),
	CUSTOMERID VARCHAR(15),CLIENTNAME VARCHAR(200),UCC VARCHAR(20),
	MASTERPRODUCTID VARCHAR(50),PRODUCTNAME VARCHAR(200),PRODUCTID VARCHAR(50),
	CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),AVGCOST NUMERIC(28,4),CLOSEPRICE NUMERIC(28,4),
	MKTVALUE NUMERIC(28,2),PLMKTVALUE NUMERIC(28,2),PL NUMERIC(28,2),
	METHODCLOSEPRICE NUMERIC(28,4),METHODCLOSEVALUE NUMERIC(28,2),STATUSORDER int,CompanyID Varchar(12),CompanyName Varchar(1000))
	
	--Temprarily Store Data For Specific Company
	CREATE TABLE #TAB_CompanyFilter 
	(CUSTOMERID VARCHAR(50),DATE DATETIME,CLIENTNAME VARCHAR(500),UCC VARCHAR(50),
	PRODUCTID VARCHAR(50),MASTERPRODUCTID VARCHAR(50),TICKERSYMBOL VARCHAR(50),SERIESANDCODE VARCHAR(50),
	PRODUCTNAME VARCHAR(500),SETTNO VARCHAR(50),BUYQTY NUMERIC(28,6),SELLQTY NUMERIC(28,6),
	RATE NUMERIC(28,6),BRKGTYPE VARCHAR(20),BUYVALUE NUMERIC(28,2),SELLVALUE NUMERIC(28,2),
	SQRQTY NUMERIC(28,2),SQRPL NUMERIC(28,2),STPL NUMERIC(28,2),LTPL NUMERIC(28,2),
	CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),GROUPID VARCHAR(50),GRPNAME VARCHAR(500),
	SEGMENT VARCHAR(10),CLOSEPRICE NUMERIC(28,4),MKTVALUE NUmeric(28,2),
	VALUATIONPL NUMERIC(28,2),AUTOID INT,FLAGSTATUS INT,STSTUSID INT,JVPRODUCTID VARCHAR(50)
	,Pledge varchar(10),Statusorder int,UnitPrice Numeric(14,4),CompanyID Varchar(15),CompanyName Varchar(1000))
	
	---All Companies For one by one Detail Looping
	
	Create Table #DistinctProductSeriesID(AutoID int identity(1,1),ProductSeriesID int)
	
	Declare @IsOnlyQtyOrWithVal Varchar(10)
	Select @IsOnlyQtyOrWithVal=dbo.fnSplit(@companyid,'|',2)
	Select @companyid=dbo.fnSplit(@companyid,'|',1)
	
End

Create Table #DistinctCompany(AutoID int identity(1,1),CompanyID Varchar(15))
Insert into #DistinctCompany(CompanyID)
Select Replace(col,CHAR(10),'') from fnSplitReturnTable(@companyid,',')
Declare @Max_Company int,@Min_Company int,@Max_PSrID int,@Min_PrSrID int,@Sql_CompanyFilter nVarchar(Max),
@SqlDynamicCol_CompanyFilter nVarchar(Max)
Select @Max_Company=COUNT(CompanyID) From #DistinctCompany
Select @Min_Company=1
----End Change 1:

Select @companyid

-----New Adding for Billing Basis
Declare @BillingFromDate Varchar(50),@BillingToDate Varchar(50),@FinYearStartDate DateTime,@CallOfBillingBasis Char(1)
Set @CallOfBillingBasis='N'

If(Substring(@jvcreate,CHARINDEX('~',@jvcreate)+1,8)='CallBill')
Begin
	Set @jvcreate=Substring(@jvcreate,1,CHARINDEX('~',@jvcreate)-1)
	
	Set @CallOfBillingBasis='Y'
	Select @FinYearStartDate=FinYear_StartDate from Master_FinYear Where FinYear_Code=Ltrim(Rtrim(@finyear))

	select @BillingFromDate=min(settlements_startdatetime) from master_settlements 
	where settlements_exchangesegmentid in (1,4,19)
	and settlements_typesuffix not in ('A','D','X','Y','8','9')
	and settlements_startdatetime<@FinYearStartDate
	and settlements_fundspayout>@FinYearStartDate-1
	
	select @BillingToDate=max(settlements_startdatetime) from master_settlements where settlements_exchangesegmentid in (1,4,19)
	aNd settlements_typesuffix not in ('A','D','X','Y','8','9')
	and settlements_fundspayout<=@fromdate
End

		Declare @Date Varchar(35),@VoucherNo varchar(200)
		If @closemethod in ('2','3')
		Begin
			Select @Date=@ValuationDate
		End
		Else 
		Begin
			Select @Date=@fromdate
		End

		IF @todate='NA'
		BEGIN------TO DATE BEGIN
			
				
				CREATE TABLE #TAB1 (	  CUSTOMERID VARCHAR(50),DATE DATETIME,
										  CLIENTNAME VARCHAR(500),UCC VARCHAR(50),
										  PRODUCTID VARCHAR(50),MASTERPRODUCTID VARCHAR(50),
										  TICKERSYMBOL VARCHAR(50),SERIESANDCODE VARCHAR(50),
										  PRODUCTNAME VARCHAR(500),SETTNO VARCHAR(50),
										  BUYQTY NUMERIC(28,6),SELLQTY NUMERIC(28,6),
										  RATE NUMERIC(28,6),BRKGTYPE VARCHAR(20),
										  BUYVALUE NUMERIC(28,2),SELLVALUE NUMERIC(28,2),
										  SQRQTY NUMERIC(28,2),SQRPL NUMERIC(28,2),
										  STPL NUMERIC(28,2),LTPL NUMERIC(28,2),
										  CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),
										  GROUPID VARCHAR(50),GRPNAME VARCHAR(500),
										  SEGMENT VARCHAR(10),
										  CLOSEPRICE NUMERIC(28,2),MKTVALUE NUmeric(28,2),
										  VALUATIONPL NUMERIC(28,2),StOrder int,AucCat varchar(5),
										  UnitPrice Numeric(14,4)
								   )
				CREATE TABLE #TAB  (	  CUSTOMERID VARCHAR(50),DATE DATETIME,
										  CLIENTNAME VARCHAR(500),UCC VARCHAR(50),
										  PRODUCTID VARCHAR(50),MASTERPRODUCTID VARCHAR(50),
										  TICKERSYMBOL VARCHAR(50),SERIESANDCODE VARCHAR(50),
										  PRODUCTNAME VARCHAR(500),SETTNO VARCHAR(50),
										  BUYQTY NUMERIC(28,6),SELLQTY NUMERIC(28,6),
										  RATE NUMERIC(28,6),BRKGTYPE VARCHAR(20),
										  BUYVALUE NUMERIC(28,2),SELLVALUE NUMERIC(28,2),
										  SQRQTY NUMERIC(28,2),SQRPL NUMERIC(28,2),
										  STPL NUMERIC(28,2),LTPL NUMERIC(28,2),
										  CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),
										  GROUPID VARCHAR(50),GRPNAME VARCHAR(500),
										  SEGMENT VARCHAR(10),
										  CLOSEPRICE NUMERIC(28,4),MKTVALUE NUmeric(28,2),
										  VALUATIONPL NUMERIC(28,2),AUTOID INT IDENTITY(1,1),
										  FLAGSTATUS INT,STSTUSID INT,JVPRODUCTID VARCHAR(50)
										  ,Pledge varchar(10),Statusorder int,UnitPrice Numeric(14,4)
										  
								   )
				----------For Jv
				Create Table #TbAucDiffPl(MstPrd varchar(30),Seriesid varchar(30),ProfitLoss numeric(28,2))
				Create Table #VoucherID(Seriesid varchar(30),ProfitLoss numeric(28,2),VoucherNumber varchar(100),ScripName varchar(200),Flag varchar(5))

				Create Table #TbInterSegment(MstPrd varchar(30),Segmentid varchar(30),MainAcId varchar(30),SubAcId varchar(30),AmntDr numeric(28,2),AmntCr numeric(28,2),VoucherNumber varchar(30),ScripName varchar(200),Flag varchar(5))

				DECLARE @sql VARCHAR(MAX),@sql1 VARCHAR(MAX),@sql2 VARCHAR(MAX),@sql3 VARCHAR(MAX),@sql4 VARCHAR(MAX),@sql5  VARCHAR(MAX),@sql21  VARCHAR(MAX)
				SELECT @sql='',@sql1='',@sql2='',@sql3='',@sql4='',@sql5='',@sql21=''

--print @Min_Company
				While(@Min_Company<=@Max_Company)
				Begin
					Select @companyid=CompanyID From #DistinctCompany Where AutoID=@Min_Company
					
					SELECT @sql='SELECT  CNT_UCC,
							(isnull(rtrim(cnt_firstName),'+char(39)+''+char(39)+') +'
										+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_middleName),'+char(39)+''+char(39)+')+'
										+char(39)+' '+char(39)+ '+isnull(rtrim(cnt_lastName),'+char(39)+''+char(39)+')) AS CLIENTNAME,
							ISNULL(products_name,'''') AS productsname,
							(isnull(Equity_TickerSymbol,'''')) AS SYMBOL,isnull(Equity_Series,ISNULL(Equity_TICKERCODE,'''')) AS SYMBOLCODE,
							CUSTOMERID,PRODUCT,SETTNO,BRKGTYPE,CAST(DATE AS DATETIME) AS DATE,products_id,
							BUYQTY,BUYVAL,SELLQTY,SELLVAL,RATE,SEGMENT,'

					if(@grptype='BRANCH')
							BEGIN
								Select @sql=@sql+' branch_id,isnull(rtrim(branch_description),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(branch_code),'+char(39)+''+char(39)+')+'']'''
							END
					ELSE 
						BEGIN
								Select @sql=@sql+' gpm_id,isnull(rtrim(GPM_DESCRIPTION),'+char(39)+''+char(39)+')+''[''+isnull(rtrim(GPM_CODE),'+char(39)+''+char(39)+')+'']'''
						END
					Select @sql=@sql+',33,UnitPrice

							FROM
							(select CUSTOMERID,PRODUCT,SETTNO,BRKGTYPE,DATE,
							case when QTY<0 then ABS(QTY) else null end as BUYQTY,
							case when QTY<0 then ABS(VAL) else null end as BUYVAL,
							case when QTY>0 then QTY else null end as SELLQTY,
							case when QTY>0 then VAL else null end as SELLVAL,
							RATE,SEGMENT,UnitPrice
							 from
							(select 
							 case when exch_exchid=''EXN0000002''  then ''NSE'' 
										 when exch_exchid=''EXB0000001''  then ''BSE'' 
										 when exch_exchid=''EXM0000002''  then ''MCXSX'' 
										 when exch_exchid=''EXA0000001''  then ''Accounts'' 
									ELSE NULL END AS SEGMENT,
							customertrades_customerid AS CUSTOMERID,
							customertrades_productseriesid AS PRODUCT,
							customertrades_unitpricequantity AS QTY,
							customertrades_netvalue AS VAL,
							customertrades_netrateperunit AS RATE,
							customertrades_settlementnumber+''''+customertrades_settlementtype AS SETTNO,
							case when customertrades_brokeragetype=''D'' then ''Dlv'' when customertrades_brokeragetype=''S'' then ''Sqr'' else null end AS BRKGTYPE,
							customertrades_tradedate AS DATE,CustomerTrades_UnitPrice as UnitPrice
							from trans_customertrades,tbl_master_companyexchange where '
							
					SELECT @sql1=' customertrades_customerid IN (select distinct cnt_internalid from tbl_master_contact 
															 where '+@clienttype+'
															 and cnt_internalid in ('+@clients+'))'
					IF @Seriesid<>'ALL'
					BEGIN
						SELECT @sql1=@sql1+' AND customertrades_productseriesid in(select equity_seriesid from master_equity where 
																  equity_productid in('+@Seriesid+'))'
					END
					IF @chkexcludesqr='CHK'
					BEGIN
						SELECT @sql1=@sql1+' AND customertrades_brokeragetype=''D'''
					END
					SELECT @sqL2='
					AND  EXCH_INTERNALID=customertrades_EXCHANGESEGMENT
					AND isnull(EXCH_SEGMENTID,''CM'')=''CM'' AND ISNULL(CUSTOMERTRADES_TRADECATEGORY,''R'') NOT IN (''CFS'',''CFT'',''ARS'',''ART'',''AUC'')'
				
					IF(@CallOfBillingBasis='Y') 
				Begin
					SELECT @sqL2=@sqL2 + ' And customertrades_tradedate Between '''+@BillingFromDate+''' and '''+@BillingToDate+''''
				End
				Else 
				Begin
					SELECT @sqL2=@sqL2 + ' And customertrades_tradedate<='''+@fromdate+''''
				End
									
					SELECT @sqL2=@sqL2+' AND customertrades_EXCHANGESEGMENT IN('+@segment+')
							AND customertrades_COMPANYID='''+@companyid+''''
					IF(@CallOfBillingBasis<>'Y') 
					Begin
						SELECT @sqL2=@sqL2 +' AND customertrades_finyear='''+@finyear+''''
					End
			
					Select @sql21='
								Union All
								select 
								 case when exch_exchid=''EXN0000002''  then ''NSE'' 
											 when exch_exchid=''EXB0000001''  then ''BSE'' 
											 when exch_exchid=''EXM0000002''  then ''MCXSX'' 
											 when exch_exchid=''EXA0000001''  then ''Accounts'' 
										ELSE NULL END AS SEGMENT,
								customertrades_customerid AS CUSTOMERID,
								customertrades_productseriesid AS PRODUCT,
								customertrades_unitpricequantity AS QTY,
								customertrades_netvalue AS VAL,
								customertrades_netrateperunit AS RATE,
								customertrades_settlementnumber+''''+customertrades_settlementtype AS SETTNO,
								case when customertrades_brokeragetype=''D'' then ''Dlv'' when customertrades_brokeragetype=''S'' then ''Sqr'' else null end AS BRKGTYPE,
								customertrades_tradedate AS DATE,CustomerTrades_UnitPrice UnitPrice
								from trans_customertrades,tbl_master_companyexchange where '
					Select @sql21=@sql21+'customertrades_customerid IN (select distinct cnt_internalid from tbl_master_contact 
																 where '+@clienttype+'
																 and cnt_internalid in ('+@clients+'))'

					IF @Seriesid<>'ALL'
					BEGIN
						SELECT @sql21=@sql21+' AND customertrades_productseriesid in(select equity_seriesid from master_equity where 
																  equity_productid in('+@Seriesid+'))'
					END
					IF @chkexcludesqr='CHK'
					BEGIN
						SELECT @sql21=@sql21+' AND customertrades_brokeragetype=''D'''
					END

					SELECT @sql21=@sql21+'
								AND  EXCH_INTERNALID=customertrades_EXCHANGESEGMENT
								AND isnull(EXCH_SEGMENTID,''CM'')=''CM'' AND ISNULL(CUSTOMERTRADES_TRADECATEGORY,''R'') NOT IN (''CFS'',''CFT'',''ARS'',''ART'',''AUC'')'
					
					IF(@CallOfBillingBasis='Y') 
					Begin
						SELECT @sql21=@sql21 + ' And customertrades_tradedate Between Cast('''+@BillingToDate+''' as DateTime)+1 and '''+@fromdate+''''
					End
					Else 
					Begin
						SELECT @sql21=@sql21 + ' And customertrades_tradedate<='''+@fromdate+''''
					End
									
					SELECT @sql21=@sql21+' AND customertrades_EXCHANGESEGMENT IN('+@segment+')
								AND customertrades_COMPANYID='''+@companyid+''''
					IF(@CallOfBillingBasis<>'Y') 
					Begin
						SELECT @sql21=@sql21 +' AND customertrades_finyear='''+@finyear+''''
					End
				
					SELECT @sql21=@sql21+' 
					And CustomerTrades_SettlementType in (''D'',''X'',''Y'')) as tb '

				
					SELECT @sql4='UNION ALL

							SELECT [PortfolioDetail_CustomerID],[PortfolioDetail_SeriesID],
							''Opening'' AS SETTNO,''Dlv'' AS BRKGTYPE,[PortfolioDetail_TradeDate] AS DATE,
							[PortfolioDetail_BuyQuantity] AS BUYQTY,[PortfolioDetail_NetValue] AS BUYVAL,
							NULL AS RATE,NULL AS SELLVAL,
							[PortfolioDetail_HostoricalCost] AS SELLRATE,
							case when exch_exchid=''EXN0000002''  then ''NSE'' 
										 when exch_exchid=''EXB0000001''  then ''BSE'' 
										 when exch_exchid=''EXM0000002''  then ''MCXSX'' 
										 when exch_exchid=''EXA0000001''  then 
											(Select 
											Case 
												When Equity_ExchSegmentID=1 Then ''NSE''
												When Equity_ExchSegmentID=4 Then ''BSE''
												When Equity_ExchSegmentID=19 Then ''MCXSX'' 
												Else Null
											End from Master_Equity Where Equity_SeriesID=PortfolioDetail_SeriesID)
									ELSE NULL END AS SEGMENT,PortfolioDetail_NetAverageUnitCost UnitPrice

							FROM [Trans_PortfolioDetail],tbl_master_companyexchange
							WHERE [PortfolioDetail_CustomerID] IN (select distinct cnt_internalid from tbl_master_contact 
															 where  '+@clienttype+'
															 and cnt_internalid in ('+@clients+'))'
					IF @Seriesid<>'ALL'
					BEGIN
						SELECT @sql4=@sql4+' AND [PortfolioDetail_SeriesID]
																 in(select equity_seriesid from master_equity where 
																  equity_productid in('+@Seriesid+'))'
					END
							
					SELECT @sql4=@sql4+'AND EXCH_INTERNALID=[PortfolioDetail_Segment]
					AND isnull(EXCH_SEGMENTID,''CM'')=''CM''
					AND [PortfolioDetail_TradeDate]<='''+@fromdate+'''
					AND [PortfolioDetail_FinYear]='''+@finyear+'''
					AND [PortfolioDetail_Segment] IN('+@segment+')
					AND [PortfolioDetail_CompanyID]='''+@companyid+''''

					select @sql5='UNION ALL
					select CUSTOMERID,PRODUCT,SETTNO,BRKGTYPE,DATE,
					case when QTY<0 then ABS(QTY) else null end as BUYQTY,
					case when QTY<0 then ABS(VAL) else null end as BUYVAL,
					case when QTY>0 then QTY else null end as SELLQTY,
					case when QTY>0 then VAL else null end as SELLVAL,
					RATE,SEGMENT,UnitPrice
					FROM
					 (select 
					 Case 
						when exch_exchid=''EXN0000002''  then ''NSE'' 
						when exch_exchid=''EXB0000001''  then ''BSE'' 
						when exch_exchid=''EXM0000002''  then ''MCXSX'' 
						when exch_exchid=''EXA0000001''  then 
							Case
								When OtherTrades_Exchange=''NSE-CM'' Then  ''NSE''
								When OtherTrades_Exchange=''BSE-CM'' Then  ''BSE''
								When OtherTrades_Exchange=''MCXSX-CM'' Then  ''MCXSX''
							End 
						ELSE NULL 
					END AS SEGMENT,
					OtherTrades_customerid AS CUSTOMERID,
					OtherTrades_productseriesid AS PRODUCT,
					OtherTrades_unitpricequantity AS QTY,
					OtherTrades_netvalue AS VAL,
					OtherTrades_netrateperunit AS RATE,
					OtherTrades_settlementnumber+''''+OtherTrades_settlementtype AS SETTNO,
					case when OtherTrades_brokeragetype=''D'' then ''Dlv'' when OtherTrades_brokeragetype=''S'' then ''Sqr'' else null end AS BRKGTYPE,
					OtherTrades_tradedate AS DATE,
					OtherTrades_UnitPrice as UnitPrice
					from trans_OtherTrades,tbl_master_companyexchange where '
							
					SELECT @sql5=@sql5+' OtherTrades_customerid IN (select distinct cnt_internalid from tbl_master_contact 
															 where '+@clienttype+'
															 and cnt_internalid in ('+@clients+'))'
					IF @Seriesid<>'ALL'
					BEGIN
						SELECT @sql5=@sql5+' AND OtherTrades_productseriesid in(select equity_seriesid from master_equity where 
																  equity_productid in('+@Seriesid+'))'
					END
					IF @chkexcludesqr='CHK'
					BEGIN
						SELECT @sql5=@sql5+' AND OtherTrades_brokeragetype=''D'''
					END
					SELECT @sql5=@sql5+'
					AND EXCH_INTERNALID=[OtherTrades_SegmentID]
					AND isnull(EXCH_SEGMENTID,''CM'')=''CM''
					AND OtherTrades_tradedate<='''+@fromdate+'''
					AND [OtherTrades_SegmentID] IN('+@segment+')
					AND OtherTrades_CompanyID='''+@Companyid+'''
					AND OtherTrades_finyear='''+@finyear+''') as tb2 '

					SELECT @sql4=@sql4+@sql5 +') AS TB,
					master_products,master_equity,tbl_master_contact, '
					if(@grptype='BRANCH')
						BEGIN
							Select @sql4=@sql4+'tbl_master_branch 
							where cnt_branchid=branch_id
							and CUSTOMERID=CNT_INTERNALID'
						END
					ELSE
						BEGIN
							Select @sql4=@sql4+'tbl_master_groupmaster,tbl_trans_group
							where grp_contactid=CUSTOMERID
							and CUSTOMERID=CNT_INTERNALID
							and cnt_internalid=grp_contactid
							AND gpm_type='''+@grptype+'''
							AND grp_groupmaster=gpm_id
							AND GRP_GROUPTYPE='''+@grptype+''''
						END
					Select @sql4=@sql4+'
					AND PRODUCT = equity_seriesid 					
					AND equity_productid = products_id'
				  
				  
					------Testing
					--Delete From #Tab1 Where MasterProductID not in (15297,237,6676)
					--Delete From #Tab1 Where MasterProductID not in (11932)
					--Select * from #TAB1
					--Select UnitPrice,RATE,* from #TAB1 
					--print  @sql
					--print @sql1
					--Print @sql2
					--Print @sql21+@sql4
				  
				  
					INSERT INTO #TAB1 (UCC,CLIENTNAME,PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,CUSTOMERID,PRODUCTID,
								  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,BUYQTY,BUYVALUE,SELLQTY,SELLVALUE,
								  RATE,SEGMENT,GROUPID,GRPNAME,StOrder,UnitPrice)
					EXEC( @sql+@sql1+@sql2+@sql21+@sql4)

				
					
	----------------------Purchase Sale Club
					CREATE NONCLUSTERED INDEX [IX_11] ON #TAB1  
					( 
							UCC ASC,
							PRODUCTNAME ASC, 
							BRKGTYPE ASC ,
							DATE ASC 
					)



					INSERT INTO #TAB1
					(CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					BUYQTY,SELLQTY,RATE ,BRKGTYPE,BUYVALUE,SELLVALUE,
					GROUPID,GRPNAME,SEGMENT,StOrder
					)
					SELECT *,34 FROM 
					(SELECT CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					CASE WHEN SUM(ISNULL(BUYQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(BUYQTY,0)) END AS BUYQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(SELLQTY,0)) END AS SELLQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN SUM(ISNULL(BUYVALUE,0))/ SUM(ISNULL(BUYQTY,0))
						ELSE SUM(ISNULL(SELLVALUE,0))/SUM(ISNULL(SELLQTY,0)) END AS RATE,
					BRKGTYPE,SUM(ISNULL(BUYVALUE,0)) AS BUYVALUE,SUM(ISNULL(SELLVALUE,0)) AS SELLVALUE,
					GROUPID,GRPNAME,SEGMENT
					FROM #TAB1 WHERE BUYQTY IS NOT NULL
					GROUP BY CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,BRKGTYPE,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,GROUPID,GRPNAME,SEGMENT

					UNION ALL

					SELECT CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					CASE WHEN SUM(ISNULL(BUYQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(BUYQTY,0)) END AS BUYQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(SELLQTY,0)) END AS SELLQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN SUM(ISNULL(BUYVALUE,0))/ SUM(ISNULL(BUYQTY,0))
						ELSE SUM(ISNULL(SELLVALUE,0))/SUM(ISNULL(SELLQTY,0)) END AS RATE,
					BRKGTYPE,SUM(ISNULL(BUYVALUE,0)) AS BUYVALUE,SUM(ISNULL(SELLVALUE,0)) AS SELLVALUE,
					GROUPID,GRPNAME,SEGMENT
					FROM #TAB1 WHERE BUYQTY IS  NULL
					GROUP BY CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,BRKGTYPE,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,GROUPID,GRPNAME,SEGMENT) AS BB

					Delete From #TAB1 Where StOrder=33


	-----------------------------------------------For AUC Trade Category Check Begin----------------------------------
					Create Table #TbAUC (Client varchar(15),Seriesid varchar(30),Qty numeric(28,0),SettNumber varchar(15),
										 Remarks varchar(20),Orderno varchar(50),AucNetValue numeric(28,2))
		
					--------Insert Record
					---If Auction Is Exists
					Select @sql5='Select distinct 
					customertrades_customerid,customertrades_productseriesid,customertrades_unitpricequantity,
					customertrades_settlementnumber+''''+customertrades_settlementtype,SETTNO,
					customertrades_netvalue
					From trans_customertrades,#TAB1
					Where customertrades_customerid=CUSTOMERID
					and customertrades_productseriesid=PRODUCTID
					and customerTrades_remarks=SETTNO and customerTrades_remarks is not null
					and customerTrades_TradeCategory=''AUC'' and customerTrades_TradeCategory is not null
					AND CustomerTrades_CompanyID='''+@Companyid+'''
					AND customertrades_finyear='''+@finyear+'''
					AND isnull(customertrades_unitpricequantity,0)<>0'
					Insert Into #TbAUC (Client,Seriesid,Qty,SettNumber,Remarks,AucNetValue)Exec(@sql5)


					---New Add For Descripency in Portfolio Report
					--(Some time there is TradeCategory Field is null but Remarks field have settlement number(in case of Auction)

					Select * into #TCategoryNull From
					(Select customertrades_customerid,customertrades_productseriesid,Sum(CustomerTrades_UnitPriceQuantity) as CustomerTrades_UnitPriceQuantity,
					SETTNOA,SETTNO,Orderno,customertrades_netvalue From
					(Select  T1.customertrades_customerid,T1.customertrades_productseriesid,
					Abs(isnull(T2.CustomerTrades_UnitPriceQuantity,0.00)) as customertrades_unitpricequantity,
					T1.customertrades_settlementnumber+''+T1.customertrades_settlementtype as SETTNOA,T1.SETTNO,
					Null as Orderno,T1.customertrades_netvalue
					from
					(Select  distinct
					customertrades_customerid,customertrades_productseriesid,customertrades_unitpricequantity,
					customertrades_settlementnumber,customertrades_settlementtype,SETTNO,
					customertrades_netvalue
					From trans_customertrades,#TAB1
					Where customertrades_customerid=CUSTOMERID
					and customertrades_productseriesid=PRODUCTID
					and customerTrades_remarks=SETTNO and customerTrades_remarks is not null
					and customerTrades_TradeCategory='AUC' and customerTrades_TradeCategory is not null
					AND CustomerTrades_CompanyID=@Companyid
					AND customertrades_finyear=@finyear
					AND isnull(customertrades_unitpricequantity,0)<>0) as T1
					inner Join
					(Select CustomerTrades_SettlementNumber,CustomerTrades_SettlementType,CustomerTrades_ProductSeriesID,
					CustomerTrades_CustomerID,CustomerTrades_TradeCategory,CustomerTrades_UnitPriceQuantity 
					from Trans_CustomerTrades Where CustomerTrades_CompanyID=@Companyid
					AND customertrades_finyear=@finyear) as T2
					On T2.CustomerTrades_SettlementNumber=T1.CustomerTrades_SettlementNumber and
					T2.CustomerTrades_SettlementType=T1.CustomerTrades_SettlementType and
					T2.CustomerTrades_ProductSeriesID=T1.CustomerTrades_ProductSeriesID and
					T2.CustomerTrades_CustomerID=T1.CustomerTrades_CustomerID and
					isnull(T2.CustomerTrades_TradeCategory,'XYZ')<>'AUC') as T1
					Group By customertrades_customerid,customertrades_productseriesid,
					SETTNOA,SETTNO,Orderno,customertrades_netvalue) as FinalT


					Update #tbAuc Set Qty=0 From
					(Select Client,SeriesID,SettNumber,Remarks,OrderNo,AucNetValue from #tbAuc
					Except
					Select CustomerTrades_CustomerID,CustomerTrades_ProductSeriesID,SettNOA,SettNo
					,OrderNo,Customertrades_NetValue
					 from #TCategoryNull) as T1
					Where #tbAuc.SettNumber=T1.SettNumber and
					#tbAuc.Client=T1.Client and #tbAuc.Seriesid=T1.Seriesid
					and #tbAuc.Remarks=T1.Remarks


					Update #TBAuc Set Qty=Case When QTY>0 Then CustomerTrades_UnitPriceQuantity Else -CustomerTrades_UnitPriceQuantity End
					From #TCategoryNull Where 
					#tbAuc.SettNumber=SettNoA and
					#tbAuc.Client=Customertrades_CustomerID 
					and #tbAuc.Seriesid=CustomerTrades_ProductSeriesID
					and #tbAuc.Remarks=SettNo

					Drop Table #TCategoryNull
					---------------------------------------



					--------If Qty is Negative and Order No is Exists Then No Auction Calculation
					Update #TbAUC Set Orderno=isnull(Exchangetrades_ordernumber,'0') From Trans_Exchangetrades
					Where Exchangetrades_CUstomerid=Client and Exchangetrades_Productseriesid=Seriesid
					and Exchangetrades_Settlementnumber+Exchangetrades_settlementtype=SettNumber
					and isnull(Exchangetrades_TradeCategory,'KKK')<>'AUC'
					and isnull(Qty,0)<0

					--Select * From #TbAUC
					Delete From #TbAUC Where isnull(Orderno,'0')<>'0' and isnull(Qty,0)<0 
					--------If Qty is Negative and No 'AUC' Category Type SettNo Not Exists No Auction Calculation
					Update #TbAUC Set Orderno='0' From #TAB1
					Where Client=CUSTOMERID and Seriesid=PRODUCTID and SettNumber=SETTNO and isnull(Qty,0)<0

					Delete From #TbAUC Where isnull(Orderno,'0')<>'0' and isnull(Qty,0)<0 
					Delete From #TbAUC Where Orderno is null and isnull(Qty,0)<0 




					---------------If 'AUC' Type Category

					Update #TAB1 Set AucCat='Y' From #TbAUC
					Where Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks
					and isnull(Qty,0)<0 and isnull(BUYQTY,0)<>0 and BRKGTYPE='Dlv'

					Update #TAB1 Set AucCat='Y' From #TbAUC
					Where Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks
					and isnull(Qty,0)>0 and isnull(SELLQTY,0)<>0  and BRKGTYPE='Dlv' 


					INSERT INTO #TAB1
								(CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,
								TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
								BUYQTY,SELLQTY,RATE ,BRKGTYPE,BUYVALUE,SELLVALUE,
								GROUPID,GRPNAME,SEGMENT,AucCat
								)
					Select  CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID,
							TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO
							,Case When isnull(Qty,0)<0 Then (abs(isnull(BUYQTY,0))-abs(isnull(Qty,0))) Else null End
							,Case When isnull(Qty,0)>0 Then (abs(isnull(SELLQTY,0))-abs(isnull(Qty,0))) Else null End
							,Case When isnull(Qty,0)<0 
								  Then ((abs(isnull(BUYVALUE,0))/abs(isnull(BUYQTY,0)))*(abs(isnull(BUYQTY,0))-abs(isnull(Qty,0))))/(abs(isnull(BUYQTY,0))-abs(isnull(Qty,0)))
							 Else ((abs(isnull(SELLVALUE,0))/abs(isnull(SELLQTY,0)))*(abs(isnull(SELLQTY,0))-abs(isnull(Qty,0))))/(abs(isnull(SELLQTY,0))-abs(isnull(Qty,0)))
							 End
							,'Dlv'
							,Case When isnull(Qty,0)<0 
								  Then (abs(isnull(BUYVALUE,0))/abs(isnull(BUYQTY,0)))*(abs(isnull(BUYQTY,0))-abs(isnull(Qty,0)))
							 Else null End
							,Case When isnull(Qty,0)>0 
								  Then (abs(isnull(SELLVALUE,0))/abs(isnull(SELLQTY,0)))*(abs(isnull(SELLQTY,0))-abs(isnull(Qty,0)))
							 Else null End
							,GROUPID,GRPNAME,SEGMENT,'N'
					From #TAB1,#TbAUC
					Where Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks and isnull(AucCat,'N')='Y'
					and (isnull(Qty,0)<0 and abs(isnull(Qty,0))<>abs(isnull(BUYQTY,0))
						or
						isnull(Qty,0)>0 and abs(isnull(Qty,0))<>abs(isnull(SELLQTY,0)))

					Update #TAB1 Set 
									BUYQTY=Case When isnull(Qty,0)<0 Then Abs(Qty) Else null End,
									SELLQTY=Case When isnull(Qty,0)>0 Then Qty Else null End,
									RATE=Case When isnull(Qty,0)<0 
											  Then (abs(isnull(BUYVALUE,0))/abs(isnull(BUYQTY,0)))*abs(isnull(Qty,0))/abs(isnull(Qty,0))
										 Else 
											  (abs(isnull(SELLVALUE,0))/abs(isnull(SELLQTY,0)))*abs(isnull(Qty,0))/abs(isnull(Qty,0))
										 End,
									BUYVALUE=Case When isnull(Qty,0)<0 
											 Then (abs(isnull(BUYVALUE,0))/abs(isnull(BUYQTY,0)))*abs(isnull(Qty,0))
											 Else null End,
									SELLVALUE=Case When isnull(Qty,0)>0 
											 Then (abs(isnull(SELLVALUE,0))/abs(isnull(SELLQTY,0)))*abs(isnull(Qty,0))
											 Else null End,
									BRKGTYPE='Sqr'
					From #TbAUC
					Where Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks and isnull(AucCat,'N')='Y'
					and (isnull(Qty,0)<0 and abs(isnull(Qty,0))<>abs(isnull(BUYQTY,0))
						or
						isnull(Qty,0)>0 and abs(isnull(Qty,0))<>abs(isnull(SELLQTY,0)))

					---------If 'Auc' Category Trade and Main Trade is Mathch The Mark Sqr Off
					Update #TAB1 Set BRKGTYPE='Sqr' From #TbAUC Where 
					Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=SettNumber and AucCat is null

					---------If 'Auc' Category Remarks Feild Trade and Main Trade Qty The Mark Sqr Off
					Update #TAB1 Set BRKGTYPE='Sqr' From #TbAUC Where 
					Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks and isnull(AucCat,'N')='Y'
					and (isnull(Qty,0)<0 and abs(isnull(Qty,0))=abs(isnull(BUYQTY,0))
						or
						isnull(Qty,0)>0 and abs(isnull(Qty,0))=abs(isnull(SELLQTY,0)))


					IF @jvcreate='YES'
					Begin
						----------Net AUC DIff
						Insert Into #TbAucDiffPl(MstPrd,ProfitLoss)
						Select MstPrd,Sum(isnull(ProfitLoss,0)) as ProfitLoss
						From
						( 
							Select CUSTOMERID1,CUSTOMERID2,
							PRODUCTID1,PRODUCTID2,MASTERPRODUCTID1 as MstPrd,MASTERPRODUCTID2,
							(isnull(SELLValue1,0)-isnull(BuyValue1,0)+isnull(SELLValue2,0)-isnull(BuyValue2,0)) as ProfitLoss
							From

							(Select CUSTOMERID as CUSTOMERID1,PRODUCTID as PRODUCTID1,MASTERPRODUCTID as MASTERPRODUCTID1,
							Sum(isnull(BUYValue,0)) as BuyValue1,Sum(isnull(SELLValue,0))  as SELLValue1
							From #TAB1,#TbAUC Where 
							Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=Remarks and BRKGTYPE='Sqr'
							and (
								 (isnull(BUYQTY,0)<>0 and isnull(BUYQTY,0)=abs(Qty) and isnull(SELLQTY,0)=0 and Qty<0)
								  Or
								 (isnull(SELLQTY,0)<>0 and isnull(SELLQTY,0)=abs(Qty) and isnull(BUYQTY,0)=0 and Qty>0)
								)
							Group By CUSTOMERID,PRODUCTID,MASTERPRODUCTID)as Kk,

							(Select CUSTOMERID as CUSTOMERID2,PRODUCTID as PRODUCTID2,MASTERPRODUCTID as MASTERPRODUCTID2,
							Sum(isnull(BUYValue,0)) as BuyValue2,Sum(isnull(SELLValue,0))  as SELLValue2
							From #TAB1,#TbAUC Where 
							Client=CUSTOMERID and Seriesid=PRODUCTID and SETTNO=SettNumber and BRKGTYPE='Sqr'
							and (
								 (isnull(SELLQTY,0)<>0 and isnull(SELLQTY,0)=abs(Qty) and isnull(BUYQTY,0)=0 and Qty<0)
								  Or
								 (isnull(BUYQTY,0)<>0 and isnull(BUYQTY,0)=abs(Qty) and isnull(SELLQTY,0)=0 and Qty>0)
								)
							Group By CUSTOMERID,PRODUCTID,MASTERPRODUCTID) as HH
							Where CUSTOMERID2=CUSTOMERID1 and PRODUCTID1=PRODUCTID2 and MASTERPRODUCTID1=MASTERPRODUCTID2
						) as TbKk
						Group By MstPrd

						Update #TbAucDiffPl Set Seriesid=PRODUCTID From #TAB1 Where MstPrd=MASTERPRODUCTID and Segment='NSE'
						Update #TbAucDiffPl Set Seriesid=PRODUCTID From #TAB1 Where MstPrd=MASTERPRODUCTID and Segment='BSE' and Seriesid is null
						Update #TbAucDiffPl Set Seriesid=PRODUCTID From #TAB1 Where MstPrd=MASTERPRODUCTID and Segment='MCXSX' and Seriesid is null

					End


					--Store Auction Settlement For Further Use
					Declare @TbAucSettNo Varchar(1000)
					Select @TbAucSettNo=coalesce(@TbAucSettNo + ', ', '') + Convert(varchar,Remarks) From #TbAuc
					Select @TbAucSettNo=coalesce(@TbAucSettNo + ', ', '') + Convert(varchar,SettNumber)  from #TbAuc
					--End Store Auction Settlement For Further Use
					Drop Table #TbAUC	
							

	--------------------------For Record Insert [After Auc Category Check]
					CREATE NONCLUSTERED INDEX [IX_12] ON #TAB1  
					( 
							PRODUCTNAME ASC, 
							BRKGTYPE ASC ,
							DATE ASC 
					)

					INSERT INTO #TAB
					(DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					BUYQTY,SELLQTY,RATE ,BRKGTYPE,BUYVALUE,SELLVALUE,
					SEGMENT,FLAGSTATUS,Statusorder
					)
					SELECT DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					BUYQTY,SELLQTY,RATE,BRKGTYPE,BUYVALUE,SELLVALUE,
					SEGMENT,FLAGSTATUS,1
					 FROM 
					(SELECT DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					CASE WHEN SUM(ISNULL(BUYQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(BUYQTY,0)) END AS BUYQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(SELLQTY,0)) END AS SELLQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN SUM(ISNULL(BUYVALUE,0))/ SUM(ISNULL(BUYQTY,0))
						ELSE SUM(ISNULL(SELLVALUE,0))/SUM(ISNULL(SELLQTY,0)) END AS RATE,
					BRKGTYPE,SUM(ISNULL(BUYVALUE,0)) AS BUYVALUE,SUM(ISNULL(SELLVALUE,0)) AS SELLVALUE,
					SEGMENT,
					CASE WHEN SUM(ISNULL(BUYQTY,0))<>0.0 AND BRKGTYPE='Dlv' THEN 2 ELSE 3 END AS FLAGSTATUS
					FROM #TAB1 WHERE BUYQTY IS NOT NULL
					GROUP BY DATE,PRODUCTID,MASTERPRODUCTID,BRKGTYPE,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,SEGMENT

					UNION ALL

					SELECT DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					CASE WHEN SUM(ISNULL(BUYQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(BUYQTY,0)) END AS BUYQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN NULL ELSE SUM(ISNULL(SELLQTY,0)) END AS SELLQTY,
					CASE WHEN SUM(ISNULL(SELLQTY,0))=0.0 THEN SUM(ISNULL(BUYVALUE,0))/ SUM(ISNULL(BUYQTY,0))
						ELSE SUM(ISNULL(SELLVALUE,0))/SUM(ISNULL(SELLQTY,0)) END AS RATE,
					BRKGTYPE,SUM(ISNULL(BUYVALUE,0)) AS BUYVALUE,SUM(ISNULL(SELLVALUE,0)) AS SELLVALUE,
					SEGMENT,
					CASE WHEN SUM(ISNULL(BUYQTY,0))<>0.0 AND BRKGTYPE='Dlv' THEN 2 ELSE 3 END AS FLAGSTATUS
					FROM #TAB1 WHERE BUYQTY IS  NULL
					GROUP BY DATE,PRODUCTID,MASTERPRODUCTID,BRKGTYPE,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,SEGMENT) AS BB
					ORDER BY PRODUCTNAME,BRKGTYPE,DATE

		------------------------------------------- Pledge Check Begin
					Create Table #TabPledge(AutoId int identity(1,1),Productid varchar(30),Qty numeric(28,0),PurDate Datetime,PledgeSegment int)
						

					
					Select @sql5='
					Select PledgedStocks_ProductID,
					Sum(isnull(PledgedStocks_Quantity,0)),PledgedStocks_PurchaseDate,PledgedStocks_SegmentID
					From Trans_PledgedStocks,(select Distinct CUSTOMERID,MASTERPRODUCTID From #TAB1) as kk
					Where PledgedStocks_UnPledgeDate is null
					and PledgedStocks_CustomerID=CUSTOMERID and PledgedStocks_ProductID=MASTERPRODUCTID
					AND PledgedStocks_CompanyID='''+@Companyid+'''
					and PledgedStocks_FinYear='''+@finyear+'''
					Group By PledgedStocks_ProductID,PledgedStocks_PurchaseDate,PledgedStocks_SegmentID'


					Insert Into #TabPledge(Productid,Qty,PurDate,PledgeSegment)exec(@sql5)



					-----------------Variable Declearation
					Declare @PledgeMaxId INT,@PledgeMinId INT,@SegmentShortName Varchar(20)
					Declare @PledgeMstPrd varchar(20),@PledgeQty numeric(28,0),@PledgeDate Datetime,@PledgeSegment int
					Declare @Qty numeric(28,0)


					Select @PledgeMaxId=max(AutoId) from #TabPledge
					Select @PledgeMinId=min(AutoId) from #TabPledge

					While @PledgeMaxId>=@PledgeMinId
					Begin---------------------------------Loop Begin
						Select @PledgeQty=0
						Select @Qty=0
						----------Pledge Fetch
						Select @PledgeMstPrd=Productid,@PledgeQty=Qty,@PledgeDate=PurDate,@PledgeSegment=PledgeSegment
						From #TabPledge Where AutoId=@PledgeMinId
						
						--Get Short Name of Segment To Compare Segment
						Select @SegmentShortName=Ltrim(Rtrim(exh_shortName)) from tbl_master_companyExchange,Tbl_Master_Exchange
								Where exch_exchId=exh_cntId and exch_internalId=@PledgeSegment
						
						----------Actual Qty Fetch 
						Select @Qty=isnull(BUYQTY,0) From #TAB 
						Where isnull(BUYQTY,0)<>0 and BRKGTYPE='Dlv'
						and MASTERPRODUCTID=@PledgeMstPrd and DATE=@PledgeDate
						and Ltrim(Rtrim(#TAB.SEGMENT))=@SegmentShortName
						
						
						if(isnull(@PledgeQty,0)=isnull(@Qty,0))
						Begin

								Update #TAB Set Pledge='Y' Where isnull(BUYQTY,0)<>0 and BRKGTYPE='Dlv'
								and MASTERPRODUCTID=@PledgeMstPrd and DATE=@PledgeDate
								and Pledge is null and #TAB.SEGMENT=@SegmentShortName
						End
						if(isnull(@PledgeQty,0)<>isnull(@Qty,0))
						Begin
								Update #TAB Set Pledge='Y',BUYQTY=isnull(@PledgeQty,0),
								BUYVALUE=(isnull(BUYVALUE,0)/isnull(@Qty,0))*isnull(@PledgeQty,0)
								Where isnull(BUYQTY,0)<>0 and BRKGTYPE='Dlv'
								and MASTERPRODUCTID=@PledgeMstPrd and DATE=@PledgeDate
								and Pledge is null and #TAB.SEGMENT=@SegmentShortName

								INSERT INTO #TAB (PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
												  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,BUYQTY,BUYVALUE,SELLQTY,SELLVALUE,
												  RATE,SEGMENT,Statusorder,FLAGSTATUS)
								Select PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
								SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,
								abs(isnull(@Qty,0)-isnull(@PledgeQty,0)),(isnull(BUYVALUE,0)/isnull(@Qty,0))*abs(isnull(@Qty,0)-isnull(@PledgeQty,0)),
								SELLQTY,SELLVALUE,
								RATE,SEGMENT,1,FLAGSTATUS
								From #TAB
								Where isnull(BUYQTY,0)<>0 and BRKGTYPE='Dlv' and Pledge='Y'
								and MASTERPRODUCTID=@PledgeMstPrd and DATE=@PledgeDate
								and #TAB.SEGMENT=@SegmentShortName

						End

						Select @PledgeMinId=@PledgeMinId+1
					End---------------------------------Loop End
				

					Drop Table #TabPledge
	------------------------------------------- Pledge Check End


					drop index [IX_11] on #TAB1
					drop index [IX_12] on #TAB1

					INSERT INTO #TAB
					(DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					BUYQTY,SELLQTY,RATE ,BRKGTYPE,BUYVALUE,SELLVALUE,
					SEGMENT,FLAGSTATUS,Statusorder,Pledge
					)
					Select DATE,PRODUCTID,MASTERPRODUCTID,
					TICKERSYMBOL,SERIESANDCODE,PRODUCTNAME,SETTNO,
					BUYQTY,SELLQTY,RATE ,BRKGTYPE,BUYVALUE,SELLVALUE,
					SEGMENT,FLAGSTATUS,2,Pledge
					From #TAB Where Statusorder=1 ORDER BY UCC,PRODUCTNAME,BRKGTYPE,DATE

					Delete From #TAB Where Statusorder=1

					

					----------------------Sqr Qty AND Sqr P/L
					UPDATE #TAB SET SQRQTY=SUM_SELLQTY,
					SQRPL=ISNULL(SUM_SELLVALUE,0)-abs(ISNULL(SUM_BUYVALUE,0))
					FROM
					(SELECT MASTERPRODUCTID AS PR,SUM(ISNULL(SELLQTY,0)) AS SUM_SELLQTY,
					 SUM(ISNULL(BUYVALUE,0)) AS SUM_BUYVALUE,
					 SUM(ISNULL(SELLVALUE,0)) AS SUM_SELLVALUE
					 FROM #TAB WHERE BRKGTYPE='Sqr' GROUP BY MASTERPRODUCTID) AS TB
					 WHERE MASTERPRODUCTID=PR 


					----------------------ST P/L AND LT P/L AND CLOSING
					DECLARE @TB TABLE(MSTPRODUCT VARCHAR(50),ID INT IDENTITY(1,1))
					INSERT INTO @TB(MSTPRODUCT)
					SELECT DISTINCT MASTERPRODUCTID FROM #TAB Where Pledge is null


					CREATE TABLE #TAB_SELL_STLTPL (RATE_SELL_STLTPL NUMERIC(28,6),DATE_SELL_STLTPL DATETIME,
												  AUTOID_SELL_STLTPL VARCHAR(50),
												  ID_SELL_STLTPL INT IDENTITY(1,1),QTY_SELL_STLTPL NUMERIC(28,6))
												  
												  
					---Long-Term Short Term Gain Loss Section
					if(@rpttype='5' Or @rptType='6')
						Create Table #ShortLongTermGainLoss(AutoID int identity(1,1),ProductSeriesID Bigint,BuyQty int,BuyValue Numeric(28,2),
						SellQty int,SellValue Numeric(28,2),LTPL Numeric(28,2),STPL Numeric(28,2))
					---End--------------------------------------------------------------------------------------------
				
					----*********DECLARE TABLE FOR CALCULATION
					DECLARE @SUBSELLFAXID int,@SUBSELLFINID int,@MAXID INT,@MINID INT
					DECLARE @MSTPRODUCT VARCHAR(50)
					Declare @SUBBUYQTY numeric(28,6),@SUBBUYRATE numeric(28,6),@SUBBUYDATE DATETIME,@SUBBUYAUTOID VARCHAR(50)
					Declare @SUBSELLQTY numeric(28,6),@SUBSELLRATE numeric(28,6),@SUBSELLDATE DATETIME,@SUBSELLAUTOID VARCHAR(50)
					DECLARE @DATEDIFF INT,@ROWCOUNT INT,@STSTUSID INT

					select @MAXID=max(ID) from @TB
					select @MINID=min(ID) from @TB
					SELECT @ROWCOUNT=0
					SELECT @STSTUSID=0
					while @MAXID>=@MINID
					BEGIN ------------------MASTERPRODUCT TABLE RESULT CAL BEGIN 
						SELECT @MSTPRODUCT=MSTPRODUCT FROM @TB WHERE ID=@MINID
						TRUNCATE TABLE #TAB_SELL_STLTPL
						INSERT INTO #TAB_SELL_STLTPL (RATE_SELL_STLTPL,DATE_SELL_STLTPL,
													  AUTOID_SELL_STLTPL,QTY_SELL_STLTPL)
						SELECT RATE,DATE,AUTOID,SELLQTY FROM #TAB 
						WHERE MASTERPRODUCTID=@MSTPRODUCT 
						AND BRKGTYPE='Dlv' AND SELLQTY IS NOT NULL and Pledge is null
						SELECT @ROWCOUNT=0
						SELECT  @ROWCOUNT=COUNT(DATE_SELL_STLTPL) FROM #TAB_SELL_STLTPL

						
						IF(@ROWCOUNT=0)
						BEGIN---------------------------SELL TABLE ROWCOUNT=0 BEGIN
														  
							--------Clo Qty AND Clo Value
							
							UPDATE #TAB SET CLOSINGQTY=BUYQTY,CLOSINGVALUE=BUYQTY*RATE,FLAGSTATUS=3
							WHERE MASTERPRODUCTID=@MSTPRODUCT
							AND BRKGTYPE='Dlv' AND BUYQTY IS NOT NULL 
							AND FLAGSTATUS=2 and Pledge is null
						END---------------------------SELL TABLE ROWCOUNT=0 END
						ELSE
						BEGIN	
							------LOOP BEGIN #TAB_SELL_STLTPL
							SELECT @SUBSELLFAXID=max(ID_SELL_STLTPL) from #TAB_SELL_STLTPL
							SELECT @SUBSELLFINID=min(ID_SELL_STLTPL) from #TAB_SELL_STLTPL
							
							SELECT @STSTUSID=(SELECT MAX(isnull(STSTUSID,0))+1 FROM #TAB)
							WHILE @SUBSELLFAXID>=@SUBSELLFINID
							BEGIN
								SELECT @ROWCOUNT=0
								SELECT @ROWCOUNT=COUNT(DATE) FROM #TAB
								WHERE MASTERPRODUCTID=@MSTPRODUCT
								AND BRKGTYPE='Dlv' AND BUYQTY IS NOT NULL 
								AND FLAGSTATUS=2 and Pledge is null
								IF(@ROWCOUNT=0)
								BEGIN
										BREAK
								END
								----------BUY FETCH
								SELECT TOP 1 @SUBBUYQTY =BUYQTY,@SUBBUYRATE=RATE,
								@SUBBUYDATE=DATE,@SUBBUYAUTOID=AUTOID
								FROM #TAB WHERE FLAGSTATUS=2 
								AND BUYQTY IS NOT NULL AND BRKGTYPE='Dlv'
								AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null

								--------SELL FETCH
								SELECT @SUBSELLQTY =QTY_SELL_STLTPL,@SUBSELLRATE=RATE_SELL_STLTPL,
								@SUBSELLDATE=DATE_SELL_STLTPL,@SUBSELLAUTOID=AUTOID_SELL_STLTPL
								FROM #TAB_SELL_STLTPL WHERE ID_SELL_STLTPL=@SUBSELLFINID

								---Testing
								--print Cast(@SUBBUYQTY as Varchar(28))+'-'+Cast(@SUBSELLQTY as Varchar(28))
								
								SELECT @DATEDIFF= abs(DATEDIFF(dd,@SUBSELLDATE,@SUBBUYDATE))
								IF(@SUBSELLQTY>@SUBBUYQTY and @SUBBUYDATE<=@SUBSELLDATE)
								BEGIN
										
									  ----------UPDATE ORIGINAL ROW IN MAIN TABLE
									  UPDATE #TAB SET  SELLVALUE=ABS(@SUBSELLQTY-@SUBBUYQTY)*@SUBSELLRATE,
									  SELLQTY=ABS(@SUBSELLQTY-@SUBBUYQTY),STSTUSID=@STSTUSID
									  WHERE AUTOID=@SUBSELLAUTOID  AND SELLQTY IS NOT NULL AND BRKGTYPE='Dlv'
									  AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null
												  
												  
									  ---------------------------------------------------------------------
									  ------------INSERT SPLIT ROW IN MAIN TABLE
									  INSERT INTO #TAB (PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
									  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,BUYQTY,BUYVALUE,SELLQTY,SELLVALUE,RATE,
									  SQRQTY,SQRPL,STPL,LTPL,SEGMENT,FLAGSTATUS,STSTUSID)
										
									  SELECT PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
									  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,BUYQTY,BUYVALUE,ABS(@SUBBUYQTY),
									  ABS(@SUBBUYQTY)*@SUBSELLRATE,RATE,SQRQTY,SQRPL,
									  CASE WHEN @DATEDIFF>365 THEN 0.0 ELSE (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBBUYQTY) END,
									  CASE WHEN @DATEDIFF>365 THEN (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBBUYQTY) ELSE 0.0 END,
									  SEGMENT,3,@STSTUSID
									  FROM #TAB WHERE AUTOID=@SUBSELLAUTOID  AND SELLQTY IS NOT NULL AND BRKGTYPE='Dlv'
									   AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null
									  
									  ----------UPDATE ORIGINAL ROW IN TEMP TABLE(SELL)
									  UPDATE #TAB_SELL_STLTPL SET  QTY_SELL_STLTPL=ABS(@SUBSELLQTY-@SUBBUYQTY)
									  WHERE AUTOID_SELL_STLTPL=@SUBSELLAUTOID AND QTY_SELL_STLTPL IS NOT NULL

									  ---------UPDATE ORIGINAL ROW IN TEMP TABLE(BUY)
									  UPDATE #TAB SET  FLAGSTATUS=3
									  WHERE AUTOID=@SUBBUYAUTOID AND FLAGSTATUS=2 and Pledge is null
									  SELECT @SUBSELLFINID=@SUBSELLFINID-1
																	  
									  --Long-Term Gain/Loss Section
									  if(@rpttype='5' or @rpttype='6')
									  Begin
										  insert into #ShortLongTermGainLoss(ProductSeriesID,BuyQty,BuyValue,SellQty,SellValue,LTPL,STPL)
										  Select @MSTPRODUCT,ABS(@SUBBUYQTY),ABS(@SUBBUYQTY)*@SUBBUYRATE,
										  ABS(@SUBBUYQTY),ABS(@SUBBUYQTY)*@SUBSELLRATE,
										  CASE WHEN @DATEDIFF>365 THEN (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBBUYQTY) ELSE 0.0 END,
										  CASE WHEN @DATEDIFF>365 THEN 0.0 Else (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBBUYQTY) END
									  End
									  -------------------------------------End----------------------------------------------------------------
								End
								ELSE IF(@SUBSELLQTY<@SUBBUYQTY and @SUBBUYDATE<=@SUBSELLDATE)
								BEGIN

									 ----------UPDATE ORIGINAL ROW
									  UPDATE #TAB SET  BUYVALUE=ABS(@SUBBUYQTY-@SUBSELLQTY)*@SUBBUYRATE,
									  BUYQTY=ABS(@SUBBUYQTY-@SUBSELLQTY),STSTUSID=@STSTUSID
									  WHERE AUTOID=@SUBBUYAUTOID AND FLAGSTATUS=2 
									  AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null

									  ------------INSERT SPLIT ROW
									  INSERT INTO #TAB (PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
									  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,BUYQTY,BUYVALUE,SELLQTY,SELLVALUE,RATE,
									  SQRQTY,SQRPL,SEGMENT,FLAGSTATUS,STSTUSID)
													
									  SELECT PRODUCTNAME,TICKERSYMBOL,SERIESANDCODE,PRODUCTID,
									  SETTNO,BRKGTYPE,DATE,MASTERPRODUCTID,ABS(@SUBSELLQTY),
									  ABS(@SUBSELLQTY)*@SUBBUYRATE,SELLQTY,SELLVALUE,
									  RATE,SQRQTY,SQRPL,
									  SEGMENT,3,@STSTUSID
									  FROM #TAB WHERE AUTOID=@SUBBUYAUTOID  AND FLAGSTATUS=2 
									  AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null
	                                              
									  --Long-Term Gain/Loss Section
									  if(@rpttype='5' or @rpttype='6')
									  Begin
										  insert into #ShortLongTermGainLoss(ProductSeriesID,BuyQty,BuyValue,SellQty,SellValue,LTPL,STPL)
										  Select @MSTPRODUCT,ABS(@SUBSELLQTY),ABS(@SUBSELLQTY)*@SUBBUYRATE,
										  ABS(@SUBSELLQTY),ABS(@SUBSELLQTY)*@SUBSELLRATE,
										  CASE WHEN @DATEDIFF>365 THEN (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBSELLQTY) ELSE 0.0 END,
										  CASE WHEN @DATEDIFF>365 THEN 0.0  ELSE (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBSELLQTY) END
									  End
										-------------------------------------End----------------------------------------------------------------
								End
								 ELSE IF(@SUBSELLQTY=@SUBBUYQTY and @SUBBUYDATE<=@SUBSELLDATE)
								 BEGIN
									----------UPDATE ORIGINAL ROW
									  UPDATE #TAB SET  FLAGSTATUS=3,STSTUSID=@STSTUSID
									  WHERE AUTOID=@SUBBUYAUTOID AND FLAGSTATUS=2 
									  AND MASTERPRODUCTID=@MSTPRODUCT and Pledge is null
									  
									  --Long-Term Gain/Loss Section
									  if(@rpttype='5' Or @rpttype='6')
									  Begin
										  insert into #ShortLongTermGainLoss(ProductSeriesID,BuyQty,BuyValue,SellQty,SellValue,LTPL,STPL)
										  Select @MSTPRODUCT,ABS(@SUBBUYQTY),ABS(@SUBBUYQTY)*@SUBBUYRATE,
										  ABS(@SUBSELLQTY),ABS(@SUBSELLQTY)*@SUBSELLRATE,
										  CASE WHEN @DATEDIFF>365 THEN (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBSELLQTY) ELSE 0.0 END,
										  CASE WHEN @DATEDIFF>365 THEN 0.0 ELSE (@SUBSELLRATE-@SUBBUYRATE)*ABS(@SUBSELLQTY) END
									  End
									  -------------------------------------------------End----------------------------------------------------------
								 END

											  ----------UPDATE ORIGINAL ROW
											  UPDATE #TAB SET STPL=CASE WHEN @DATEDIFF>365 THEN 0.0 ELSE (@SUBSELLRATE-@SUBBUYRATE)*@SUBSELLQTY END,
											  LTPL=CASE WHEN @DATEDIFF>365 THEN (@SUBSELLRATE-@SUBBUYRATE)*@SUBSELLQTY ELSE 0.0 END
											  WHERE AUTOID=@SUBSELLAUTOID AND SELLQTY IS NOT NULL AND BRKGTYPE='Dlv'
											  AND MASTERPRODUCTID=@MSTPRODUCT AND @SUBBUYDATE<=@SUBSELLDATE and Pledge is null
												
											
												
											SELECT @STSTUSID=@STSTUSID+1
											SELECT @SUBSELLFINID=@SUBSELLFINID+1
									END
							END				

					  SELECT @MINID=@MINID+1
				END	  ------------------MASTERPRODUCT TABLE RESULT CAL END 

			
			if(@rpttype=5)--Long Term PL
				Delete from #ShortLongTermGainLoss Where LTPL='0.00'											 
			Else if(@rpttype=6)--Short Term PL
				Delete from #ShortLongTermGainLoss Where STPL='0.00'											 
													
			--------Clo Qty AND Clo Value
			UPDATE #TAB SET CLOSINGQTY=BUYQTY,CLOSINGVALUE=BUYQTY*RATE,FLAGSTATUS=3
			WHERE BRKGTYPE='Dlv' AND BUYQTY IS NOT NULL 
			AND FLAGSTATUS=2  AND CLOSINGQTY IS NULL
			
			UPDATE  #TAB SET STSTUSID=@STSTUSID+1 WHERE STSTUSID IS NULL 
										
				DROP TABLE #TAB_SELL_STLTPL
			
				IF @closemethod<>'0'
				BEGIN
					--This is For the Purpose To Set Only NSE Close Price Even Product Of BSE
					Declare @ClosePriceVDate DateTime
					if(@closemethod in ('1','2','3'))
						Set @ClosePriceVDate=@ValuationDate
					else 
						Set @ClosePriceVDate=@fromdate
				
					Update #Tab Set ClosePrice=isnull(DailyStat_Close,0) From
					(Select Equity_ExchSegmentID,DailyStat_ProductSeriesID,DailyStat_Close,Equity_ProductID
					From Master_Equity,
					(Select DailyStat_ProductSeriesID,DailyStat_Close from Trans_DailyStatistics,
					(Select DailyStat_ProductSeriesID as ProductSeriesID,
					Max(DailyStat_DateTime) as  [DateTime]
					from Trans_DailyStatistics,#Tab
					Where DailyStat_ProductSeriesID=ProductID
					and DailyStat_DateTime<=@ClosePriceVDate
					and isnull(CLOSINGQTY,0.0)<>0.0 
					Group By DailyStat_ProductSeriesID) as T1
					Where DailyStat_ProductSeriesID=ProductSeriesID
					and DailyStat_DateTime=[DateTime]) as T2
					Where DailyStat_ProductSeriesID=Equity_SeriesID
					and Equity_ExchSegmentID=1) as T3
					Where Equity_ProductID=MasterProductID and
					isnull(CLOSINGQTY,0.0)<>0.0 

					Update #Tab Set ClosePrice=isnull(DailyStat_Close,0) From
					(Select Equity_ExchSegmentID,DailyStat_ProductSeriesID,DailyStat_Close,Equity_ProductID
					From Master_Equity,
					(Select DailyStat_ProductSeriesID,DailyStat_Close from Trans_DailyStatistics,
					(Select DailyStat_ProductSeriesID as ProductSeriesID,
					Max(DailyStat_DateTime) as  [DateTime]
					from Trans_DailyStatistics,#Tab
					Where DailyStat_ProductSeriesID=ProductID
					and DailyStat_DateTime<=@ClosePriceVDate
					and isnull(CLOSINGQTY,0.0)<>0.0 
					Group By DailyStat_ProductSeriesID) as T1
					Where DailyStat_ProductSeriesID=ProductSeriesID
					and DailyStat_DateTime=[DateTime]) as T2
					Where DailyStat_ProductSeriesID=Equity_SeriesID
					and Equity_ExchSegmentID in(1,4)) as T3
					Where Equity_ProductID=MasterProductID and
					isnull(CLOSINGQTY,0.0)<>0.0 and 
					ClosePrice is null
					
					

					if(@closemethod='2')
					Begin
						
						--Select 'T',BUYQTY,BUYVALUE,RATE,CLOSEPRICE,CLOSINGQTY,MKTVALUE,CLOSINGVALUE,* from #TAB
						UPDATE #TAB SET  
						CLOSEPRICE=Case When isnull(ClosePrice,0)<Isnull(RATE,0) Then isnull(ClosePrice,0) Else Isnull(RATE,0) End,
						MKTVALUE=
						Case When CLOSINGQTY is not null 
							Then
								Case When isnull(ClosePrice,0)<Isnull(RATE,0) Then CLOSINGQTY*isnull(ClosePrice,0) Else Isnull(BUYVALUE,0) End
						Else 
								Null
						End,
						CLOSINGVALUE=
						Case When CLOSINGQTY is not null 
							Then
								Case When isnull(ClosePrice,0)<Isnull(RATE,0) Then CLOSINGQTY*isnull(ClosePrice,0) Else Isnull(BUYVALUE,0) End
						Else 
								Null
						End
						--Select 'T',BUYQTY,BUYVALUE,RATE,CLOSEPRICE,CLOSINGQTY,MKTVALUE,CLOSINGVALUE,SEGMENT from #TAB
						
					End
					else if(@closemethod='3')
					Begin
						

						--Select 'T',BUYQTY,BUYVALUE,RATE,CLOSINGQTY,CLOSINGVALUE,CLOSEPRICE,* from #TAB
						
						Select * into #AvgCostMarketLower From
						(Select MasterProductID PID,SUM(CLOSINGVALUE)/SUM(CLOSINGQTY) AvgCost from #TAB
						Group By MASTERPRODUCTID) as T1
						
						--Select 'T',BUYQTY,BUYVALUE,RATE,CLOSEPRICE,CLOSINGQTY,MKTVALUE,CLOSINGVALUE,* from #TAB
						
						update #TAB Set
						CLOSINGVALUE=
						Case When CLOSINGQTY is not null 
							Then
								Case When isnull(CLOSEPRICE,0)<isnull(AvgCost,0) Then CLOSINGQTY*isnull(CLOSEPRICE,0) Else BUYVALUE End
							Else 
								Null
						End,
						MKTVALUE=
						Case When CLOSINGQTY is not null 
							Then
								Case When isnull(CLOSEPRICE,0)<isnull(AvgCost,0) Then CLOSINGQTY*isnull(CLOSEPRICE,0) Else BUYVALUE End
						Else 
								Null
						End
						From #AvgCostMarketLower Where PID=MASTERPRODUCTID
						
						Drop Table #AvgCostMarketLower
						--Select 'T',RATE,* From #TAB
					End
					else
					Begin
						UPDATE #TAB SET  CLOSEPRICE=ISNULL(CLOSEPRICE,0),
						MKTVALUE=CLOSINGQTY*isnull(CLOSEPRICE,0),
						CLOSINGVALUE=CLOSINGQTY*isnull(CLOSEPRICE,0)
						WHERE isnull(CLOSINGQTY,0.0)<>0.0 
					End

				End
				Else
				Begin
					---For Close Method 0
					UPDATE #TAB SET CLOSEPRICE=Case When CLOSINGQTY is not null Then RATE Else Null End
					,CLOSINGVALUE=Case When CLOSINGQTY is not null Then BUYVALUE Else Null End
				End
				
				if(@rpttype=3)
				Begin
				
					Insert into #TAB_CompanyFilter
					Select CUSTOMERID,DATE,CLIENTNAME,UCC,PRODUCTID,MASTERPRODUCTID ,TICKERSYMBOL,SERIESANDCODE,
					PRODUCTNAME,SETTNO,BUYQTY,SELLQTY,RATE,BRKGTYPE,BUYVALUE,SELLVALUE,SQRQTY,SQRPL,
					STPL,LTPL,CLOSINGQTY,CLOSINGVALUE,GROUPID,GRPNAME,SEGMENT,CLOSEPRICE,MKTVALUE,
					VALUATIONPL ,AUTOID,FLAGSTATUS,STSTUSID,JVPRODUCTID,Pledge,Statusorder,UnitPrice,@companyid,
					(Select LTRIM(RTRIM(cmp_Name)) from tbl_master_company Where cmp_internalid=@companyid) From #TAB
					
					----Delete Where ClosingQty=0
					Delete from #TAB_CompanyFilter where isnull(CLOSINGQTY,0)=0
					
					---Update Client Detail of Current Company
					UPDATE #TAB_CompanyFilter set CUSTOMERID=client,CLIENTNAME=cname,ucc=uc,GROUPID=grpid,GRPNAME=grpname1 from
					(SELECT TOP 1 CUSTOMERID as client,'Self Trading A/c' as cname,'SELF' as uc,GROUPID as grpid,GRPNAME as grpname1 FROM #TAB1) as oo
					Where #TAB_CompanyFilter.CompanyID=@companyid
					
					Delete From #Tab
					Delete From #TAB1
					Delete From #TbAucDiffPl
					Delete From #TbInterSegment
					Delete From #VoucherID
				End
				
				Set @Min_Company=@Min_Company+1
			End----While(@Min_Company<@Max_Company)
			
		-------------------------------ALL RESULT DISPLAY
		-----------------------------------FOR JV CREATE
			IF @jvcreate='YES'
			BEGIN
					
					---------IF MASTERPRODUCTID SEGMENT IN NSE AND BSE PREFERENCE NSE
					UPDATE #TAB SET JVPRODUCTID=PRID,CLOSEPRICE=ClPrice,
					MKTVALUE=Case When isnull(MktValue,0.00)=0.00 Then  ISNULL(CLOSINGQTY,0)*ISNULL(ClPrice,0) Else MKTVALUE End
					FROM
					(SELECT  MASTERPRODUCTID AS MSTID,PRODUCTID AS  PRID,CLOSEPRICE as ClPrice FROM #TAB
					WHERE MASTERPRODUCTID IN(
												SELECT MST FROM 
												(SELECT DISTINCT MASTERPRODUCTID AS MST,PRODUCTID
												FROM #TAB WHERE BRKGTYPE='Dlv' )AS LL
												GROUP BY MST HAVING COUNT(MST)>1
											)
					AND BRKGTYPE='Dlv' 
					AND SEGMENT LIKE 'NSE' and CLOSEPRICE is not null)AS OO
					WHERE  BRKGTYPE='Dlv' AND MASTERPRODUCTID=MSTID
					
					---Select 'T',BUYQTY,BUYVALUE,RATE,CLOSINGQTY,MKTVALUE,CLOSINGVALUE,CLOSEPRICE from #TAB
					--------------IF MASTERPRODUCTID SEGMENT ONLY ONE NSE OR BSE
					UPDATE #TAB SET JVPRODUCTID=PRODUCTID 
					WHERE BRKGTYPE='Dlv' AND JVPRODUCTID IS NULL
					
					
									---------TABLE CREATE FOR JV
									DECLARE @JournalVoucher TABLE
									(MAINACID VARCHAR(50),SUBACID VARCHAR(50),NARRATION VARCHAR(MAX),
									DEBIT NUMERIC(28,2),CREDIT NUMERIC(28,2),Prefix varchar(20))

									------------------------FOR Profit/Loss JV
									 INSERT INTO @JournalVoucher(MAINACID,SUBACID,NARRATION,DEBIT,CREDIT,Prefix)
									 SELECT MAINACC,JVPRID,
									 'Profit/Loss on sale of '+dbo.fn_FormatNumber(CAST(SUMSELLQTY AS VARCHAR(8000)),'Y') +' @ '+ dbo.fn_FormatNumber(CAST(CAST(RATE AS NUMERIC(28,4)) AS VARCHAR(8000)),'N')+' /-' AS NARRATION,
									 ABS(DEBITRESULT),ABS(CREDITRESULT),'YN'
									 FROM 
									(SELECT 'SYSTM00018' AS MAINACC,
									 CASE WHEN RESULT<0 THEN RESULT ELSE NULL END DEBITRESULT,
									 CASE WHEN RESULT>0 THEN RESULT ELSE NULL END CREDITRESULT,
									 SUMSELLQTY,RATE,ASSETID,JVPRID
									 FROM
									(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,
									SUM(ISNULL(STPL,0)+(ISNULL(LTPL,0))) AS RESULT,
									SUM(ISNULL(SELLQTY,0)) AS SUMSELLQTY,
									CASE WHEN SUM(ISNULL(SELLQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(SELLVALUE,0)))/(SUM(ISNULL(SELLQTY,0))) END AS RATE 
									FROM #TAB WHERE BRKGTYPE='Dlv'
									AND (STPL IS NOT NULL OR LTPL IS NOT NULL)
									GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK

									UNION ALL

									SELECT 'SYSTM00012' AS MAINACC,
									CASE WHEN RESULT<0 THEN NULL ELSE RESULT END DEBITRESULT,
									CASE WHEN RESULT>0 THEN NULL ELSE RESULT END CREDITRESULT,
									SUMSELLQTY,RATE,ASSETID,JVPRID
									FROM
									(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,
									SUM(ISNULL(STPL,0)+(ISNULL(LTPL,0))) AS RESULT,
									SUM(ISNULL(SELLQTY,0)) AS SUMSELLQTY,
									CASE WHEN SUM(ISNULL(SELLQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(SELLVALUE,0)))/(SUM(ISNULL(SELLQTY,0))) END AS RATE 
									FROM #TAB WHERE BRKGTYPE='Dlv'
									AND (STPL IS NOT NULL OR LTPL IS NOT NULL)
									GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK

									) AS JJ WHERE (DEBITRESULT<>0 OR CREDITRESULT<>0)
									
							--------------------FOR Closing Stock
								
						
									 SELECT @SQL=''
									 SELECT @SQL='
									 SELECT MAINACC,JVPRID,
									 ''Closing Stock ''+dbo.fn_FormatNumber(CAST(SUMQTY AS VARCHAR(8000)),''Y'') +'' @ ''+ dbo.fn_FormatNumber(CAST(CAST(RATE AS NUMERIC(28,4)) AS VARCHAR(8000)),''N'')+'' /-'' AS NARRATION,
									 ABS(DEBITRESULT),ABS(CREDITRESULT),''YO''
									 FROM 
									(SELECT ''SYSTM00013'' AS MAINACC,
									 RESULT AS DEBITRESULT,
									 NULL AS CREDITRESULT,
									 SUMQTY,RATE,ASSETID,JVPRID
									 FROM
									(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,'
									IF @closemethod='0'
										BEGIN
												SELECT @SQL=@SQL+ 'SUM(ISNULL(CLOSINGVALUE,0)) AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(CLOSINGVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
										END
									ELSE IF @closemethod='1'
										BEGIN
												SELECT @SQL=@SQL+ 'SUM(ISNULL(MKTVALUE,0)) AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(MKTVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
										END
									ELSE 
										BEGIN
												SELECT @SQL=@SQL+ 'CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0)) ELSE  SUM(ISNULL(CLOSINGVALUE,0)) END AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE 
																			 CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0))/SUM(ISNULL(CLOSINGQTY,0))
																			 ELSE SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0)) END END AS RATE '
										END
									SELECT @SQL=@SQL+ '
									FROM #TAB WHERE BRKGTYPE=''Dlv'' and ClosingQty>0
									GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK

									UNION ALL

									 SELECT ''SYSTM00012'' AS MAINACC,
									 NULL  AS  DEBITRESULT,
									 RESULT AS  CREDITRESULT,
									 SUMQTY,RATE,ASSETID,JVPRID
									 FROM
									(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,'
									IF @closemethod='0'
										BEGIN
												SELECT @SQL=@SQL+ 'SUM(ISNULL(CLOSINGVALUE,0)) AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(CLOSINGVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
										END
									ELSE IF @closemethod='1'
										BEGIN
												SELECT @SQL=@SQL+ 'SUM(ISNULL(MKTVALUE,0)) AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(MKTVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
										END
									ELSE 
										BEGIN
												SELECT @SQL=@SQL+ 'CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0)) ELSE  SUM(ISNULL(CLOSINGVALUE,0)) END AS RESULT,
																   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE 
																			 CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0))/SUM(ISNULL(CLOSINGQTY,0))
																			 ELSE SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0)) END END AS RATE '
										END
									SELECT @SQL=@SQL+ '
									FROM #TAB WHERE BRKGTYPE=''Dlv'' and ClosingQty>0
									GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK
									) AS JJ WHERE (DEBITRESULT<>0 OR CREDITRESULT<>0)'
								
								---Testing
									--print @Sql
									--Drop Table Tab
									--Select * into Tab From #TAB
								----end Testing
								INSERT INTO @JournalVoucher(MAINACID,SUBACID,NARRATION,DEBIT,CREDIT,Prefix) EXEC(@SQL)
								---Select * from @JournalVoucher

			--					SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID
			--					,SUM(ISNULL(CLOSINGVALUE,0)) as CloseVale,SUM(ISNULL(MKTVALUE,0)) as MktValue,
			--					CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0))-SUM(ISNULL(CLOSINGVALUE,0)) ELSE  NULL END AS RESULT,
			--					CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(CLOSINGQTY,0)) ELSE NULL END AS SUMQTY,
			--					CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE 
			--						CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))>SUM(ISNULL(MKTVALUE,0)) THEN SUM(ISNULL(MKTVALUE,0))/SUM(ISNULL(CLOSINGQTY,0))
			--					ELSE NULL END END AS RATE FROM #TAB WHERE BRKGTYPE='Dlv' GROUP BY MASTERPRODUCTID,JVPRODUCTID
			--
								---------------FOR VALUATION PL
									SELECT @SQL=''
									IF @closemethod<>'0'
									BEGIN
										
											 SELECT @SQL='
														 SELECT MAINACC,JVPRID,
														 ''Profit/Loss on Valuation Of Closing Stock ''+dbo.fn_FormatNumber(CAST(SUMQTY AS VARCHAR(8000)),''Y'') +'' @ ''+ dbo.fn_FormatNumber(CAST(CAST(RATE AS NUMERIC(28,4)) AS VARCHAR(8000)),''N'')+'' /-'' AS NARRATION,
														 ABS(DEBITRESULT),ABS(CREDITRESULT),''YP''
														 FROM 
														(SELECT ''SYSTM00019'' AS MAINACC,
														 CASE WHEN RESULT>0 THEN RESULT ELSE NULL END  AS DEBITRESULT,
														 CASE WHEN RESULT<0 THEN RESULT ELSE NULL END   AS CREDITRESULT,
														 SUMQTY,RATE,ASSETID,JVPRID
														 FROM
														(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,'
														IF @closemethod='1'
															BEGIN
																	SELECT @SQL=@SQL+ 'SUM(ISNULL(MKTVALUE,0))-SUM(ISNULL(CLOSINGVALUE,0)) AS RESULT,
																					   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																					   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(MKTVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
															END
														ELSE IF @closemethod in ('2','3')
															BEGIN
																	SELECT @SQL=@SQL+ 'CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(BuyValue,0))-SUM(ISNULL(CLOSINGVALUE,0)) ELSE  NULL END AS RESULT,
																					   CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(BuyQty,0)) ELSE NULL END AS SUMQTY,
																					   CASE WHEN SUM(ISNULL(BuyQTY,0))=0 THEN  NULL ELSE 
																						 CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(BuyValue,0))/SUM(ISNULL(CLOSINGQTY,0))
																						 ELSE NULL END END AS RATE '
															END
														SELECT @SQL=@SQL+ '
														FROM #TAB WHERE BRKGTYPE=''Dlv'' and ClosingQty>0
														GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK

														UNION ALL

														 SELECT ''SYSTM00012'' AS MAINACC,
														 CASE WHEN RESULT>0 THEN RESULT ELSE NULL END  AS DEBITRESULT,
														 CASE WHEN RESULT<0 THEN RESULT ELSE NULL END   AS CREDITRESULT,
														 SUMQTY,RATE,ASSETID,JVPRID
														 FROM
														(SELECT MASTERPRODUCTID AS ASSETID,JVPRODUCTID AS JVPRID,'
														IF @closemethod='1'
															BEGIN
																	SELECT @SQL=@SQL+ 'SUM(ISNULL(MKTVALUE,0))-SUM(ISNULL(CLOSINGVALUE,0)) AS RESULT,
																					   SUM(ISNULL(CLOSINGQTY,0)) AS SUMQTY,
																					   CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN  NULL ELSE (SUM(ISNULL(MKTVALUE,0)))/(SUM(ISNULL(CLOSINGQTY,0))) END AS RATE '
															END
														ELSE IF @closemethod in ('2','3')
															BEGIN
																	SELECT @SQL=@SQL+ 'CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(CLOSINGVALUE,0))-SUM(ISNULL(BuyValue,0)) ELSE  NULL END AS RESULT,
																					   CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(BuyQty,0)) ELSE NULL END AS SUMQTY,
																					   CASE WHEN SUM(ISNULL(BuyQty,0))=0 THEN  NULL ELSE 
																						 CASE WHEN SUM(ISNULL(BuyValue,0))>SUM(ISNULL(CLOSINGVALUE,0)) THEN SUM(ISNULL(BuyValue,0))/SUM(ISNULL(CLOSINGQTY,0))
																						 ELSE NULL END END AS RATE '
															END
														SELECT @SQL=@SQL+ '
														FROM #TAB WHERE BRKGTYPE=''Dlv'' and ClosingQty>0
														GROUP BY MASTERPRODUCTID,JVPRODUCTID) AS KK
														
														) AS JJ WHERE (DEBITRESULT<>0 OR CREDITRESULT<>0) AND SUMQTY IS NOT NULL'
									END
									
								
								
								-----Testing	
								
								--Drop Table Tab
								--Select * into Tab From #TAB	
								--print @SQL
								INSERT INTO @JournalVoucher(MAINACID,SUBACID,NARRATION,DEBIT,CREDIT,Prefix) EXEC(@SQL)
						
								---Select * from @JournalVoucher


							----This Query Send Data To The Page To Create Jv By Sending DataSet To Another Sp 'XMLJournalVoucherInsert_Update'
							----Now It Directly Inserted In Table in JournalVoucher,JournalVoucherDetail,AccountsLedger
							----Code Is Written Below
							------------SELECT 1 AS CashReportID,1 AS JournalVoucherDetail_ID,
							------------@SEGMENTJV AS JournalVoucherDetail_ExchangeSegmentID,1 AS JournalVoucherDetail_BranchID,
							------------MAINACID AS JournalVoucherDetail_MainAccountCode,SUBACID AS JournalVoucherDetail_SubAccountCode,
							------------ABS(ISNULL(DEBIT,0)) AS JournalVoucherDetail_AmountDr,ABS(ISNULL(CREDIT,0)) AS JournalVoucherDetail_AmountCr,
							------------NARRATION AS JournalVoucherDetail_Narration,
							------------@Date AS JournalVoucherDetail_ValueDate1,NULL AS MNarration,@Date AS TranDate,
							------------NULL AS SettNo,NULL AS SettType,NULL AS BillNo,'Products-Equity' AS Type,Prefix AS Prefix
							------------FROM @JournalVoucher ORDER BY Prefix,SUBACID 

							---------------DELETE DATA
							

							DELETE FROM Trans_JournalVoucherDetail
							WHERE JournalVoucherDetail_VOUCHERNUMBER IN
							(
																		SELECT DISTINCT JournalVoucher_VOUCHERNUMBER
																		FROM Trans_JournalVoucher
																		WHERE JournalVoucher_Prefix IN('YN','YO','YP','UA','UB')
																		AND JournalVoucher_FINYEAR=@finyear
																		AND JournalVoucher_COMPANYID=@companyid
							)
							

							DELETE FROM Trans_AccountsLedger
							WHERE AccountsLedger_TransactionReferenceID IN
							(
																		SELECT DISTINCT JournalVoucher_VOUCHERNUMBER
																		FROM Trans_JournalVoucher
																		WHERE JournalVoucher_Prefix IN('YN','YO','YP','UA','UB')
																		AND JournalVoucher_FINYEAR=@finyear
																		AND JournalVoucher_COMPANYID=@companyid
							)
							AND AccountsLedgeR_FINYEAR=@finyear
							AND AccountsLedgeR_COMPANYID=@companyid

							DELETE FROM Trans_JournalVoucher
							WHERE JournalVoucher_Prefix IN('YN','YO','YP','UA','UB')
							AND JournalVoucher_FINYEAR=@finyear
							AND JournalVoucher_COMPANYID=@companyid


							-------------New Addition For Creating Voucher ('YN'--P/L On Sale || 'YP' ---P/L ON Valuation || 'YO' ---Closing Stock JV)
							-----Get Raw Data Into Temp Table
							
							Select * into  #JVCreationData
							From
							(SELECT 1 AS CashReportID,1 AS JournalVoucherDetail_ID,
							@SEGMENTJV AS JournalVoucherDetail_ExchangeSegmentID,1 AS JournalVoucherDetail_BranchID,
							MAINACID AS JournalVoucherDetail_MainAccountCode,SUBACID AS JournalVoucherDetail_SubAccountCode,
							ABS(ISNULL(DEBIT,0)) AS JournalVoucherDetail_AmountDr,ABS(ISNULL(CREDIT,0)) AS JournalVoucherDetail_AmountCr,
							NARRATION AS JournalVoucherDetail_Narration,
							@Date AS JournalVoucherDetail_ValueDate1,NULL AS MNarration,@Date AS TranDate,
							NULL AS SettNo,NULL AS SettType,NULL AS BillNo,'Products-Equity' AS Type,Prefix AS Prefix
							FROM @JournalVoucher) as JVC
							
							
							---Temp Table Creation From Raw Data
							Select * into #JournalVoucher
							From
							(Select Distinct @finyear FinYear,@companyid CompID,JournalVoucherDetail_ExchangeSegmentID,JournalVoucherDetail_BranchID,TranDate,
							'A' GenerationType,Prefix,dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid) JVNumber,
							Null Narration,@CreateUser CreateUser,GETDATE() CreateDateTime,Replace((dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid)),'/','') IBRef,'NB' InterBranch
							from #JVCreationData) as JV
							 
							 
							 Select * into #JournalVoucherDetail
							 From
							 (Select dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid) JvNumber,JournalVoucherDetail_ExchangeSegmentID,JournalVoucherDetail_BranchID,
							 JournalVoucherDetail_MainAccountCode,JournalVoucherDetail_SubAccountCode,JournalVoucherDetail_AmountDr,JournalVoucherDetail_AmountCr,
							 JournalVoucherDetail_Narration,@CreateUser CreateUser,GETDATE() CreateDateTime,TranDate,JournalVoucherDetail_ValueDate1,
							 Replace((dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid)),'/','') IBRef
							 From #JVCreationData) as JVD
							 
							 
							 Select * into #AccountsLedger
							 From
							 (Select @finyear finYear,@companyid compID,JournalVoucherDetail_BranchID,JournalVoucherDetail_ExchangeSegmentID,
							 JournalVoucherDetail_MainAccountCode,JournalVoucherDetail_SubAccountCode,'Journal' GenerationType,TranDate,JournalVoucherDetail_ValueDate1,
							 dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid) TransactionRefID,
							 JournalVoucherDetail_Narration,JournalVoucherDetail_AmountDr,JournalVoucherDetail_AmountCr,
							 Replace((dbo.fnGetNextJVID(Prefix,(DATEADD(dd, 0, DATEDIFF(dd, 0, TranDate))),JournalVoucherDetail_ExchangeSegmentID ,@companyid)),'/','') IBRef
							 from #JVCreationData) as AL
							 
							 ---End Temp Table Creation From Raw Data
			 
							----Testing 
							--Select * from #JournalVoucher
							--Select * from #JournalVoucherDetail
							--Select * from #AccountsLedger
							---Testing End
						
							------------Insert Data Into Actual Tables
							INSERT INTO [Trans_JournalVoucher]
						   ([JournalVoucher_FinYear],[JournalVoucher_CompanyID],[JournalVoucher_ExchangeSegmentID],[JournalVoucher_BranchID]
						   ,[JournalVoucher_TransactionDate],[JournalVoucher_GenerationType],[JournalVoucher_Prefix],[JournalVoucher_VoucherNumber]
						   ,[JournalVoucher_Narration]
						   ,[JournalVoucher_CreateUser],[JournalVoucher_CreateDateTime],[JournalVoucher_Ibref],[JournalVoucher_InterBranch]
							)
							Select * from #JournalVoucher	 
							
							INSERT INTO [Trans_JournalVoucherDetail]
						   ([JournalVoucherDetail_VoucherNumber],[JournalVoucherDetail_ExchangeSegmentID],[JournalVoucherDetail_BranchID]
						   ,[JournalVoucherDetail_MainAccountCode],[JournalVoucherDetail_SubAccountCode]
						   ,[JournalVoucherDetail_AmountDr],[JournalVoucherDetail_AmountCr]
						   ,[JournalVoucherDetail_Narration],[JournalVoucherDetail_CreateUser],[JournalVoucherDetail_CreateDateTime]
						   ,[JournalVoucherDetail_TransactionDate],JournalVoucherDetail_ValueDate,JournalVoucherDetail_Ibref
							)
							Select * from #JournalVoucherDetail
							
							INSERT INTO [Trans_AccountsLedger]
							([AccountsLedger_FinYear],[AccountsLedger_CompanyID],[AccountsLedger_BranchId],[AccountsLedger_ExchangeSegmentID]
							,[AccountsLedger_MainAccountID],[AccountsLedger_SubAccountID]
							,[AccountsLedger_TransactionType],[AccountsLedger_TransactionDate],[AccountsLedger_ValueDate]
							,[AccountsLedger_TransactionReferenceID],[AccountsLedger_Narration],[AccountsLedger_AmountDr],[AccountsLedger_AmountCr]
							,[AccountsLedger_Ibref])
							Select * from #AccountsLedger
							
							---End Insert Data Into Actual Tables
							
							Drop Table #AccountsLedger
							Drop Table #JournalVoucher
							Drop Table #JournalVoucherDetail
							Drop Table #JVCreationData
							
							-----------End New Addition For Creating Voucher ('YN'--P/L On Sale || 'YP' ---P/L ON Valuation || 'YO' ---Closing Stock JV)
							
							----------Testing
							----Select isnull((Select 1 from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear and JournalVoucher_CompanyID=@companyid
							----and JournalVoucher_Prefix in ('YN','YO','YP')),0)
							
							----Select isnull((Select 1 From Trans_JournalVoucherDetail Where JournalVoucherDetail_IbRef in (Select JournalVoucher_IBRef from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear and JournalVoucher_CompanyID=@companyid
							----and JournalVoucher_Prefix in ('YN','YO','YP'))),0)
							
							----Select isnull((Select 1 From Trans_AccountsLedger Where AccountsLedger_IBRef in (Select JournalVoucher_IBRef from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear and JournalVoucher_CompanyID=@companyid
							----and JournalVoucher_Prefix in ('YN','YO','YP'))),0)
							----------Testing End
							
							----Checking That Data Inserted Properly On Not
							Declare @IsSuccess int
							Set @IsSuccess=0
							If(isnull((Select Top 1 1 from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear and JournalVoucher_CompanyID=@companyid
							and JournalVoucher_Prefix in ('YN','YO','YP')),0)=1)
								Set @IsSuccess=1
								
							if(isnull((Select Top 1 1 From Trans_JournalVoucherDetail Where JournalVoucherDetail_IbRef in 
							(Select JournalVoucher_IBRef from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear and 
							JournalVoucher_CompanyID=@companyid and JournalVoucher_Prefix in ('YN','YO','YP'))),0)=1)
								Set @IsSuccess=@IsSuccess+1
								
							if(isnull((Select Top 1 1 From Trans_AccountsLedger Where AccountsLedger_IBRef in 
							(Select JournalVoucher_IBRef from Trans_JournalVoucher Where JournalVoucher_FinYear=@finyear 
							and JournalVoucher_CompanyID=@companyid and JournalVoucher_Prefix in ('YN','YO','YP'))),0)=1)
								Set @IsSuccess=@IsSuccess+1
							
							if(@IsSuccess=3)
								Select 1
							else
								Select 0
							
							
							
							 
							
							------------------------------------------------------------------------------------------------------------------------------
							
							
							--------------------UA Type Voucher Create
							
							Select @VoucherNo = dbo.fnGetNextJVID
							(
								 'UA'
								,cast(@Date  as datetime)
								,@SEGMENTJV 
								,@companyid
							)

							Insert into #VoucherID(Seriesid,ProfitLoss,VoucherNumber)
							Select Seriesid,Sum(isnull(ProfitLoss,0)) as ProfitLoss,
							Left(@VoucherNo,11)+dbo.FnPaddingLeft(7,(cast(Right(@VoucherNo,7) as bigint)+(ROW_NUMBER() OVER (ORDER BY Seriesid)-1) ))  AS VoucherNumber 
							From #TbAucDiffPl Group By Seriesid
					


							INSERT INTO [Trans_JournalVoucher]
						   ([JournalVoucher_FinYear],[JournalVoucher_CompanyID],[JournalVoucher_ExchangeSegmentID],[JournalVoucher_BranchID]
						   ,[JournalVoucher_TransactionDate],[JournalVoucher_GenerationType],[JournalVoucher_Prefix],[JournalVoucher_VoucherNumber]
						   ,[JournalVoucher_Narration]
						   ,[JournalVoucher_CreateUser],[JournalVoucher_CreateDateTime],[JournalVoucher_Ibref],[JournalVoucher_InterBranch]
							)	 

							Select   @finyear,@companyid,@SEGMENTJV,1
									,cast(@Date as datetime),'A' as GenType,'UA' as Prefix,VoucherNumber
									,'Trading P/L Due to Auction - transferred to Pro-Trading A/c' 
									,@CreateUser,getDate()
									,@SEGMENTJV+Replace(VoucherNumber,'/',''),'B'
							From #VoucherID
							

							INSERT INTO [Trans_JournalVoucherDetail]
						   ([JournalVoucherDetail_VoucherNumber],[JournalVoucherDetail_ExchangeSegmentID],[JournalVoucherDetail_BranchID]
						   ,[JournalVoucherDetail_MainAccountCode],[JournalVoucherDetail_SubAccountCode]
						   ,[JournalVoucherDetail_AmountDr],[JournalVoucherDetail_AmountCr]
						   ,[JournalVoucherDetail_Narration],[JournalVoucherDetail_CreateUser],[JournalVoucherDetail_CreateDateTime]
						   ,[JournalVoucherDetail_TransactionDate],JournalVoucherDetail_ValueDate,JournalVoucherDetail_Ibref
							)

							Select  VoucherNumber,@SEGMENTJV,1
							,'SYSTM00012',Seriesid
							,case when isnull(ProfitLoss,0)>0 then abs(isnull(ProfitLoss,0)) else 0 end
							,case when isnull(ProfitLoss,0)<0 then abs(isnull(ProfitLoss,0)) else 0 end
							,'Trading P/L Due to Auction - transferred to Pro-Trading A/c' 
							,@CreateUser,GetDate()
							,cast(@Date as datetime),cast(@Date as datetime),@SEGMENTJV+Replace(VoucherNumber,'/','')
							From #VoucherID

							Union All

							Select  VoucherNumber,@SEGMENTJV,1
							,'SYSTM00011',Seriesid
							,case when isnull(ProfitLoss,0)<0 then abs(isnull(ProfitLoss,0)) else 0 end
							,case when isnull(ProfitLoss,0)>0 then abs(isnull(ProfitLoss,0)) else 0 end
							,'Trading P/L Due to Auction - transferred to Pro-Trading A/c' 
							,@CreateUser,GetDate()
							,cast(@Date as datetime),cast(@Date as datetime),@SEGMENTJV+Replace(VoucherNumber,'/','')
							From #VoucherID
							
							------------Fetch Scrip Name 
							Update #VoucherID Set ScripName=case when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is null
											then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')
										   when isnull(Equity_StrikePrice,0.0)<>0.0 and Equity_EffectUntil is null
											then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)
										   when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is not null
											then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+convert(varchar(9),Equity_EffectUntil,6)
										   else isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)+' '+convert(varchar(9),Equity_EffectUntil,6)
									   end
							FROM MASTER_EQUITY WHERE Equity_SeriesID=Seriesid

							Update #VoucherID Set Flag='Sys12' From Master_Subaccount Where Subaccount_mainAcReferenceId='SYSTM00012' and SubAccount_code=Seriesid
							
							
							Insert Into Master_Subaccount(Subaccount_mainAcReferenceId,SubAccount_code,subaccount_name)
							Select distinct 'SYSTM00012',Seriesid,ScripName From #VoucherID Where isnull(Flag,'kkkkkkkk')<>'Sys12'

							Update #VoucherID Set Flag='Sys11' From Master_Subaccount Where Subaccount_mainAcReferenceId='SYSTM00011' and SubAccount_code=Seriesid
							
							
							Insert Into Master_Subaccount(Subaccount_mainAcReferenceId,SubAccount_code,subaccount_name)
							Select distinct 'SYSTM00011',Seriesid,ScripName From #VoucherID Where isnull(Flag,'kkkkkkkk')<>'Sys11'


							-------------Insert Into Accounts Ledger
							INSERT INTO [Trans_AccountsLedger]
							([AccountsLedger_FinYear],[AccountsLedger_CompanyID],[AccountsLedger_BranchId],[AccountsLedger_ExchangeSegmentID]
							,[AccountsLedger_MainAccountID],[AccountsLedger_SubAccountID]
							,[AccountsLedger_TransactionType],[AccountsLedger_TransactionDate],[AccountsLedger_ValueDate]
							,[AccountsLedger_TransactionReferenceID],[AccountsLedger_Narration],[AccountsLedger_AmountDr],[AccountsLedger_AmountCr]
							,[AccountsLedger_Ibref])

							Select Distinct @finyear,@companyid,1,@SEGMENTJV
							,[JournalVoucherDetail_MainAccountCode],[JournalVoucherDetail_SubAccountCode]
							,'Journal',Cast(@Date as Datetime),Cast(@Date as Datetime)
							,JournalVoucherDetail_vouchernumber,[JournalVoucherDetail_Narration],[JournalVoucherDetail_AmountDr],[JournalVoucherDetail_AmountCr],
							 JournalVoucherDetail_Ibref
							 From [Trans_JournalVoucherDetail]
							 Where [JournalVoucherDetail_TransactionDate]=Cast(@Date as Datetime)
							 and [JournalVoucherDetail_MainAccountCode] in ('SYSTM00011','SYSTM00012') 
							 and [JournalVoucherDetail_SubAccountCode] in (Select Distinct Seriesid From #VoucherID)
							 and [JournalVoucherDetail_ExchangeSegmentID]=@SEGMENTJV 
							 and left(JournalVoucherDetail_vouchernumber ,2) in ('UA')
							 and [JournalVoucherDetail_CreateUser]=@CreateUser
							 
							 
							 

						--------------------------------------------UA Type Voucher End

			----------------------------------------------------UB Type Voucher Begin-------------------------------------------------------------------
			--- Code for UB type voucher supressed as of now as in some cases it is generating wrong entries...needs to be rectified----
							------------Other JvSegment
							--Insert Into #TbInterSegment(MstPrd,Segmentid,SubAcId)
							--Select Distinct MASTERPRODUCTID,EXCH_INTERNALID,PRODUCTID
							--From 
							--(Select MASTERPRODUCTID,PRODUCTID,Segment From #TAB Where MASTERPRODUCTID in  
							--														  (Select MASTERPRODUCTID From (Select Distinct MASTERPRODUCTID,PRODUCTID From #TAB) as op Group By MASTERPRODUCTID 
							--														   Having Count(MASTERPRODUCTID)>1)
							--) as TbP,
								
							--(Select CASE WHEN EXCH_EXCHID='EXN0000002' THEN 'NSE' 
							--			 WHEN EXCH_EXCHID='EXB0000001' THEN 'BSE' 
							--			 WHEN EXCH_EXCHID='EXC0000001' THEN 'CSE'
							--			 END as SegMentName,EXCH_INTERNALID
							-- From tbl_master_companyexchange WHERE EXCH_INTERNALID<>@SEGMENTJV AND EXCH_COMPID=@companyid
							-- AND EXCH_SEGMENTID='CM'
							--) as Tbj
							--Where SegMentName=Segment
							
							



							-----------------Fetch AccountsLedger Data
							--Update #TbInterSegment Set AmntDr=Case When isnull(closing,0)<0 Then 0 Else abs(isnull(closing,0)) End
							--						  ,AmntCr=Case When isnull(closing,0)<0 Then abs(isnull(closing,0)) Else 0 End
							--						  ,MainAcId='SYSTM00012'
							--From
							--(
							--Select sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0)) as closing
							--,AccountsLedger_SubAccountID as SubAccountID,AccountsLedger_ExchangeSegmentID as ExchangeSegmentID
							--From trans_accountsledger,(Select Distinct Segmentid,SubAcId From #TbInterSegment ) as TabKK
							--Where ltrim(rtrim(AccountsLedger_FinYear))=@finyear
							--AND AccountsLedger_ExchangeSegmentID=Segmentid and AccountsLedger_SubAccountID=SubAcId
							--and AccountsLedger_mainaccountid='SYSTM00012'
							--AND AccountsLedger_TransactionDate<=@Date AND AccountsLedger_CompanyID=@companyid
							--Group by AccountsLedger_SubAccountID,AccountsLedger_ExchangeSegmentID
							--Having sum(isnull(accountsledger_amountCr,0.0)-isnull(accountsledger_amountDr,0.0))<>0
							--) as Kk
							--Where ExchangeSegmentID=Segmentid and SubAccountID=SubAcId
							
							
							-------------Insert Into 
							--Insert Into #TbInterSegment(MstPrd,Segmentid,MainAcId,SubAcId,AmntDr,AmntCr)
							--Select Distinct MstPrd,Segmentid,'SYSTM00041',SubAcId,AmntCr,AmntDr
							--From #TbInterSegment

							
							-----------Same Jv Insert
							--Insert Into #TbInterSegment(MstPrd,Segmentid,MainAcId,SubAcId,AmntDr,AmntCr)
							--Select Distinct MASTERPRODUCTID,@SEGMENTJV,
							--Case When MainAcId='SYSTM00041' Then 'SYSTM00012' Else 'SYSTM00041' End,PrdId,AmntDr,AmntCr
							--From 
							--(Select MASTERPRODUCTID,PRODUCTID as PrdId,Segment From #TAB Where MASTERPRODUCTID in  
							--														  (Select MASTERPRODUCTID From (Select Distinct MASTERPRODUCTID,PRODUCTID From #TAB) as op Group By MASTERPRODUCTID 
							--														   Having Count(MASTERPRODUCTID)>1)
							--) as TbP,
								
							--(Select CASE WHEN EXCH_EXCHID='EXN0000002' THEN 'NSE' 
							--			 WHEN EXCH_EXCHID='EXB0000001' THEN 'BSE' 
							--			 WHEN EXCH_EXCHID='EXC0000001' THEN 'CSE'
							--			 END as SegMentName,EXCH_INTERNALID
							--From  tbl_master_companyexchange WHERE EXCH_INTERNALID=@SEGMENTJV AND EXCH_COMPID=@companyid
							-- AND EXCH_SEGMENTID='CM'
							--) as Tbj,#TbInterSegment
							--Where SegMentName=Segment and MstPrd=MASTERPRODUCTID

							
							--Delete From #TbInterSegment Where (isnull(AmntDr,0)+isnull(AmntCr,0))=0
							
							-----------------Voucher Number Fetch
							--Update #TbInterSegment Set VoucherNumber='UB/'+ Replace(CONVERT(char(10),Cast(@Date as Datetime), 103),'/','')+ dbo.FnPaddingLeft(7,VNo)
							--From
							--(Select Max(cast(right(JournalVoucher_VoucherNumber,6) as bigint)) as VNo,JournalVoucher_ExchangeSegmentID as ExchangeSegmentID
							--From Trans_JournalVoucher
							--Where JournalVoucher_Prefix='UB'
							--and JournalVoucher_TransactionDate=@Date and JournalVoucher_ExchangeSegmentID in (Select Distinct Segmentid From #TbInterSegment)
							--and JournalVoucher_CompanyID=@companyid	
							--Group By JournalVoucher_ExchangeSegmentID) as Kk 
							--Where ExchangeSegmentID=Segmentid

							-----------------Voucher Number is Null Fetch
							--Update #TbInterSegment Set VoucherNumber='UB/'+ Replace(CONVERT(char(10),Cast(@Date as Datetime), 103),'/','')+ dbo.FnPaddingLeft(7,1)
							--Where VoucherNumber is null

							-----------------Main Voucher Number is Null Fetch
							--Update #TbInterSegment Set VoucherNumber=SubAcIdVoucherNo From 
							--(Select SubAcId as SubAcId1,
							--Left(VoucherNumber,11)+dbo.FnPaddingLeft(7,(cast(Right(VoucherNumber,7) as bigint)+(ROW_NUMBER() OVER (ORDER BY SubAcId)-1))) as SubAcIdVoucherNo
							--From
							--(Select distinct SubAcId,VoucherNumber From #TbInterSegment) as  kk)as jj
							--Where SubAcId=SubAcId1



				
							--INSERT INTO [Trans_JournalVoucher]
						 --  ([JournalVoucher_FinYear],[JournalVoucher_CompanyID],[JournalVoucher_ExchangeSegmentID],[JournalVoucher_BranchID]
						 --  ,[JournalVoucher_TransactionDate],[JournalVoucher_GenerationType],[JournalVoucher_Prefix],[JournalVoucher_VoucherNumber]
						 --  ,[JournalVoucher_Narration]
						 --  ,[JournalVoucher_CreateUser],[JournalVoucher_CreateDateTime],[JournalVoucher_Ibref],[JournalVoucher_InterBranch]
							--)	 

							--Select  Distinct  @finyear,@companyid,Segmentid,1
							--		,cast(@Date as datetime),'A' as GenType,'UB' as Prefix,VoucherNumber
							--		,'Inter-Segment Transfer JV upon Stock-Journal Adjustment' 
							--		,@CreateUser,getDate()
							--		,Segmentid+Replace(VoucherNumber,'/',''),'B'
							--From #TbInterSegment
							
							--INSERT INTO [Trans_JournalVoucherDetail]
						 --  ([JournalVoucherDetail_VoucherNumber],[JournalVoucherDetail_ExchangeSegmentID],[JournalVoucherDetail_BranchID]
						 --  ,[JournalVoucherDetail_MainAccountCode],[JournalVoucherDetail_SubAccountCode]
						 --  ,[JournalVoucherDetail_AmountDr],[JournalVoucherDetail_AmountCr]
						 --  ,[JournalVoucherDetail_Narration],[JournalVoucherDetail_CreateUser],[JournalVoucherDetail_CreateDateTime]
						 --  ,[JournalVoucherDetail_TransactionDate],JournalVoucherDetail_ValueDate,JournalVoucherDetail_Ibref
							--)
							--Select  VoucherNumber,Segmentid,1
							--,MainAcId,SubAcId,AmntDr,AmntCr
							--,'Inter-Segment Transfer JV upon Stock-Journal Adjustment' 
							--,@CreateUser,GetDate()
							--,cast(@Date as datetime),cast(@Date as datetime),Segmentid+Replace(VoucherNumber,'/','')
							--From #TbInterSegment

							

							--------------Fetch Scrip Name 
							--Update #TbInterSegment Set ScripName=case when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is null
							--			    then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')
							--			   when isnull(Equity_StrikePrice,0.0)<>0.0 and Equity_EffectUntil is null
							--				then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)
							--			   when isnull(Equity_StrikePrice,0.0)=0.0 and Equity_EffectUntil is not null
							--				then isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+convert(varchar(9),Equity_EffectUntil,6)
							--			   else isnull(rtrim(Equity_TickerSymbol),'')+' '+isnull(rtrim(Equity_Series),'['+rtrim(Equity_tickercode)+']')+' '+cast(cast(round(Equity_StrikePrice,2) as numeric(28,2)) as varchar)+' '+convert(varchar(9),Equity_EffectUntil,6)
							--		   end
							--FROM MASTER_EQUITY WHERE Equity_SeriesID=SubAcId

							--Update #TbInterSegment Set Flag='Sys12' From Master_Subaccount Where Subaccount_mainAcReferenceId='SYSTM00012' and SubAccount_code=SubAcId
							
							
							--Insert Into Master_Subaccount(Subaccount_mainAcReferenceId,SubAccount_code,subaccount_name)
							--Select distinct 'SYSTM00012',SubAcId,ScripName From #TbInterSegment Where isnull(Flag,'kkkkkkkk')<>'Sys12'

							--Update #TbInterSegment Set Flag='Sys11' From Master_Subaccount Where Subaccount_mainAcReferenceId='SYSTM00011' and SubAccount_code=SubAcId
							
							
							--Insert Into Master_Subaccount(Subaccount_mainAcReferenceId,SubAccount_code,subaccount_name)
							--Select distinct 'SYSTM00011',SubAcId,ScripName From #TbInterSegment Where isnull(Flag,'kkkkkkkk')<>'Sys11'


							---------------Insert Into Accounts Ledger
							--INSERT INTO [Trans_AccountsLedger]
							--([AccountsLedger_FinYear],[AccountsLedger_CompanyID],[AccountsLedger_BranchId],[AccountsLedger_ExchangeSegmentID]
							--,[AccountsLedger_MainAccountID],[AccountsLedger_SubAccountID]
							--,[AccountsLedger_TransactionType],[AccountsLedger_TransactionDate],[AccountsLedger_ValueDate]
							--,[AccountsLedger_TransactionReferenceID],[AccountsLedger_Narration],[AccountsLedger_AmountDr],[AccountsLedger_AmountCr])

							--Select Distinct @finyear,@companyid,1,Segmentid
							--,[JournalVoucherDetail_MainAccountCode],[JournalVoucherDetail_SubAccountCode]
							--,'Journal',Cast(@Date as Datetime),Cast(@Date as Datetime)
							--,JournalVoucherDetail_vouchernumber,[JournalVoucherDetail_Narration],[JournalVoucherDetail_AmountDr],[JournalVoucherDetail_AmountCr]
							-- From [Trans_JournalVoucherDetail],#TbInterSegment
							-- Where [JournalVoucherDetail_TransactionDate]=Cast(@Date as Datetime)
							-- and [JournalVoucherDetail_MainAccountCode]= MainAcId
							-- and [JournalVoucherDetail_SubAccountCode]=SubAcId
							-- and [JournalVoucherDetail_ExchangeSegmentID]=Segmentid 
							-- and left(JournalVoucherDetail_vouchernumber ,2) in ('UB')
							-- and [JournalVoucherDetail_CreateUser]=@CreateUser
			----------------------------------------------------UB Type Voucher End-------------------------------------------------------------------
							

				END
		----------------------FOR JV CREATION END 
			Else If @jvcreate='Open'
			Begin-------Opening Stock Begin

					delete from #TAB where isnull(CLOSINGQTY,0)=0 and @rpttype in ('3','4','5')
					create table #TabOpen(MASTERPRODUCTID VARCHAR(30),PRODUCTID VARCHAR(30),ExchangeSegmentId varchar(30),
					CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),AVGCOST NUMERIC(28,4),
					CLOSEPRICE numeric(28,4),MKTVALUE numeric(28,2),
					METHODCLOSEPRICE NUMERIC(28,4),METHODCLOSEVALUE NUMERIC(28,2),Date Datetime)
					if(@closemethod<>3)
					Begin
						
						Insert Into #TabOpen(MASTERPRODUCTID,PRODUCTID,Date,CLOSINGQTY,AVGCOST,CLOSINGVALUE,ExchangeSegmentId)
						SELECT MASTERPRODUCTID,PRODUCTID,DATE,
						case when @closemethod in ('0','1','2') Then SUM(ISNULL(CLOSINGQTY,0)) ELse Null end,
						case when @closemethod in ('0','1','2') Then SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0))  ELse Null end,
						case when @closemethod in ('0','1','2') Then SUM(ISNULL(CLOSINGVALUE,0)) ELse Null end,
						Case When SEGMENT='NSE' Then 1 When SEGMENT='BSE' Then 4 When SEGMENT='MCXSX' Then 19 else null End
						FROM #TAB GROUP BY MASTERPRODUCTID,PRODUCTID,DATE,SEGMENT
						
						--------CLOSING PRICE AND MKTVALUE FETCH
						
						--This is For the Purpose To Set Only NSE Close Price Even Product Of BSE
						if(@closemethod in ('1','2','3'))
							Set @ClosePriceVDate=@ValuationDate
						else 
							Set @ClosePriceVDate=@fromdate
					
						Update #TabOpen Set ClosePrice=isnull(DailyStat_Close,0),MKTVALUE=ISNULL(CLOSINGQTY,0)*ISNULL(DailyStat_Close,0) From
						(Select Equity_ExchSegmentID,DailyStat_ProductSeriesID,DailyStat_Close,Equity_ProductID
						From Master_Equity,
						(Select DailyStat_ProductSeriesID,DailyStat_Close from Trans_DailyStatistics,
						(Select DailyStat_ProductSeriesID as ProductSeriesID,
						Max(DailyStat_DateTime) as  [DateTime]
						from Trans_DailyStatistics,#Tab
						Where DailyStat_ProductSeriesID=ProductID
						and DailyStat_DateTime<=@ClosePriceVDate
						and isnull(CLOSINGQTY,0.0)<>0.0 
						Group By DailyStat_ProductSeriesID) as T1
						Where DailyStat_ProductSeriesID=ProductSeriesID
						and DailyStat_DateTime=[DateTime]) as T2
						Where DailyStat_ProductSeriesID=Equity_SeriesID
						and Equity_ExchSegmentID=1) as T3
						Where Equity_ProductID=MasterProductID and
						isnull(CLOSINGQTY,0.0)<>0.0 


						Update #TabOpen Set ClosePrice=isnull(DailyStat_Close,0),MKTVALUE=ISNULL(CLOSINGQTY,0)*ISNULL(DailyStat_Close,0) From
						(Select Equity_ExchSegmentID,DailyStat_ProductSeriesID,DailyStat_Close,Equity_ProductID
						From Master_Equity,
						(Select DailyStat_ProductSeriesID,DailyStat_Close from Trans_DailyStatistics,
						(Select DailyStat_ProductSeriesID as ProductSeriesID,
						Max(DailyStat_DateTime) as  [DateTime]
						from Trans_DailyStatistics,#Tab
						Where DailyStat_ProductSeriesID=ProductID
						and DailyStat_DateTime<=@ClosePriceVDate
						and isnull(CLOSINGQTY,0.0)<>0.0 
						Group By DailyStat_ProductSeriesID) as T1
						Where DailyStat_ProductSeriesID=ProductSeriesID
						and DailyStat_DateTime=[DateTime]) as T2
						Where DailyStat_ProductSeriesID=Equity_SeriesID
						and Equity_ExchSegmentID in(1,4)) as T3
						Where Equity_ProductID=MasterProductID and
						isnull(CLOSINGQTY,0.0)<>0.0 and 
						ClosePrice is null
						
						--Old 
						--UPDATE #TabOpen SET CLOSEPRICE=isnull(DailyStat_Close,0)
						--From Trans_DailyStatistics WHERE DailyStat_ProductSeriesID=PRODUCTID
						--AND DailyStat_DateTime=@ValuationDate  and @closemethod in ('1','2')
						
					 
						
			----	**[At Market]
			
						UPDATE #TabOpen SET 
						CLOSEPRICE=ISNULL(CLOSEPRICE,0),
						CLOSINGVALUE=ISNULL(CLOSINGVALUE,0),
						CLOSINGQTY=ISNULL(CLOSINGQTY,0),
						MKTVALUE=ISNULL(MKTVALUE,0),
						METHODCLOSEPRICE=isnull(CLOSEPRICE,0),
						METHODCLOSEVALUE=isnull(MKTVALUE,0)
						WHERE  @closemethod in ('1')


			----	**[Cost/Market Lower]
			
						UPDATE #TabOpen SET METHODCLOSEPRICE=
						CASE 
							WHEN ISNULL(#TabOpen.CLOSEPRICE,0)>ISNULL(AVGCOST,0) 
							THEN ISNULL(AVGCOST,0) ELSE ISNULL(#TabOpen.CLOSEPRICE,0) 
						END,
						METHODCLOSEVALUE=
						CASE 
							WHEN (ISNULL(#TabOpen.CLOSEPRICE,0)>ISNULL(AVGCOST,0)) 
							THEN 
								Case When #TabOpen.CLOSEPRICE<>0 and AVGCOST<>0 Then #TAB.BUYVALUE Else 0 End
							ELSE ISNULL(#TabOpen.CLOSEPRICE,0)*ISNULL(#TabOpen.CLOSINGQTY,0) 
						END
						From #TAB
						WHERE  @closemethod in ('2') and
						#TabOpen.MASTERPRODUCTID=#TAB.MASTERPRODUCTID
						and #TAB.DATE=#TabOpen.Date
						and #Tab.PRODUCTID=#TabOpen.PRODUCTID
						
					End
					Else
					Begin
							---New Section For Avg Cost/Market Lower (e.i @CloseMethod=3)
							Insert Into #TabOpen(MASTERPRODUCTID,PRODUCTID,Date,CLOSINGQTY,AVGCOST,CLOSINGVALUE,ExchangeSegmentId)
							SELECT MASTERPRODUCTID,PRODUCTID,DATE,
							case when @closemethod in ('3') Then SUM(ISNULL(CLOSINGQTY,0)) ELse Null end,
							case when @closemethod in ('3') Then SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0))  ELse Null end,
							case when @closemethod in ('3') Then SUM(ISNULL(CLOSINGVALUE,0)) ELse Null end,
							Case When SEGMENT='NSE' Then 1 When SEGMENT='BSE' Then 4 When SEGMENT='MCXSX' Then 19 else null End
							FROM #TAB GROUP BY MASTERPRODUCTID,PRODUCTID,DATE,SEGMENT
							
							
							--------CLOSING PRICE AND MKTVALUE FETCH
							UPDATE #TabOpen SET CLOSEPRICE=AVGCOST,MKTVALUE=ISNULL(CLOSINGQTY,0)*ISNULL(AVGCOST,0)
							Where @closemethod in ('3')
							
				----			**[Avg Cost/Market Lower]
							UPDATE #TabOpen SET METHODCLOSEPRICE=AVGCOST,
							METHODCLOSEVALUE=ClosingValue
							WHERE  @closemethod in ('3')
							
							
					End

						
						
					
					Insert Into #TabOpening(ProductId,Seriesid,TradeDate,BuyQty,Cost,NetValue,ExchangeSegmentId)
					
					SELECT MASTERPRODUCTID,PRODUCTID,DATE,CLOSINGQTY,AVGCOST,CLOSINGVALUE,ExchangeSegmentId
					FROM #TabOpen Where @closemethod='0'
					Union 
					SELECT MASTERPRODUCTID,PRODUCTID,DATE,CLOSINGQTY,CLOSEPRICE,MKTVALUE,ExchangeSegmentId
					FROM #TabOpen Where @closemethod='1'
					Union 
					SELECT MASTERPRODUCTID,PRODUCTID,DATE,CLOSINGQTY,METHODCLOSEPRICE,METHODCLOSEVALUE,ExchangeSegmentId
					FROM #TabOpen Where @closemethod in ('2','3')
					
					Drop Table #TabOpen
					
					
			End-------Opening Stock End
			ELSE
			BEGIN
				
				---------If Closing Stock IsSelected
				if(@rpttype<>3)
				Begin
					delete from #TAB where isnull(CLOSINGQTY,0)=0 and @rpttype=4
					--Select * from #TAB
					UPDATE #tab set CUSTOMERID=client,CLIENTNAME=cname,ucc=uc,GROUPID=grpid,GRPNAME=grpname1 from
					(SELECT TOP 1 CUSTOMERID as client,'Self Trading A/c' as cname,'SELF' as uc,GROUPID as grpid,GRPNAME as grpname1 FROM #TAB1) as oo
				End

				----Now Drop Table Only Used for CustomerID and CientName
				DROP TABLE #TAB1
				
				-----------------------------ALL RESULT DISPLAY
				
				IF(@rpttype<>'5' And @rpttype<>'6')---Not Equal To Long-Term/Short-Term GainLoss
				Begin
					IF(@rpttype in ('3'))------Closing Stock [Summary] Begin Here
					Begin
							insert into #TabClosing(GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,
							MASTERPRODUCTID,PRODUCTNAME,CLOSINGQTY,CLOSINGVALUE,AVGCOST,CLOSEPRICE,
							STATUSORDER,CompanyID,CompanyName)
							Select 
							GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,
							Sum(isnull(Cast(Replace(ClosingQty,',','')as Numeric(28,4)),0)),
							Sum(isnull(Cast(Replace(ClosingValue,',','')as Numeric(28,4)),0)),
							Sum(isnull(Cast(Replace(BUYVALUE,',','')as Numeric(28,4)),0))/Sum(isnull(Cast(Replace(BUYQTY,',','')as Numeric(28,4)),0)),
							Sum(isnull(Cast(Replace(ClosingValue,',','')as Numeric(28,4)),0))/Sum(isnull(Cast(Replace(ClosingQty,',','')as Numeric(28,4)),0)),
							2,CompanyID,CompanyName
							from #TAB_CompanyFilter
							GROUP BY GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,CompanyID,CompanyName
							
							
							---------SERIES ID FETCH FRO [NSE]
							UPDATE #TabClosing SET PRODUCTID=PRODUCTID1 FROM
							(SELECT CUSTOMERID AS CUSTOMERID1,MASTERPRODUCTID AS MASTERPRODUCTID1,PRODUCTID AS PRODUCTID1,CompanyID
							FROM #TAB_CompanyFilter WHERE SEGMENT='NSE') AS KK
							WHERE CUSTOMERID=CUSTOMERID1 AND MASTERPRODUCTID=MASTERPRODUCTID1 
							and KK.CompanyID=#TabClosing.CompanyID
							
							---------SERIES ID FETCH FRO [BSE]
							UPDATE #TabClosing SET PRODUCTID=PRODUCTID1 FROM
							(SELECT CUSTOMERID AS CUSTOMERID1,MASTERPRODUCTID AS MASTERPRODUCTID1,PRODUCTID AS PRODUCTID1,CompanyID
							FROM #TAB_CompanyFilter WHERE SEGMENT='BSE') AS JK
							WHERE CUSTOMERID=CUSTOMERID1 AND MASTERPRODUCTID=MASTERPRODUCTID1 and PRODUCTID  is null
							and JK.CompanyID=#TabClosing.CompanyID

							---------SERIES ID FETCH FRO [MCXSX]
							UPDATE #TabClosing SET PRODUCTID=PRODUCTID1 FROM
							(SELECT CUSTOMERID AS CUSTOMERID1,MASTERPRODUCTID AS MASTERPRODUCTID1,PRODUCTID AS PRODUCTID1,CompanyID
							FROM #TAB_CompanyFilter WHERE SEGMENT='MCXSX') AS JK
							WHERE CUSTOMERID=CUSTOMERID1 AND MASTERPRODUCTID=MASTERPRODUCTID1 and PRODUCTID  is null
							and JK.CompanyID=#TabClosing.CompanyID
							----------CLOSING PRICE AND MKTVALUE FETCH
							
							----Calculation Of MarketValue On Any Kinda Method Will Be Same
							----Note At Cost Method ::  ValuationDate Will Be As On Date
							UPDATE #TabClosing SET MKTVALUE=ISNULL(CLOSINGQTY,0)*ISNULL(T2.ClosePrice,0)
							From
							(Select isnull(DailyStat_Close,0) ClosePrice,ProductSeriesID from Trans_DailyStatistics,
							(Select DailyStat_ProductSeriesID as ProductSeriesID,
							Max(DailyStat_DateTime) as  [DateTime]
							from Trans_DailyStatistics,#TabClosing
							Where DailyStat_ProductSeriesID=ProductID
							and DailyStat_DateTime<=@ValuationDate
							and isnull(CLOSINGQTY,0.0)<>0.0 
							Group By DailyStat_ProductSeriesID) as T1
							Where DailyStat_ProductSeriesID=ProductSeriesID
							and DailyStat_DateTime=[DateTime]) as T2
							Where PRODUCTID=T2.ProductSeriesID
							
							
							if(@closemethod=3)
							Begin
								UPDATE #TabClosing SET 
								METHODCLOSEPRICE=Case When AVGCOST<=CLOSEPRICE Then AVGCOST Else CLOSEPRICE End,
								METHODCLOSEVALUE=Case When AVGCOST<=CLOSEPRICE Then CLOSINGVALUE Else ISNULL(CLOSINGQTY,0)*ISNULL(CLOSEPRICE,0) End
							End
							
							
							
							----Update PLMKTValue
							--Select Sum(BUYVALUE),Sum(MKTVALUE) from #Tab
							UPDATE #TabClosing SET PLMKTVALUE=plmktv From 
							(Select MASTERPRODUCTID MPID,Sum(isnull(Cast(Replace(MKTVALUE,',','')as Numeric(28,4)),0))-
							Sum(isnull(Cast(Replace(BUYVALUE,',','')as Numeric(28,4)),0)) PLMktV,CompanyID
							from #TAB_CompanyFilter
							GROUP BY GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,CompanyID) as T1
							Where MASTERPRODUCTID=MPID and T1.CompanyID=#TabClosing.CompanyID
							
							
							---------DEPENDING ON METHOD
							
							--**[At Cost]
							UPDATE #TabClosing SET METHODCLOSEPRICE=AVGCOST,METHODCLOSEVALUE=CLOSINGVALUE
							WHERE  @closemethod='0'
							
							--**[At Market]
							UPDATE #TabClosing SET METHODCLOSEPRICE=CLOSEPRICE,METHODCLOSEVALUE=ISNULL(CLOSINGQTY,0)*CLOSEPRICE 
							WHERE  @closemethod='1'
							
							--**[Cost/Market Lower]
							UPDATE #TabClosing SET METHODCLOSEPRICE=CASE WHEN ISNULL(CLOSEPRICE,0)>=ISNULL(AVGCOST,0) THEN ISNULL(AVGCOST,0) ELSE ISNULL(CLOSEPRICE,0) END,
							METHODCLOSEVALUE=CLOSINGVALUE
							WHERE  @closemethod in ('2')
							
							---and Because ClosingValue Assigned as Value at Cost in Page So Forcely Update
							UPDATE #TabClosing SET CLOSINGVALUE=BV From 
							(Select MASTERPRODUCTID MPID,Sum(isnull(Cast(Replace(BUYVALUE,',','')as Numeric(28,4)),0)) BV,CompanyID
							from #TAB_CompanyFilter
							GROUP BY GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,CompanyID) as T1
							Where MASTERPRODUCTID=MPID and T1.CompanyID=#TabClosing.CompanyID
							
							
							
							IF @closemethod='2'
							Begin
								Update #TabClosing Set PLMKTVALUE=0 Where isnull(PLMKTVALUE,0)>0
							End
							
							--Calculation Of PL (PLMKTMarketValue/BuyValue*100)
							--Note: Here ClosingValue Has BuyValue(Value at Cost)
							Update #TabClosing Set PL=
							Case When Abs(ClosingValue)>0 Then PLMKTVALUE/CLOSINGVALUE*100 Else 0 End
							
							
							---Change 1:
							---Whenever Multiple Company Come Then CompanyFilter will Display with new way otherwise old way
							Set @Min_Company=1
							If((Select COUNT(AutoID) From #DistinctCompany)>1)
							Begin
								
								-----------Per Grp  Name
								INSERT INTO #TabClosing(STATUSORDER,CLIENTNAME,PRODUCTNAME,CLOSINGQTY)
								SELECT distinct 0,CLIENTNAME,'Branch/Group Name: ' +GRPNAME,99999999999999.99
								FROM #TabClosing where STATUSORDER=2

								-----------Per Client Name
								INSERT INTO #TabClosing(STATUSORDER,CLIENTNAME,PRODUCTNAME,CLOSINGQTY)
								SELECT distinct 1,CLIENTNAME,'Client: '+CLIENTNAME+'['+UCC+']',99999999999999.99
								FROM #TabClosing  where STATUSORDER=2

							
								---Create DynamicTable For Display(ADd Company Dynamically)
								Create Table #Display_CompanyFilter(AutoID int,Instrument Varchar(500))
								While(@Min_Company<=@Max_Company)
								Begin
									Select @companyid=CompanyID From #DistinctCompany Where AutoID=@Min_Company
									Select @Sql_CompanyFilter='Alter Table #Display_CompanyFilter Add ['+
									(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company Where cmp_internalid=@companyid)+'] nVarchar(500)'
									
									Execute SP_ExecuteSQL @Sql_CompanyFilter
									Set @Min_Company=@Min_Company+1
									Set @companyid=null
								End
								
								Alter Table #Display_CompanyFilter
								Add Total int,GROUPID VARCHAR(50),GRPNAME VARCHAR(200),
								CUSTOMERID VARCHAR(15),CLIENTNAME VARCHAR(200),UCC VARCHAR(20),
								MASTERPRODUCTID VARCHAR(50),PRODUCTNAME VARCHAR(200),PRODUCTID VARCHAR(50),
								CLOSINGQTY NUMERIC(28,2),CLOSINGVALUE NUMERIC(28,2),AVGCOST NUMERIC(28,4),CLOSEPRICE NUMERIC(28,4),
								MKTVALUE NUMERIC(28,2),PLMKTVALUE NUMERIC(28,2),PL NUMERIC(28,2),
								METHODCLOSEPRICE NUMERIC(28,4),METHODCLOSEVALUE NUMERIC(28,2),STATUSORDER int,CompanyID Varchar(12),
								CompanyName Varchar(1000)
								
								---MasterProductID is SeriesID Here 
								Insert into #DistinctProductSeriesID
								Select Distinct MASTERPRODUCTID from #TabClosing
								Select @Min_Company=1
								Select @Min_PrSrID=1
								Select @Max_PSrID=COUNT(AutoID) From #DistinctProductSeriesID
								
								----Testing
									--Drop Table TabClosing
									--Drop Table Display_CompanyFilter
									--Select * into Display_CompanyFilter From #Display_CompanyFilter
									--Select * into TabClosing From #TabClosing
									--Select * from #DistinctProductSeriesID
								----End Testing
								
								While(@Min_PrSrID<=@Max_PSrID)
								Begin
									Select @Seriesid=ProductSeriesID From #DistinctProductSeriesID Where AutoID=@Min_PrSrID
									While(@Min_Company<=@Max_Company)
									Begin
										Select @companyid=CompanyId From #DistinctCompany Where AutoID=@Min_Company
										if(@Min_Company=1) ---First Time For First Company
										Begin
											Select @Sql_CompanyFilter='Insert into #Display_CompanyFilter(Instrument,['+
											(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company Where cmp_internalid=@companyid)+'],
											Total,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,
											MASTERPRODUCTID,PRODUCTNAME,CLOSINGQTY,CLOSINGVALUE,AVGCOST,CLOSEPRICE,
											MKTVALUE,PLMKTVALUE,PL,METHODCLOSEPRICE,METHODCLOSEVALUE,
											STATUSORDER,CompanyID,CompanyName,ProductID)'
											
											Select @Sql_CompanyFilter= @Sql_CompanyFilter+
											' Select PRODUCTNAME,CLOSINGQTY,CLOSINGQTY,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,
											MASTERPRODUCTID,PRODUCTNAME,CLOSINGQTY,CLOSINGVALUE,AVGCOST,CLOSEPRICE,
											MKTVALUE,PLMKTVALUE,PL,METHODCLOSEPRICE,METHODCLOSEVALUE,
											STATUSORDER,CompanyID,CompanyName,ProductID from #TabClosing
											Where CompanyID='''+@companyid+''' and MASTERPRODUCTID='+@Seriesid
											
											---Print @Sql_CompanyFilter
											Execute Sp_ExecuteSql @Sql_CompanyFilter
										End
										Else
										Begin
											---If Already Product is There in Table Then Update Else Insert
											if((Select Count(MASTERPRODUCTID) from #Display_CompanyFilter Where MASTERPRODUCTID=@Seriesid)>0)
											Begin
												Select @Sql_CompanyFilter='Update #Display_CompanyFilter
												Set 
												['+(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company Where cmp_internalid=@companyid)+']=TC.CLOSINGQTY,
												#Display_CompanyFilter.Total=#Display_CompanyFilter.Total+TC.CLOSINGQTY,
												#Display_CompanyFilter.CLOSINGQTY=#Display_CompanyFilter.CLOSINGQTY+TC.CLOSINGQTY,
												#Display_CompanyFilter.CLOSINGVALUE=#Display_CompanyFilter.CLOSINGVALUE+TC.CLOSINGVALUE,
												#Display_CompanyFilter.AVGCOST=#Display_CompanyFilter.CLOSINGVALUE/#Display_CompanyFilter.CLOSINGQTY,
												#Display_CompanyFilter.MKTVALUE=#Display_CompanyFilter.MKTVALUE+TC.MKTVALUE,
												#Display_CompanyFilter.PLMKTVALUE=#Display_CompanyFilter.PLMKTVALUE+TC.PLMKTVALUE,
												#Display_CompanyFilter.PL=
												Case When Abs(#Display_CompanyFilter.CLOSINGVALUE)>0 
													Then #Display_CompanyFilter.PLMKTVALUE/#Display_CompanyFilter.CLOSINGVALUE*100 
													Else 0 
												End,
												#Display_CompanyFilter.METHODCLOSEVALUE=#Display_CompanyFilter.METHODCLOSEVALUE+TC.METHODCLOSEVALUE
												From #TabClosing TC
												Where TC.CompanyID='''+@companyid+''' and TC.MASTERPRODUCTID='+@Seriesid+'
												and #Display_CompanyFilter.MASTERPRODUCTID=TC.MASTERPRODUCTID'
												
												--print @Sql_CompanyFilter
												Execute Sp_ExecuteSql @Sql_CompanyFilter
											End
											Else
											Begin
												Select @Sql_CompanyFilter='Insert into #Display_CompanyFilter(Instrument,['+
												(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company Where cmp_internalid=@companyid)+'],
												Total,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,
												MASTERPRODUCTID,PRODUCTNAME,CLOSINGQTY,CLOSINGVALUE,AVGCOST,CLOSEPRICE,
												MKTVALUE,PLMKTVALUE,PL,METHODCLOSEPRICE,METHODCLOSEVALUE,
												STATUSORDER,CompanyID,CompanyName,ProductID)'
												
												Select @Sql_CompanyFilter= @Sql_CompanyFilter+
												' Select PRODUCTNAME,CLOSINGQTY,CLOSINGQTY,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,
												MASTERPRODUCTID,PRODUCTNAME,CLOSINGQTY,CLOSINGVALUE,AVGCOST,CLOSEPRICE,
												MKTVALUE,PLMKTVALUE,PL,METHODCLOSEPRICE,METHODCLOSEVALUE,
												STATUSORDER,CompanyID,CompanyName,ProductID from #TabClosing
												Where CompanyID='''+@companyid+''' and MASTERPRODUCTID='+@Seriesid
												
												--Print @Sql_CompanyFilter
												Execute Sp_ExecuteSql @Sql_CompanyFilter
											End
										End
										Set @Min_Company=@Min_Company+1
										Set @Sql_CompanyFilter=''
									End
									Set @Min_Company=1
									Set @Min_PrSrID=@Min_PrSrID+1
								End
								
								-----------Grand Total
								INSERT INTO #Display_CompanyFilter(STATUSORDER,PRODUCTNAME,ClosingQty,CLOSINGVALUE,
								MKTVALUE,PLMKTVALUE,METHODCLOSEVALUE)
								SELECT 4,'Total :',SUM(ISNULL(ClosingQty,0)),
								SUM(ISNULL(CLOSINGVALUE,0)),SUM(ISNULL(MKTVALUE,0)),SUM(ISNULL(PLMKTVALUE,0)),
								SUM(ISNULL(METHODCLOSEVALUE,0))
								FROM #Display_CompanyFilter
								
								------Display Result
								Set @Min_Company=1
								Set @SqlDynamicCol_CompanyFilter=''
								----Get All Dynamic Company(ies)
								While(@Min_Company<=@Max_Company)
								Begin
								
									Select @companyid=CompanyID from #DistinctCompany Where AutoID=@Min_Company
									If(@SqlDynamicCol_CompanyFilter='')
										Set @SqlDynamicCol_CompanyFilter='['+(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company 
										Where cmp_internalid=@companyid)+']'
									Else
										Set @SqlDynamicCol_CompanyFilter=@SqlDynamicCol_CompanyFilter+',['+(Select LTRIM(Rtrim(Cmp_Name)) From tbl_Master_Company 
										Where cmp_internalid=@companyid)+']'
									Set @Min_Company=@Min_Company+1
								End
								
								if(@ReportView='E')
								Begin
									if(@closemethod not in (0,1,2))
									Begin
										if(@IsOnlyQtyOrWithVal='OnlyQty')
										Begin
											Select @Sql_CompanyFilter='SELECT PRODUCTNAME as [Instrument],'+@SqlDynamicCol_CompanyFilter+',
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN ''Test'' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),''Y'') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''N'') END AS [Value At Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<='''+@ValuationDate+'''
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),''N'') END AS [Mkt. Value]
											FROM #Display_CompanyFilter ORDER BY STATUSORDER,CLIENTNAME,PRODUCTNAME'
										End
										Else
										Begin
											Select @Sql_CompanyFilter='SELECT PRODUCTNAME as [Instrument],'+@SqlDynamicCol_CompanyFilter+',
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN ''Test'' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),''Y'') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''N'') END AS [Value At Cost],
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),''N'') END AS [Avg. Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<='''+@ValuationDate+'''
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),''N'') END AS [Mkt. Value],
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),''N'') END AS [P/L @Mkt],
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),''N'') END AS [Perf(%)],
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),''N'') END AS [Avg Close Price],
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),''N'') END AS [Avg Close Value]
											FROM #Display_CompanyFilter ORDER BY STATUSORDER,CLIENTNAME,PRODUCTNAME'
										End
									End
									Else
									Begin
										if(@IsOnlyQtyOrWithVal='OnlyQty')
										Begin
											Select @Sql_CompanyFilter='SELECT PRODUCTNAME as [Instrument],'+@SqlDynamicCol_CompanyFilter+',
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN ''Test'' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),''Y'') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''N'') END AS [Value At Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<='''+@ValuationDate+'''
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),''N'') END AS [Mkt. Value]
											FROM #Display_CompanyFilter ORDER BY STATUSORDER,CLIENTNAME,PRODUCTNAME'
										End
										Else
										Begin
											Select @Sql_CompanyFilter='SELECT PRODUCTNAME as [Instrument],'+@SqlDynamicCol_CompanyFilter+',
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN ''Test'' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),''Y'') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''N'') END AS [Value At Cost],
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),''N'') END AS [Avg. Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<='''+@ValuationDate+'''
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),''N'') END AS [Mkt. Value],
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),''N'') END AS [P/L @Mkt],
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),''N'') END AS [Perf(%)],
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),''N'') END AS [Close Price],
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),''N'') END AS [Close Value]
											FROM #Display_CompanyFilter ORDER BY STATUSORDER,CLIENTNAME,PRODUCTNAME'
										End
									End
								End
								Else
								Begin
									Select @Sql_CompanyFilter='SELECT GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,
										CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),''Y'') END AS CLOSINGQTY,
										CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''N'') END AS CLOSINGVALUE,
										CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),''N'') END AS AVGCOST,
										CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN CLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSEPRICE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(CLOSEPRICE AS VARCHAR(8000)),''N'') END AS CLOSEPRICE,
										CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),''N'') END AS MKTVALUE,
										CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),''N'') END AS PLMKTVALUE,
										CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),''N'') END AS PL,
										CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),''N'') END AS METHODCLOSEPRICE,
										CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),''N'') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),''N'') END AS METHODCLOSEVALUE,
										'+@SqlDynamicCol_CompanyFilter+'
										FROM #Display_CompanyFilter ORDER BY STATUSORDER,GRPNAME,CLIENTNAME,PRODUCTNAME'
								End
								
								------Testing
								--Drop Table Display_CompanyFilter
								--Select * into Display_CompanyFilter From #Display_CompanyFilter
								--print @Sql_CompanyFilter
								------End Testing
								Execute Sp_ExecuteSql @Sql_CompanyFilter
								Select @SqlDynamicCol_CompanyFilter Companies
								
							---End Change 1:
							End ----if Compnay Count > 1
							Else 
							Begin
								
								-----------Per Client TotaL
								INSERT INTO #TabClosing(STATUSORDER,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,PRODUCTNAME,CLOSINGVALUE,
								MKTVALUE,PLMKTVALUE,METHODCLOSEVALUE)
								SELECT 3,GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,'Total :',
								SUM(ISNULL(CLOSINGVALUE,0)),SUM(ISNULL(MKTVALUE,0)),SUM(ISNULL(PLMKTVALUE,0)),
								SUM(ISNULL(METHODCLOSEVALUE,0))
								FROM #TabClosing GROUP BY GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC
								
								
								
								
								---------ALL RECORD FETCH
								
								IF(@PRINTCHK='SHOW')
								Begin
									if(@ReportView='E')
									Begin
										if(@closemethod not in (0,1))
										Begin
											--For Purpose Of Export Only Change Column Name To Display
											SELECT GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,
											CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END AS CLOSINGQTY,
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS CLOSINGVALUE,
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS AVGCOST,
											CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN CLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSEPRICE AS VARCHAR(8000)),'N') END AS CLOSEPRICE,
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS MKTVALUE,
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS PLMKTVALUE,
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS PL,
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS AvgClosePrice,
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS AvgCloseValue
											FROM #TabClosing ORDER BY GROUPID,GRPNAME,CLIENTNAME,UCC,STATUSORDER
										End
										Else
										Begin
											SELECT GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,
											CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END AS CLOSINGQTY,
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS CLOSINGVALUE,
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS AVGCOST,
											CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN CLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSEPRICE AS VARCHAR(8000)),'N') END AS CLOSEPRICE,
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS MKTVALUE,
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS PLMKTVALUE,
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS PL,
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS ClosePrice,
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS CloseValue
											FROM #TabClosing ORDER BY GROUPID,GRPNAME,CLIENTNAME,UCC,STATUSORDER
										End
									End
									Else
									Begin
										--For Purpose Of Display
										SELECT GROUPID,GRPNAME,CUSTOMERID,CLIENTNAME,UCC,MASTERPRODUCTID,PRODUCTNAME,
										CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END AS CLOSINGQTY,
										CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS CLOSINGVALUE,
										CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS AVGCOST,
										CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN CLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSEPRICE AS VARCHAR(8000)),'N') END AS CLOSEPRICE,
										CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS MKTVALUE,
										CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS PLMKTVALUE,
										CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS PL,
										CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS METHODCLOSEPRICE,
										CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS METHODCLOSEVALUE
										FROM #TabClosing ORDER BY GROUPID,GRPNAME,CLIENTNAME,UCC,STATUSORDER
									End
								End
								Else
								Begin

									-----------Per Grp  Name
									INSERT INTO #TabClosing(STATUSORDER,CLIENTNAME,PRODUCTNAME,CLOSINGQTY)
									SELECT distinct 0,CLIENTNAME,'Branch/Group Name: ' +GRPNAME,99999999999999.99
									FROM #TabClosing where STATUSORDER=2

									-----------Per Client Name
									INSERT INTO #TabClosing(STATUSORDER,CLIENTNAME,PRODUCTNAME,CLOSINGQTY)
									SELECT distinct 1,CLIENTNAME,'Client: '+CLIENTNAME+'['+UCC+']',99999999999999.99
									FROM #TabClosing  where STATUSORDER=2
									
									------Testing
									--Drop Table TabClosing
									--Select * into TabClosing From #TabClosing
									-----End Testing

									if(@ReportView='E')
									Begin
										if(@closemethod not in (0,1,2))
										Begin
											SELECT PRODUCTNAME as [Instrument],
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN 'Test' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS [Value At Cost],
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS [Avg. Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<=@ValuationDate
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS [Mkt. Value],
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS [P/L @Mkt],
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS [Perf(%)],
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS [Avg Close Price],
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS [Avg Close Value]
											FROM #TabClosing ORDER BY CLIENTNAME,STATUSORDER,PRODUCTNAME
										End
										Else
										Begin
											
											SELECT PRODUCTNAME as [Instrument],
											CASE WHEN CLOSINGQTY=99999999999999.99 THEN 'Test' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END  END AS [Closing Stock],
											CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS [Value At Cost],
											CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS [Avg. Cost],
											(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
											(Select DailyStat_ProductSeriesID as ProductSeriesID,
											Max(DailyStat_DateTime) as  [DateTime]
											from Trans_DailyStatistics
											Where DailyStat_ProductSeriesID=ProductID
											and DailyStat_DateTime<=@ValuationDate
											and isnull(CLOSINGQTY,0.0)<>0.0 
											Group By DailyStat_ProductSeriesID) as T1
											Where DailyStat_ProductSeriesID=ProductSeriesID
											and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
											CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS [Mkt. Value],
											CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS [P/L @Mkt],
											CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS [Perf(%)],
											CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS [Close Price],
											CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS [Close Value]
											FROM #TabClosing ORDER BY CLIENTNAME,STATUSORDER,PRODUCTNAME
										End
									End
									Else
									Begin
										SELECT PRODUCTNAME as [Instrument],
										CASE WHEN CLOSINGQTY=99999999999999.99 THEN 'Test' ELSE CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN CLOSINGQTY<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGQTY) AS VARCHAR(8000)),'Y') ELSE dbo.fn_FormatNumber(CAST(CLOSINGQTY AS VARCHAR(8000)),'Y') END  END AS [Closing Stock],
										CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),'N') END AS [Value At Cost],
										CASE WHEN ISNULL(AVGCOST,0)=0 THEN NULL WHEN AVGCOST<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(AVGCOST) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(AVGCOST AS VARCHAR(8000)),'N') END AS [Avg. Cost],
										(Select isnull(DailyStat_Close,0) from Trans_DailyStatistics,
										(Select DailyStat_ProductSeriesID as ProductSeriesID,
										Max(DailyStat_DateTime) as  [DateTime]
										from Trans_DailyStatistics
										Where DailyStat_ProductSeriesID=ProductID
										and DailyStat_DateTime<=@ValuationDate
										and isnull(CLOSINGQTY,0.0)<>0.0 
										Group By DailyStat_ProductSeriesID) as T1
										Where DailyStat_ProductSeriesID=ProductSeriesID
										and DailyStat_DateTime=[DateTime]) AS [Mkt. Price],
										CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN MKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(MKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(MKTVALUE AS VARCHAR(8000)),'N') END AS [Mkt. Value],
										CASE WHEN ISNULL(PLMKTVALUE,0)=0 THEN NULL WHEN PLMKTVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PLMKTVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PLMKTVALUE AS VARCHAR(8000)),'N') END AS [P/L @Mkt],
										CASE WHEN ISNULL(PL,0)=0 THEN NULL WHEN PL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(PL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(PL AS VARCHAR(8000)),'N') END AS [Perf(%)],
										CASE WHEN ISNULL(METHODCLOSEPRICE,0)=0 THEN NULL WHEN METHODCLOSEPRICE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEPRICE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEPRICE AS VARCHAR(8000)),'N') END AS [Close Price],
										CASE WHEN ISNULL(METHODCLOSEVALUE,0)=0 THEN NULL WHEN METHODCLOSEVALUE<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(METHODCLOSEVALUE) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(METHODCLOSEVALUE AS VARCHAR(8000)),'N') END AS [Close Value]
										FROM #TabClosing ORDER BY CLIENTNAME,STATUSORDER,PRODUCTNAME
									End
								End
							End----else Compnay Count > 1
							DROP TABLE #TabClosing 
					End
					
					IF(@rpttype in ('0','1','4'))------Summary/Detail/Closing Stock [Detail] Begin Here
					Begin
					---Default Set of @companyid(There will be a Single Company Always
					Select @companyid=CompanyID From #DistinctCompany Where AutoID=1
					--Remove Sqr Trade By Auction 
					if(@chkexcludesqr='CHK')
					Begin
						Delete From #TAB Where  #tab.BRKGTYPE='SQR' and Ltrim(Rtrim(#Tab.SETTNO)) in (Select Ltrim(Rtrim(Col)) From fnSplitReturnTable(@TbAucSettNo,','))
					End
					SELECT @SQL=''
					
					IF @PRINTCHK<>'SHOW'
						BEGIN
							SELECT @SQL=@SQL+'
											SELECT 
											CUSTOMERID,MASTERPRODUCTID,CLIENTNAME,UCC,PRODUCTNAME,GROUPID,GRPNAME,
											(select Top 1(cmp_panNo) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmppanno,
																						isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Work'' AND phf_cntId='''+@Companyid+'''),'''')as cmpphno,
																						isnull((Select top 1 phf_countryCode+''-''+phf_areaCode+''-''+phf_phoneNumber from tbl_master_phonefax where  PHF_TYPE=''Fax'' AND phf_cntId='''+@Companyid+'''),'''')as cmpfax,
																						(select Top 1(eml_email) from tbl_master_email where eml_cntid='''+@CompanyID+''' and eml_type=''Official'')as cmpemail,
																						(select Top 1(cmp_Name) from tbl_master_company where cmp_internalid='''+@CompanyID+''')as cmpname,
																						(select top 1(isnull(add_address1,'' '')+'' ''+
																									isnull(add_address2,'' '')+'' ''+isnull(add_address3,'' '')+'',''+
																										isnull(city_name,'' '')+''-''+ isnull(add_pin,'' '')) 
																											from tbl_master_address,tbl_master_company,tbl_master_city
																												where cmp_internalid=add_cntid and cmp_internalid='''+@CompanyID+'''
																													and add_city=city_id and add_cntID='''+@CompanyID+''' 
																														AND add_entity=''Company'' AND add_addressType=''Office'')as cmpaddress,
																						(select top 1 (isnull(rtrim(ltrim(add_address1)),'''')+'' ''+isnull(rtrim(ltrim(add_address2)),''''))) AS CLIENTADDRESS1,
																						(select top 1 (isnull(rtrim(ltrim(add_address3)),'''')+'' ''+isnull(rtrim(ltrim(add_pin)),'''')+'',''+
																						(select top 1 isnull(city_name,'''') from tbl_master_city where city_id=add_city))) AS CLIENTADDRESS2,
																						(select Top 1(cmp_serviceTaxNo) from tbl_master_company where cmp_internalid='''+@Companyid+''')as cmpservicetax ,'
						IF(@rpttype='0')
							BEGIN
								SELECT @SQL=@SQL+'OPQTY,OPVALUE,OPENINGAVGCOST,BUYQTY,BUYVALUE,BUYAVGCOST,
											SELLQTY,SELLVALUE,SELLAVGCOST,SQRQTY,SQRPL, 
											STPL,LTPL,sttaxtotalstt,NETPL,CLOSEQTY,CLOSEVALUE,CLOSEAvgCost,
											OPVALUE1,BUYVALUE1,SELLVALUE1,sttaxtotalstt1,NETPL1,
											CLOSEVALUE1'																   
							END													
						ELSE
							BEGIN
								SELECT @SQL=@SQL+'BUYQTY,BUYVALUE,SELLQTY,SELLVALUE,STPL,LTPL,CLOSINGQTY,CLOSINGVALUE,SQRPL,
												  BRKGTYPE,DATE,
												  TICKERSYMBOL,SERIESANDCODE,SEGMENT,SETTNO,RATE,SQRQTY,STSTUSID,
												  STPL1,LTPL1,
												  CLOSINGQTY1,CLOSINGVALUE1,CLOSINGAVGCOST'
												  	
							END
						SELECT @SQL=@SQL+' FROM ( '
						END
						IF(@rpttype='0')
						BEGIN
								SELECT @SQL=@SQL+'SELECT 
											 CASE WHEN CUSTOMERID_TB_OTHER IS NULL THEN CUSTOMERID_TB_OPENING ELSE CUSTOMERID_TB_OTHER END AS CUSTOMERID,
											 CASE WHEN MASTERPRODUCTID_TB_OTHER IS NULL THEN MASTERPRODUCTID_TB_OPENING ELSE MASTERPRODUCTID_TB_OTHER END AS MASTERPRODUCTID,
											 CASE WHEN CLIENTNAME_TB_OTHER IS NULL THEN CLIENTNAME_TB_OPENING ELSE CLIENTNAME_TB_OTHER END AS CLIENTNAME,
											 CASE WHEN UCC_TB_OTHER IS NULL THEN UCC_TB_OPENING ELSE UCC_TB_OTHER END AS UCC,
											 CASE WHEN PRODUCTNAME_TB_OTHER IS NULL THEN PRODUCTNAME_TB_OPENING ELSE PRODUCTNAME_TB_OTHER END AS PRODUCTNAME,
											 CASE WHEN GROUPID_TB_OTHER IS NULL THEN GROUPID_TB_OPENING ELSE GROUPID_TB_OTHER END AS GROUPID,
											 CASE WHEN GRPNAME_TB_OTHER IS NULL THEN GRPNAME_TB_OPENING ELSE GRPNAME_TB_OTHER END AS GRPNAME,
											 CASE WHEN ISNULL(OPQTY,0)=0 THEN NULL WHEN OPQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(OPQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(OPQTY AS VARCHAR(8000)),''Y'') END AS OPQTY, 
											 CASE WHEN ISNULL(OPVALUE,0)=0 THEN NULL WHEN OPVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(OPVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(OPVALUE AS VARCHAR(8000)),''Y'') END AS OPVALUE, 
											 CASE WHEN ISNULL(OPENINGAVGCOST,0)=0 THEN NULL WHEN OPENINGAVGCOST<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(cast(OPENINGAVGCOST as numeric(28,2))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(cast(OPENINGAVGCOST as numeric(28,2))AS VARCHAR(8000)),''Y'') END AS OPENINGAVGCOST, 
											 CASE WHEN ISNULL(BUYQTY,0)=0 THEN NULL WHEN BUYQTY<0 THEN dbo.fn_FormatNumber(CAST(ABS(BUYQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(BUYQTY AS VARCHAR(8000)),''Y'') END AS BUYQTY, 
											 CASE WHEN ISNULL(BUYVALUE,0)=0 THEN NULL WHEN BUYVALUE<0 THEN dbo.fn_FormatNumber(CAST(ABS(BUYVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(BUYVALUE AS VARCHAR(8000)),''Y'') END AS BUYVALUE, 
											 CASE WHEN ISNULL(BUYAVGCOST,0)=0 THEN NULL WHEN BUYAVGCOST<0 THEN dbo.fn_FormatNumber(CAST(ABS(cast(BUYAVGCOST as numeric(28,2))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(cast(BUYAVGCOST as numeric(28,2)) AS VARCHAR(8000)),''Y'') END AS BUYAVGCOST, 
											 CASE WHEN ISNULL(SELLQTY,0)=0 THEN NULL WHEN SELLQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SELLQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SELLQTY AS VARCHAR(8000)),''Y'') END AS SELLQTY, 
											 CASE WHEN ISNULL(SELLVALUE,0)=0 THEN NULL WHEN SELLVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SELLVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SELLVALUE AS VARCHAR(8000)),''Y'') END AS SELLVALUE, 
											 CASE WHEN ISNULL(SELLAVGCOST,0)=0 THEN NULL WHEN SELLAVGCOST<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(cast(SELLAVGCOST as numeric(28,2))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(cast(SELLAVGCOST as numeric(28,2)) AS VARCHAR(8000)),''Y'') END AS SELLAVGCOST, '
											 IF @chkexcludesqr='UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' CASE WHEN ISNULL(SQRQTY,0)=0 THEN NULL WHEN SQRQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SQRQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SQRQTY AS VARCHAR(8000)),''Y'') END AS SQRQTY, 
																		   CASE WHEN ISNULL(SQRPL,0)=0 THEN NULL WHEN SQRPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SQRPL) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SQRPL AS VARCHAR(8000)),''Y'') END AS SQRPL, 
																		   CASE WHEN ISNULL(STPL,0)+ISNULL(SQRPL,0)=0 THEN NULL WHEN STPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(STPL,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(STPL,0) AS VARCHAR(8000)),''Y'') END AS STPL, '
												END
											 ELSE 
												BEGIN
														SELECT @SQL=@SQL+'NULL AS SQRQTY,NULL AS SQRPL,
																		 CASE WHEN ISNULL(STPL,0)=0 THEN NULL WHEN STPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(STPL,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(STPL,0) AS VARCHAR(8000)),''Y'') END AS STPL, 
																		 '
												END
											SELECT @SQL=@SQL+'
											 CASE WHEN ISNULL(LTPL,0)=0 THEN NULL WHEN LTPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(LTPL) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(LTPL AS VARCHAR(8000)),''Y'') END AS LTPL, '
											 IF @chkstt<>'UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' NULL AS sttaxtotalstt,'
												END
											 ELSE
												BEGIN
														SELECT @SQL=@SQL+ '	CASE WHEN ISNULL(sttaxtotalstt,0)=0 THEN NULL WHEN sttaxtotalstt<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(cast(sttaxtotalstt as numeric(28,2))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(cast(sttaxtotalstt as numeric(28,2)) AS VARCHAR(8000)),''Y'') END AS sttaxtotalstt, '
												END
											 IF @chkexcludesqr='UNCHK'
												BEGIN
														 IF @chkstt<>'UNCHK'
															BEGIN
																	SELECT @SQL=@SQL+' CASE WHEN ISNULL(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0),0)=0 THEN NULL WHEN ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0) AS VARCHAR(8000)),''Y'') END AS NETPL, '
															END
														 ELSE
															BEGIN
																	SELECT @SQL=@SQL+' CASE WHEN ISNULL(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0),0)=0 THEN NULL WHEN ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0) AS VARCHAR(8000)),''Y'') END AS NETPL, '
															END
												END
											 ELSE
												BEGIN
														IF @chkstt<>'UNCHK'
															BEGIN
																	SELECT @SQL=@SQL+' CASE WHEN ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0),0)=0 THEN NULL WHEN ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0),0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(STPL,0)+ISNULL(LTPL,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0),0) AS VARCHAR(8000)),''Y'') END AS NETPL, '
															END
														 ELSE
															BEGIN
																	SELECT @SQL=@SQL+' CASE WHEN ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0),0)=0 THEN NULL WHEN ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0),0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0),0) AS VARCHAR(8000)),''Y'') END AS NETPL, '
															END
												END					 
											IF @closemethod='0'
												BEGIN
														SELECT @SQL=@SQL+'	 CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 THEN NULL WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0) AS VARCHAR(8000)),''Y'') END AS CLOSEQTY, 
																			 CASE WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)=0 THEN NULL WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0) AS VARCHAR(8000)),''Y'') END AS CLOSEVALUE, 
																			 CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 then null else dbo.fn_FormatNumber(CAST(cast(ABS((ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0))/(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0))) as numeric(28,4))AS VARCHAR(8000)),''Y'') end as  CLOSEAvgCost,
																			 ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0) AS CLOSEVALUE1,
																			 CLOSINGQTY2,CLOSINGVALUE2,'
												END
											 ELSE IF @closemethod='1'
												BEGIN
													   SELECT @SQL=@SQL+'	 CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 THEN NULL WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0) AS VARCHAR(8000)),''Y'') END AS CLOSEQTY, 
																			 CASE WHEN ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)=0 THEN NULL WHEN  ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) AS VARCHAR(8000)),''Y'') END AS CLOSEVALUE, 
																			 CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 THEN  NULL ELSE dbo.fn_FormatNumber(CAST(CAST(ABS((ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0))/(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0))) AS NUMERIC(28,4))AS VARCHAR(8000)),''Y'') END AS CLOSEAvgCost,
																			 ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) AS CLOSEVALUE1,
																			 CLOSINGQTY2,MKTVALUE2 AS CLOSINGVALUE2,'
												END
											 ELSE
												BEGIN
														SELECT @SQL=@SQL+'	 CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 THEN NULL WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0) AS VARCHAR(8000)),''Y'') END AS CLOSEQTY, 
																			 CASE WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)<ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)
																				  THEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0) 
																			 ELSE ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) END AS CLOSEVALUE1,
																			 CLOSINGQTY2,
																			 CASE WHEN CLOSINGVALUE2<MKTVALUE2
																				  THEN CLOSINGVALUE2 ELSE MKTVALUE2 END AS CLOSINGVALUE2,
																			 CASE WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)>ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) 
																				  THEN CASE WHEN ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)=0 THEN NULL WHEN  ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) AS VARCHAR(8000)),''Y'') END 
																				  ELSE CASE WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)=0 THEN NULL WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0) AS VARCHAR(8000)),''Y'') END 
																			 END AS CLOSEVALUE,
																			 CASE WHEN ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0)<ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0) 
																				  THEN CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 then null else dbo.fn_FormatNumber(CAST(cast(ABS((ISNULL(CLOSEVALUE,0)+ISNULL(CLOSEVALUE_TB_OTHER,0))/(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0))) as numeric(28,4))AS VARCHAR(8000)),''Y'') end 
																				  ELSE CASE WHEN ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0)=0 THEN  NULL ELSE dbo.fn_FormatNumber(CAST(CAST(ABS((ISNULL(MKTVALUE_TB_OTHER,0)+isnull(MKTVALUE_OPENING,0))/(ISNULL(CLOSEQTY,0)+ISNULL(CLOSEQTY_TB_OTHER,0))) AS NUMERIC(28,4))AS VARCHAR(8000)),''Y'') END
																			 END AS CLOSEAvgCost,'
												END
											 SELECT @SQL=@SQL+'
											 OPVALUE as OPVALUE1,BUYVALUE as BUYVALUE1,SELLVALUE as SELLVALUE1,
											 LTPL AS LTPL1, '
														IF @chkstt<>'UNCHK'
															BEGIN
																SELECT @SQL=@SQL+' NULL AS sttaxtotalstt1,'
															END
														 ELSE
															BEGIN
																SELECT @SQL=@SQL+' sttaxtotalstt AS sttaxtotalstt1,'
															END

											 IF @chkexcludesqr='UNCHK'
												BEGIN
														IF @chkstt<>'UNCHK'
															BEGIN
																SELECT @SQL=@SQL+' ISNULL(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0),0) AS NETPL1,ISNULL(STPL,0) as STPL1,'
															END
														 ELSE
															BEGIN
																SELECT @SQL=@SQL+' ISNULL(ISNULL(SQRPL,0)+ISNULL(STPL,0)+ISNULL(LTPL,0)-ISNULL(sttaxtotalstt,0),0) AS NETPL1,ISNULL(STPL,0)+ISNULL(SQRPL,0) as STPL1,'
															END
												END
											ELSE
												BEGIN
														IF @chkstt<>'UNCHK'
															BEGIN
																SELECT @SQL=@SQL+' ISNULL((ISNULL(STPL,0)+ISNULL(LTPL,0)),0) AS NETPL1,ISNULL(STPL,0) as STPL1,'
															END
														 ELSE
															BEGIN
																SELECT @SQL=@SQL+' ISNULL((ISNULL(STPL,0)+ISNULL(LTPL,0))-ISNULL(sttaxtotalstt,0),0) AS NETPL1,ISNULL(STPL,0) as STPL1,'
															END
												END
											 SELECT @SQL=@SQL+'
											 STPL2,LTPL2,
											 SQRPL2,'
														IF @chkstt<>'UNCHK'
															BEGIN
																SELECT @SQL=@SQL+' NULL AS sttaxtotalstt2'
															END
														 ELSE
															BEGIN
																SELECT @SQL=@SQL+' sttaxtotalstt AS sttaxtotalstt2'
															END
											SELECT @SQL=@SQL+' 
											 FROM 
											 (SELECT * FROM (
											  SELECT * FROM(
											  SELECT * FROM(
											  SELECT * FROM(
											 SELECT CUSTOMERID AS CUSTOMERID_TB_OTHER,
											 MASTERPRODUCTID AS MASTERPRODUCTID_TB_OTHER,
											 CLIENTNAME AS CLIENTNAME_TB_OTHER,
											 UCC AS UCC_TB_OTHER,PRODUCTNAME AS PRODUCTNAME_TB_OTHER,
											 GROUPID AS GROUPID_TB_OTHER,GRPNAME AS GRPNAME_TB_OTHER,
											 SUM(ISNULL(BUYQTY,0)) AS BUYQTY,SUM(ISNULL(BUYVALUE,0)) AS BUYVALUE,
											 CASE WHEN SUM(ISNULL(BUYQTY,0))=0 THEN SUM(ISNULL(BUYVALUE,0))/1 ELSE  cast(SUM(ISNULL(BUYVALUE,0))/SUM(ISNULL(BUYQTY,0)) as numeric(28,2)) END AS BUYAVGCOST,
											 SUM(ISNULL(SELLQTY,0)) AS SELLQTY,SUM(ISNULL(SELLVALUE,0)) AS SELLVALUE,
											 CASE WHEN SUM(ISNULL(SELLQTY,0))=0 THEN SUM(ISNULL(SELLVALUE,0))/1 ELSE  SUM(ISNULL(SELLVALUE,0))/SUM(ISNULL(SELLQTY,0)) END  AS SELLAVGCOST, '
											IF @chkexcludesqr='UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' ISNULL(SQRQTY,0) AS SQRQTY, ISNULL(SQRPL,0) AS SQRPL,'
												END
											ELSE
												BEGIN
														SELECT @SQL=@SQL+' NULL AS SQRQTY, NULL AS SQRPL,'
												END
											 SELECT @SQL=@SQL+'
											 SUM(ISNULL(STPL,0)) AS STPL,SUM(ISNULL(LTPL,0)) AS LTPL,
											 SUM(ISNULL(CLOSINGQTY,0)) AS CLOSEQTY_TB_OTHER,SUM(ISNULL(CLOSINGVALUE,0)) AS CLOSEVALUE_TB_OTHER,
											 CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN SUM(ISNULL(CLOSINGVALUE,0))/1 ELSE  SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0)) END AS CLOSEAvgCost_TB_OTHER,
											 sum(isnull(MKTVALUE,0)) as MKTVALUE_TB_OTHER,
											 sum(isnull(CLOSEPRICE,0)) as CLOSEPRICE_TB_OTHER,
											 sum(isnull(VALUATIONPL,0)) as VALUATIONPL_TB_OTHER
											 FROM #TAB WHERE  SETTNO<>''Opening''
											 GROUP BY GROUPID,GRPNAME,PRODUCTNAME,UCC,CLIENTNAME,'
											IF @chkexcludesqr='UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' SQRPL,SQRQTY,'
												END
											 SELECT @SQL=@SQL+'
													  CUSTOMERID,MASTERPRODUCTID)AS KK
											 LEFT OUTER JOIN
											(SELECT  equity_productid,SUM(ISNULL(sttax_totalstt,0)) AS sttaxtotalstt
											 FROM trans_sttax,master_equity
											 WHERE sttax_customerid IN (select distinct cnt_internalid from tbl_master_contact 
																 where  '+@clienttype+'
																 and cnt_internalid in ('+@clients+'))'
											 IF @Seriesid<>'ALL'
											 BEGIN
												SELECT @SQL=@SQL+'  and equity_productid in ('+@Seriesid+')'
											 END 
											 SELECT @SQL=@SQL+'and sttax_PRODUCTSERIESID=equity_seriesid
											 AND sttax_sttdate <='''+@fromdate+'''
											 AND sttax_type=''Prov''
											 AND sttax_segmentid IN('+@segment+')
											 AND sttax_FinYear='''+@finyear+''' 
											 GROUP BY equity_productid) AS BK
											 on(equity_productid=MASTERPRODUCTID_TB_OTHER))AS TB

											 LEFT OUTER JOIN 

											 (select  CUSTOMERID as CUSTOMERID2,
											 CASE WHEN SUM(ISNULL(STPL,0))=0 THEN NULL WHEN SUM(ISNULL(STPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(STPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(STPL,0)) AS VARCHAR(8000)),''Y'') END AS STPL2, 
											 CASE WHEN SUM(ISNULL(LTPL,0))=0 THEN NULL WHEN SUM(ISNULL(LTPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(LTPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(LTPL,0)) AS VARCHAR(8000)),''Y'') END AS LTPL2, 
											 CASE WHEN SUM(ISNULL( CLOSINGQTY,0))=0 THEN NULL WHEN  SUM(ISNULL( CLOSINGQTY,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( CLOSINGQTY,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( CLOSINGQTY,0)) AS VARCHAR(8000)),''Y'') END AS  CLOSINGQTY2, 
											 CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))=0 THEN NULL WHEN SUM(ISNULL(CLOSINGVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(CLOSINGVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(CLOSINGVALUE,0)) AS VARCHAR(8000)),''Y'') END AS CLOSINGVALUE2,
											 CASE WHEN SUM(ISNULL( MKTVALUE,0))=0 THEN NULL WHEN  SUM(ISNULL( MKTVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( MKTVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( MKTVALUE,0)) AS VARCHAR(8000)),''Y'') END AS  MKTVALUE2, 
											 CASE WHEN SUM(ISNULL( VALUATIONPL,0))=0 THEN NULL WHEN  SUM(ISNULL( VALUATIONPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( VALUATIONPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( VALUATIONPL,0)) AS VARCHAR(8000)),''Y'') END AS  VALUATIONPL2,'
											IF @chkexcludesqr='UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' CASE WHEN SUM(ISNULL( SQRPL,0))=0 THEN NULL WHEN  SUM(ISNULL( SQRPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( SQRPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( SQRPL,0)) AS VARCHAR(8000)),''Y'') END AS  SQRPL2'
												END
											ELSE
												BEGIN
														SELECT @SQL=@SQL+' NULL AS SQRPL2 '
												END
											 SELECT @SQL=@SQL+'
											 FROM #TAB GROUP BY CUSTOMERID) AS JJ

											ON( CUSTOMERID_TB_OTHER=CUSTOMERID2)) AS TB_OTHER
											 
											 FULL OUTER JOIN 

											 (SELECT CUSTOMERID AS CUSTOMERID_TB_OPENING,
											 MASTERPRODUCTID AS MASTERPRODUCTID_TB_OPENING,
											 CLIENTNAME AS CLIENTNAME_TB_OPENING,
											 UCC AS UCC_TB_OPENING,PRODUCTNAME AS PRODUCTNAME_TB_OPENING,
											 GROUPID AS GROUPID_TB_OPENING,GRPNAME AS GRPNAME_TB_OPENING,
											 SUM(ISNULL(BUYQTY,0)) AS OPQTY,SUM(ISNULL(BUYVALUE,0)) AS OPVALUE,
											 CASE WHEN SUM(ISNULL(BUYQTY,0))=0 THEN SUM(ISNULL(BUYVALUE,0))/1 ELSE  SUM(cast(ISNULL(BUYVALUE,0) as numeric(28,2)))/ SUM(cast(ISNULL(BUYQTY,0) as numeric(28,2))) END AS OPENINGAVGCOST,
											 SUM(ISNULL(CLOSINGQTY,0)) AS CLOSEQTY,SUM(ISNULL(CLOSINGVALUE,0)) AS CLOSEVALUE,
											 CASE WHEN SUM(ISNULL(CLOSINGQTY,0))=0 THEN SUM(ISNULL(CLOSINGVALUE,0))/1 ELSE  SUM(ISNULL(CLOSINGVALUE,0))/SUM(ISNULL(CLOSINGQTY,0)) END AS CLOSEAvgCost,
											 sum(isnull(MKTVALUE,0)) as MKTVALUE_OPENING,
											 sum(isnull(CLOSEPRICE,0)) as CLOSEPRICE_OPENING,
											 sum(isnull(VALUATIONPL,0)) as VALUATIONPL_OPENING
											 FROM #TAB WHERE SETTNO=''Opening''
											 GROUP BY GROUPID,GRPNAME,PRODUCTNAME,UCC,CLIENTNAME,CUSTOMERID,MASTERPRODUCTID)
											 AS TB_OPENING
											 ON(CUSTOMERID_TB_OTHER=CUSTOMERID_TB_OPENING 
											 AND MASTERPRODUCTID_TB_OTHER=MASTERPRODUCTID_TB_OPENING)) AS K)AS J'
						END
						ELSE IF(@rpttype in ('1','4'))
						BEGIN
							   SELECT @SQL=@SQL+'SELECT *
											FROM 
											(SELECT CUSTOMERID,MASTERPRODUCTID,CLIENTNAME,
											UCC,PRODUCTNAME,GROUPID,GRPNAME,STSTUSID,
											TICKERSYMBOL,SERIESANDCODE,SEGMENT,SETTNO,
											BRKGTYPE,REPLACE(CONVERT(VARCHAR(9), DATE, 6), '' '', ''-'') AS DATE,
											DATE AS DATE1,STPL as STPL1,LTPL AS LTPL1,
											CASE WHEN ISNULL(RATE,0)=0 THEN NULL WHEN RATE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CAST(RATE AS NUMERIC(28,4))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CAST(RATE AS NUMERIC(28,4)) AS VARCHAR(8000)),''Y'') END AS RATE, '
											IF @chkexcludesqr='UNCHK'
												BEGIN
														SELECT @SQL=@SQL+' CASE WHEN ISNULL(SQRQTY,0)=0 THEN NULL WHEN SQRQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SQRQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SQRQTY AS VARCHAR(8000)),''Y'') END AS SQRQTY, 
																		   CASE WHEN ISNULL(SQRPL,0)=0 THEN NULL WHEN SQRPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SQRPL) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SQRPL AS VARCHAR(8000)),''Y'') END AS SQRPL, '
												END
											ELSE
												BEGIN
														SELECT @SQL=@SQL+' NULL AS SQRQTY, NULL AS SQRPL,'
												END
											 SELECT @SQL=@SQL+'
											 CASE WHEN ISNULL(STPL,0)=0 THEN NULL WHEN STPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(STPL) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(STPL AS VARCHAR(8000)),''Y'') END AS STPL, 
											 CASE WHEN ISNULL(LTPL,0)=0 THEN NULL WHEN LTPL<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(LTPL) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(LTPL AS VARCHAR(8000)),''Y'') END AS LTPL, 
											 CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN NULL WHEN  CLOSINGQTY<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( CLOSINGQTY) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( CLOSINGQTY AS VARCHAR(8000)),''Y'') END AS  CLOSINGQTY, 
											 CASE WHEN ISNULL(BUYQTY,0)=0 THEN NULL WHEN  ISNULL(BUYQTY,0)<0 THEN dbo.fn_FormatNumber(CAST(ABS( ISNULL(BUYQTY,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( ISNULL(BUYQTY,0) AS VARCHAR(8000)),''Y'') END AS BUYQTY, 
											 CASE WHEN ISNULL(SELLQTY,0)=0 THEN NULL WHEN ISNULL(SELLQTY,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(SELLQTY,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(SELLQTY,0) AS VARCHAR(8000)),''Y'') END AS SELLQTY, 
											 CASE WHEN ISNULL(BUYVALUE,0)=0 THEN NULL WHEN ISNULL(BUYVALUE,0)<0 THEN dbo.fn_FormatNumber(CAST(ABS(ISNULL(BUYVALUE,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(BUYVALUE,0) AS VARCHAR(8000)),''Y'') END AS BUYVALUE, 
											 CASE WHEN ISNULL(SELLVALUE,0)=0 THEN NULL WHEN ISNULL(SELLVALUE,0)<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(ISNULL(SELLVALUE,0)) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(ISNULL(SELLVALUE,0) AS VARCHAR(8000)),''Y'') END AS SELLVALUE, '
											  IF @closemethod='0'
												BEGIN
														SELECT @SQL=@SQL+'
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																		   Then	
																			CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''Y'') END 
																		   Else
																			Null
																		  End AS CLOSINGVALUE,
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																			  Then
																				CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN dbo.fn_FormatNumber(CAST(ABS(CAST(ISNULL(CLOSINGVALUE,0) AS NUMERIC(28,2))/1) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CAST(ABS(CAST(ISNULL(CLOSINGVALUE,0) AS NUMERIC(28,2))/CAST(ISNULL(CLOSINGQTY,0) AS NUMERIC(18,2))) AS NUMERIC(28,2)) AS VARCHAR(8000)),''Y'') END 
																			  Else 
																				Null
																		  End AS CLOSINGAVGCOST,
																		  CLOSINGQTY AS CLOSINGQTY1,
																		  ISNULL(CLOSINGVALUE,0) AS CLOSINGVALUE1'
												END
											 ELSE IF @closemethod='1'
												BEGIN
														SELECT @SQL=@SQL+'
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																		   Then
																			CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN  MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( MKTVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( MKTVALUE AS VARCHAR(8000)),''Y'') END 
																		   Else
																			Null
																		  End AS  CLOSINGVALUE,
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																			  Then
																				CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN  CLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( CLOSEPRICE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( CLOSEPRICE AS VARCHAR(8000)),''Y'') END 
																			  Else 
																				Null
																		  End AS  CLOSINGAVGCOST,
																		  CLOSINGQTY AS CLOSINGQTY1,
																		  MKTVALUE AS CLOSINGVALUE1'
												END
											ELSE 
												BEGIN
														SELECT @SQL=@SQL+'
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																		   Then
																				CASE WHEN ISNULL(MKTVALUE,0)<ISNULL(CLOSINGVALUE,0) THEN 
																				CASE WHEN ISNULL(MKTVALUE,0)=0 THEN NULL WHEN  MKTVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( MKTVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( MKTVALUE AS VARCHAR(8000)),''Y'') END
																				ELSE  CASE WHEN ISNULL(CLOSINGVALUE,0)=0 THEN NULL WHEN CLOSINGVALUE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(CLOSINGVALUE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(CLOSINGVALUE AS VARCHAR(8000)),''Y'') END END  
																		   Else
																			Null 
																		  End AS CLOSINGVALUE,
																		  CASE WHEN ClosingQty is not Null and ClosePrice is Not Null 
																		   Then
																			  CASE WHEN ISNULL(CLOSINGQTY,0)=0 THEN CASE WHEN CLOSEPRICE<ISNULL(CLOSINGVALUE,0)/1 THEN 
																					   CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN  CLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( CLOSEPRICE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( CLOSEPRICE AS VARCHAR(8000)),''Y'') END
																					   ELSE  dbo.fn_FormatNumber(CAST((ISNULL(CLOSINGVALUE,0)/1 )AS VARCHAR(8000)),''Y'')  END 
																			  ELSE
																				   CASE WHEN CLOSEPRICE<ISNULL(CLOSINGVALUE,0)/ISNULL(CLOSINGQTY,0) THEN 
																				   CASE WHEN ISNULL(CLOSEPRICE,0)=0 THEN NULL WHEN  CLOSEPRICE<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( CLOSEPRICE) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( CLOSEPRICE AS VARCHAR(8000)),''Y'') END
																				   ELSE dbo.fn_FormatNumber(CAST(CAST((ISNULL(CLOSINGVALUE,0)/ISNULL(CLOSINGQTY,0)) AS NUMERIC(28,4)) AS VARCHAR(8000)),''Y'') END
																			  END
																			Else 
																				Null
																		  End AS CLOSINGAVGCOST,
																		  CLOSINGQTY AS CLOSINGQTY1,
																		  CASE WHEN ISNULL(MKTVALUE,0)<ISNULL(CLOSINGVALUE,0) THEN ISNULL(MKTVALUE,0) ELSE ISNULL(CLOSINGVALUE,0) END AS CLOSINGVALUE1'
												END
											 SELECT @SQL=@SQL+'
											 FROM #TAB ) AS KK
											 left outer join 
											 (select  CUSTOMERID as CUSTOMERID1,MASTERPRODUCTID AS MASTERPRODUCTID1,
											 CASE WHEN SUM(ISNULL(STPL,0))=0 THEN NULL WHEN SUM(ISNULL(STPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(STPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(STPL,0)) AS VARCHAR(8000)),''Y'') END AS STPL2, 
											 CASE WHEN SUM(ISNULL(LTPL,0))=0 THEN NULL WHEN SUM(ISNULL(LTPL,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(LTPL,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(LTPL,0)) AS VARCHAR(8000)),''Y'') END AS LTPL2, 
											 CASE WHEN SUM(ISNULL( CLOSINGQTY,0))=0 THEN NULL WHEN  SUM(ISNULL( CLOSINGQTY,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( CLOSINGQTY,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( CLOSINGQTY,0)) AS VARCHAR(8000)),''Y'') END AS  CLOSINGQTY2, 
											 CASE WHEN SUM(ISNULL(SELLVALUE,0))=0 THEN NULL WHEN  SUM(ISNULL(SELLVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL(SELLVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL(SELLVALUE,0)) AS VARCHAR(8000)),''Y'') END AS  SELLVALUE2,
											 CASE WHEN SUM(ISNULL(BUYVALUE,0))=0 THEN NULL WHEN  SUM(ISNULL(BUYVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(BUYVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(BUYVALUE,0)) AS VARCHAR(8000)),''Y'') END AS  BUYVALUE2,'
											  IF @closemethod='0'
												BEGIN
														SELECT @SQL=@SQL+'CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))=0 THEN NULL WHEN SUM(ISNULL(CLOSINGVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(CLOSINGVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(CLOSINGVALUE,0)) AS VARCHAR(8000)),''Y'') END AS CLOSINGVALUE2'
												END
											 ELSE IF @closemethod='1'
												BEGIN
														SELECT @SQL=@SQL+'CASE WHEN SUM(ISNULL( MKTVALUE,0))=0 THEN NULL WHEN  SUM(ISNULL( MKTVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( MKTVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( MKTVALUE,0)) AS VARCHAR(8000)),''Y'') END AS  CLOSINGVALUE2'
												END
											ELSE 
												BEGIN
														SELECT @SQL=@SQL+'CASE WHEN SUM(ISNULL( MKTVALUE,0))<SUM(ISNULL(CLOSINGVALUE,0)) THEN 
																				CASE WHEN ISNULL(SUM(ISNULL( MKTVALUE,0)),0)=0 THEN NULL WHEN  SUM(ISNULL( MKTVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( SUM(ISNULL( MKTVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST( SUM(ISNULL( MKTVALUE,0)) AS VARCHAR(8000)),''Y'') END
																		  ELSE  CASE WHEN SUM(ISNULL(CLOSINGVALUE,0))=0 THEN NULL WHEN SUM(ISNULL(CLOSINGVALUE,0))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS(SUM(ISNULL(CLOSINGVALUE,0))) AS VARCHAR(8000)),''Y'') ELSE dbo.fn_FormatNumber(CAST(SUM(ISNULL(CLOSINGVALUE,0)) AS VARCHAR(8000)),''Y'') END END  AS CLOSINGVALUE2
																		  '
												END
											 SELECT @SQL=@SQL+' FROM #TAB GROUP BY CUSTOMERID,MASTERPRODUCTID) AS JJ
											 
											 ON( CUSTOMERID=CUSTOMERID1 AND MASTERPRODUCTID=MASTERPRODUCTID1)'
											 IF @chkexcludesqr='CHK'
												BEGIN
														SELECT @SQL=@SQL+'WHERE BRKGTYPE=''Dlv'''
												END
		--print @SQL
						END
						IF @PRINTCHK<>'SHOW'
										BEGIN
											Select @SQL=@SQL+') AS TB
															LEFT OUTER JOIN
											  tbl_master_address
												ON(add_cntID=CUSTOMERID AND add_entity=''Customer/Client'' AND 
														add_addressType=(select top 1 add_addressType from 
																		(select add_addressType,
																		  case when rtrim(ltrim(add_addressType))=''Correspondence'' then 1
																			when rtrim(ltrim(add_addressType))=''Registered'' then 2
																			when rtrim(ltrim(add_addressType))=''Residence'' then 3
																			else 4 end as addreorder
																			from tbl_master_address where 
																			add_cntID=CUSTOMERID
																			and add_entity=''Customer/Client'') tb
																			order by addreorder)
												)'
		--print @SQL
										END
						IF(@rpttype in ('1','4'))
						BEGIN
										Select @SQL=@SQL+' ORDER BY UCC,PRODUCTNAME,BRKGTYPE,DATE1,STSTUSID'	
		--print @SQL								
						END
						IF(@rpttype='0')
						BEGIN
										Select @SQL=@SQL+' ORDER BY UCC,PRODUCTNAME'
						END
			

						---------------------------------------------Testing
							--print SubString(@Sql,1,4000)
							--print SubString(@Sql,4001,4000)
							--Print SubString(@Sql,8001,4000)
							--Print SubString(@Sql,12001,4000)
							--Print SubString(@Sql,16001,4000)
							--Print SubString(@Sql,20001,4000)
							--Drop Table Tab
							--Select * into Tab From #TAB
							--SElect @Sql
							--seLECT * FROM #TAB
						-----------------------------------------------------------


						EXEC(@SQL)


						if(@rpttype=0)
						Begin
							
								Create Table #SummaryExcel(
           							CUSTOMERID Varchar(500),MASTERPRODUCTID Varchar(500),CLIENTNAME Varchar(500),UCC Varchar(500),PRODUCTNAME Varchar(500),GROUPID Varchar(500),
           							GRPNAME Varchar(500))
								if(@PRINTCHK='Print')
								begin
									Alter Table #SummaryExcel Add cmppanno Varchar(500),
           							cmpphno Varchar(500),cmpfax Varchar(500),cmpemail Varchar(500),cmpname Varchar(500),cmpaddress Varchar(500),CLIENTADDRESS1 Varchar(500),CLIENTADDRESS2 Varchar(500),cmpservicetax Varchar(500),OPQTY Varchar(500),
           							OPVALUE Varchar(500),OPENINGAVGCOST Varchar(500),BUYQTY Varchar(500),BUYVALUE Varchar(500),BUYAVGCOST Varchar(500),SELLQTY Varchar(500),SELLVALUE Varchar(500),SELLAVGCOST Varchar(500),SQRQTY Varchar(500),
           							SQRPL Varchar(500),STPL Varchar(500),LTPL Varchar(500),sttaxtotalstt Varchar(500),NETPL Varchar(500),CLOSEQTY Varchar(500),CLOSEVALUE Varchar(500),CLOSEAvgCost Varchar(500),OPVALUE1 Varchar(500),BUYVALUE1 Varchar(500),SELLVALUE1 Varchar(500),
           							sttaxtotalstt1 Varchar(500),NETPL1 Varchar(500),CLOSEVALUE1  Varchar(500)
           						End
           						Else
           						begin
           							Alter Table #SummaryExcel Add OPQTY Varchar(500),OPVALUE Varchar(500),OPENINGAVGCOST Varchar(500),BUYQTY Varchar(500),BUYVALUE Varchar(500),
           							BUYAVGCOST Varchar(500),SELLQTY Varchar(500),SELLVALUE Varchar(500),SELLAVGCOST Varchar(500),SQRQTY Varchar(500),SQRPL Varchar(500),
           							STPL Varchar(500),LTPL Varchar(500),sttaxtotalstt Varchar(500),NETPL Varchar(500),CLOSEQTY Varchar(500),CLOSEVALUE1 Varchar(500),
           							CLOSINGQTY2 Varchar(500),CLOSINGVALUE2 Varchar(500),CLOSEVALUE Varchar(500),CLOSEAvgCost Varchar(500),OPVALUE1 Varchar(500),
           							BUYVALUE1 Varchar(500),SELLVALUE1 Varchar(500),LTPL1 Varchar(500),sttaxtotalstt1 Varchar(500),NETPL1 Varchar(500),STPL1 Varchar(500),
           							STPL2 Varchar(500),LTPL2 Varchar(500),SQRPL2 Varchar(500),sttaxtotalstt2 Varchar(500)
								End

           						Insert into #SummaryExcel
           						Exec(@Sql)
		           				
           				End
           				Else
           				Begin
           					Create Table #ExportDataToExcel
								(
									CustomerID Varchar(100),MPID int,CName Varchar(100),UCC Varchar(10),PName Varchar(200),GID int,GName Varchar(100),StStusID int,TSymbol Varchar(200),
									Series Varchar(100),Segment Varchar(20),SettNo Varchar(20),BrkgType Varchar(10),Date Varchar(50),Date1 DateTime,
									StPL1 Varchar(100),LtPl1 Varchar(100),Rate Varchar(100),SqrQty Varchar(100),SqrPL Varchar(100),StPL Varchar(100),
									LTPL Varchar(100),ClosingQty Varchar(100),BuyQty Varchar(100),SellQty Varchar(100),BuyValue Varchar(100),
									SellValue Varchar(100),ClosingValue Varchar(100),ClosingACGCost Varchar(100),
									ClosingQty1 Varchar(100),closiingValue1 Varchar(100),CustomerID1 Varchar(50),MasterProductID1 int,STPL2 Varchar(100),LTPL2 Varchar(100),
									ClosingQty2 Varchar(100),SellValue2 Varchar(100),BuyValue2 Varchar(100),ClosingValue2 Varchar(100)
								)
								
							Insert into #ExportDataToExcel
							Exec(@Sql)
							
						End
						if(@ReportView='E')
						Begin
							if(@rpttype=0)
							Begin
									----------Testing 
									--Drop Table SummaryExcel
									--Select * into SummaryExcel From #SummaryExcel
									----------Testing End
									
									Declare @DSql nVarchar(Max)
           							Set @Dsql=' Select * from (Select ProductName Product,OpQty [Op.Qty],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Op.Value],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(OpeningAvgCost,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(OpeningAvgCost,0),'','','''') as Numeric(28,4)),0)<0 
										THEN
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(OpeningAvgCost,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(OpeningAvgCost,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End AvgCost,
           							BuyQty [Buy Qty],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Buy Value],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(BuyAvgCost,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(BuyAvgCost,0),'','','''') as Numeric(28,4)),0)<0 
										THEN
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(BuyAvgCost,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(BuyAvgCost,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End [Buy Avg.],
									SellQty [Sell Qty],
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Sell Value],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(SellAvgCost,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(SellAvgCost,0),'','','''') as Numeric(28,4)),0)<0 
										THEN 
										''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(SellAvgCost,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(SellAvgCost,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End [Sell Avg.],'
									
									if(@chkexcludesqr<>'CHK') Set @DSql=@DSql+'SqrQty [Sqr Qty],SqrPL [Sqr-Of P/L],'
									
									Set @DSql=@DSql + '
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL
										WHEN ISNULL(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
										''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Short Term P/L],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
										''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Long Term P/L],'
									
									if(@chkstt<>'CHK') Set @DSql=@DSql+'sttaxtotalstt STT,'
									
									Set @DSql=@DSql+'
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL
										WHEN ISNULL(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Net P/L],CloseQty [Close Qty],
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End [Close Value],
									Case 
										When (IsNull(Cast(Replace(isnull(OpQty,0),'','','''') as Numeric(28,4)),0)+
												IsNull(Cast(Replace(isnull(BuyQty,0),'','','''') as Numeric(28,4)),0)-
													IsNull(Cast(Replace(isnull(SellQty,0),'','','''') as Numeric(28,4)),0)<>
														IsNull(Cast(Replace(isnull(CloseQty,0),'','','''') as Numeric(28,4)),0))
										Then	''-tv Stock''
										Else	''''
									End as Remark
									from #SummaryExcel
									Union
									Select ''Total'','''',
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(OpValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END
									,'''','''',
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,'''','''',
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,'''','
									
									if(@chkexcludesqr<>'CHK') Set @DSql=@DSql + ''''','''','
									
									Set @DSql=@DSql + '
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(STPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(LTPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,'
									
									if(@chkstt<>'CHK') Set @DSql=@DSql+''''','
									
									Set @DSql=@DSql+'CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(NetPL,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,
									'''',
									CASE 
										WHEN ISNULL(Sum(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2))),0)=0 THEN NULL 
										WHEN Sum(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2)))<0 THEN ''-''+dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
										ELSE dbo.fn_FormatNumber(CAST(ABS( Sum(Cast(Replace(isnull(CloseValue,0),'','','''') as Numeric(28,2)))) AS VARCHAR(8000)),''N'') 
									END,''''
									from #SummaryExcel) as T1
									Order By Case When Product=''Total'' Then 9999999999 Else 1 End'
									
									
									
									--Print SubString(@Dsql,0,4000)
									--Print SubString(@Dsql,4000,4000)
									--Print SubString(@Dsql,8000,4000)
									Execute Sp_Executesql @Dsql
								
							End
							Else if(@rpttype in ('1','4'))
							Begin
								Declare @Counter int,@CustomerID Varchar(100),@RunningNumber int,
								@ProductID int,@MaxCount int,@distinctCP int,@CounterI int,@MaxCountI int,@OrderByCounter int,
								@DSql_Detail nVarchar(Max)
								set @Counter=1
								set @RunningNumber=0
								set @ProductID=0
								set @MaxCount =0
								set @distinctCP =0
								set @CounterI =0
								set @MaxCountI =0
								set @OrderByCounter=1

								Alter Table #ExportDataToExcel Add BalanceQty int
								
								
								Create Table #DisplayTable
								(CPSr int,ClientID Varchar(100),ProductID int,CName Varchar(100),UCC Varchar(10),TSymbol Varchar(200),Series Varchar(100),Segment Varchar(20),SettNO Varchar(20),
									Date Varchar(50),Rate Varchar(100),BuyQty Varchar(100),BuyValue Varchar(100))
								if(@rpttype='1')---Detail
								Begin
									Alter Table #DisplayTable
									Add SellQty Varchar(100),SellValue Varchar(100),BrkgType Varchar(10),BalanceQty int,StPL Varchar(100),LtPL Varchar(100),
									ClosingQty Varchar(100),ClosingACGCost Varchar(100),ClosingValue Varchar(100),OrderBy int
								End
								Else
								Begin---Closing Detail
									Alter Table #DisplayTable
									Add ClosingQty Varchar(100),ClosingACGCost Varchar(100),ClosingValue Varchar(100),OrderBy int
								End
								
								if(@rpttype='1')
								Begin
									Set @DSql_Detail=
									'Select ROW_NUMBER() OVER(PARTITION BY CustomerID,MPID ORDER BY CustomerID,MPID,
									Case When BrkgType=''Sqr'' Then ''9999999999'' Else  ''0'' End,Date1) SrNO,CustomerID,MPID,CName,UCC,TSymbol,
									Series,Segment Segmnt,SettNO,Date,
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End Rate,BuyQty,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End BuyValue,SellQty,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(SellValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End SellValue,BrkgType,BalanceQty,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(StPL,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(StPL,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(StPL,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(StPL,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End StPL,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(LtPL,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(LtPL,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(LtPL,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(LtPL,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End LtPL,
									ClosingQty,
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End ClosingACGCost,
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End ClosingValue,0 as OrderBy
									From #ExportDataToExcel'
								End
								Else
								Begin
									Set @DSql_Detail=
									'Select ROW_NUMBER() OVER(PARTITION BY CustomerID,MPID ORDER BY CustomerID,MPID,
									Case When BrkgType=''Sqr'' Then ''9999999999'' Else  ''0'' End,Date1) SrNO,CustomerID,MPID,CName,UCC,TSymbol,
									Series,Segment Segmnt,SettNO,Date,
									CASE 
										WHEN ISNULL(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(Rate,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End Rate,BuyQty,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(BuyValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End BuyValue,ClosingQty,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(ClosingACGCost,0),'','','''') as Numeric(28,4)) AS VARCHAR(8000)),''N'')
           							End ClosingACGCost,
           							CASE 
										WHEN ISNULL(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)),0)=0 THEN NULL 
										WHEN ISNULL(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)),0)<0 
										THEN 
											''-''+dbo.fn_FormatNumber(CAST(ABS(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2))) AS VARCHAR(8000)),''N'') 
           								Else dbo.fn_FormatNumber(CAST(Cast(Replace(isnull(ClosingValue,0),'','','''') as Numeric(28,2)) AS VARCHAR(8000)),''N'')
           							End ClosingValue,0 as OrderBy
									From #ExportDataToExcel'
								End
								
								
								
								if(@chkexcludesqr='CHK')
									Set @DSql_Detail=@DSql_Detail+' Where BrkgType=''Dlv'''
								
								
								
								Insert into #DisplayTable
								Execute Sp_Executesql @DSql_Detail
								
								Create Table #DistinctClientProduct
								(SrNO int identity(1,1),ClientID Varchar(100),ProductID Varchar(20))
								
								
								Set @DSql_Detail='Select Distinct CustomerID,MPID from #ExportDataToExcel '
								if(@chkexcludesqr='CHK')
									Set @DSql_Detail=@DSql_Detail+' Where BrkgType=''Dlv'''
								
								Insert into #DistinctClientProduct
								Execute Sp_Executesql @DSql_Detail
								
								--Select * from #DistinctClientProduct
								--Select * from #DisplayTable
								
								Select @MaxCount=COUNT(*) from #DistinctClientProduct
								
								While(@Counter<=@MaxCount)
								Begin
									Select @CustomerID=ClientID,@ProductID=ProductID From #DistinctClientProduct Where SrNO=@Counter
									Select @MaxCountI=Count(CPSr) From #DisplayTable Where ClientID=@CustomerID and ProductID=@ProductID
									While(@CounterI<=@MaxCountI)
									Begin
										Set @OrderByCounter=@OrderByCounter+1
										if(@rpttype='1')
										Begin
											Update #DisplayTable Set BalanceQty=isnull(@RunningNumber,0)+(isnull(Cast(Replace(BuyQty,',','') as int),0)-
											isnull(Cast(Replace(SellQty,',','') as int),0)),OrderBy=@OrderByCounter
											Where ClientID=@CustomerID and ProductID=@ProductID and CPSr=@CounterI
											
											Select @RunningNumber=isnull(BalanceQty,0) from #DisplayTable 
											Where ClientID=@CustomerID and ProductID=@ProductID and CPSr=@CounterI
										End
										Else
										Begin
											Update #DisplayTable Set OrderBy=@OrderByCounter
											Where ClientID=@CustomerID and ProductID=@ProductID and CPSr=@CounterI
										End
										
										Set @CounterI=@CounterI+1
									End
									
									--Insert Total Sum into #DisplayTable
									Set @OrderByCounter=@OrderByCounter+1
									
									
									if(@rpttype='1')
									Begin
										Insert into #DisplayTable
										Select Top 1 @Counter,'','','SqrQty : '+isnull(SqrQty,'NA')+' || SqrPL : '+isnull(SqrPL,'NA'),'','',
										'','','','','',
										'',
										'',
										'',
										'',
										'','','','',
										'','',
										'',
										@OrderByCounter
										From #ExportDataToExcel
										Where CustomerID=@CustomerID and MPID=@ProductID 
										Union All
										Select @Counter,'','','Total','','',
										'','','','','',
										dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(BuyQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(BuyValue,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'N') ,
										dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(SellQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(SellValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N') ,
										'','','','',
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingQty,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'Y') ,'',
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N'),
										@OrderByCounter
										From #ExportDataToExcel
										Where CustomerID=@CustomerID and MPID=@ProductID 
									End
									Else
									Begin
										Insert into #DisplayTable
										Select Top 1 @Counter,'','','SqrQty : '+isnull(SqrQty,'NA')+' || SqrPL : '+isnull(SqrPL,'NA'),'','',
										'','','','','',
										'','','','','',
										@OrderByCounter
										From #ExportDataToExcel
										Where CustomerID=@CustomerID and MPID=@ProductID 
										Union All
										Select @Counter,'','','Total','','',
										'','','','','',
										dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(BuyQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(BuyValue,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'N') ,
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingQty,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'Y') ,'',
										dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N'),
										@OrderByCounter
										From #ExportDataToExcel
										Where CustomerID=@CustomerID and MPID=@ProductID 
									End
									
									Set @Counter=@Counter+1
									Set @CustomerID=''
									Set @ProductID=''
									Set @RunningNumber=0
									Set @CounterI=0
								End
								
								--Insert Grand Total into #DisplayTable
								if(@rpttype='1')
								Begin
									Insert into #DisplayTable
									Select @Counter,'','','Grand Total','','',
									'','','','','',
									dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(BuyQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(BuyValue,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'N') ,
									dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(SellQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(SellValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N') ,
									'','','','',
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingQty,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'Y') ,'',
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N'),
									9999999
									From #DisplayTable Where CName='Total'
									
									if(@chkexcludesqr='CHK')
										Delete From #DisplayTable Where CName like 'SqrQty%'
										
									if(@chkexcludesqr='CHK')
										Select Ltrim(Rtrim(CName)) as Client,UCC,Ltrim(Rtrim(TSymbol)) Symbol,Series,Segment,SettNO,
										Date,Rate,BuyQty ,BuyValue ,SellQty ,SellValue ,BrkgType as Type,BalanceQty,StPL,LtPL,
										ClosingQty,ClosingACGCost as ClosePrice,ClosingValue from #DisplayTable order by OrderBy
									else
										Select Ltrim(Rtrim(CName)) as Client,UCC,Ltrim(Rtrim(TSymbol)) Symbol,Series,Segment,SettNO,
										Date,Rate,BuyQty ,BuyValue ,SellQty ,SellValue ,BrkgType as Type,BalanceQty,StPL,LtPL,
										ClosingQty,ClosingACGCost as ClosePrice,ClosingValue from #DisplayTable order by 
										OrderBy
								End
								Else
								BEgin
									Insert into #DisplayTable
									Select @Counter,'','','Grand Total','','',
									'','','','','',
									dbo.fn_FormatNumber(Cast(Sum((isnull(Cast(Replace(BuyQty,',','') as int),0))) AS VARCHAR(8000)),'Y') ,
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(BuyValue,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'N') ,
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingQty,',','') as Numeric(28,2)),0)) AS VARCHAR(8000)),'Y') ,'',
									dbo.fn_FormatNumber(Cast(Sum(isnull(Cast(Replace(ClosingValue,',','') as Numeric(28,2)),0))  AS VARCHAR(8000)),'N'),
									9999999
									From #DisplayTable Where CName='Total'
									
									if(@chkexcludesqr='CHK')
										Delete From #DisplayTable Where CName like 'SqrQty%'
										
									
									Select Ltrim(Rtrim(CName)) as Client,UCC,Ltrim(Rtrim(TSymbol)) Symbol,Series,Segment,SettNO,
									Date,Rate,BuyQty ,BuyValue,ClosingQty,ClosingACGCost as ClosePrice,ClosingValue 
									from #DisplayTable order by OrderBy
								
									
								End
							End	
						End
					End
				End
				Else
				Begin---Long-Term/Short Term Gain/Loss
					
					if(@rpttype='5') ---LongTerm
					Begin
						Select * from
						(Select ProductName,
						dbo.fn_FormatNumber(CAST(BuyQty AS VARCHAR(8000)),'N') BuyQty,
						CASE WHEN ISNULL(BuyValue,0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(BuyValue AS VARCHAR(8000)),'N') END AS BuyValue,
						dbo.fn_FormatNumber(CAST(SellQty AS VARCHAR(8000)),'N') SellQty,
						CASE WHEN ISNULL(SellValue,0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(SellValue AS VARCHAR(8000)),'N') END AS SellValue,
						CASE WHEN ISNULL(LTPL,0)=0 THEN NULL WHEN LTPL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(LTPL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(LTPL AS VARCHAR(8000)),'N') END AS LTPL
						From
						(Select 
						(Select Top 1 LTRIM(Rtrim(isnull(Equity_TickerSymbol,'')))+' '+Ltrim(RTRIM(isnull(Equity_Series,'')))
						from Master_Equity Where Equity_ProductID=ProductSeriesID) ProductName,
						Sum(BuyQty) BuyQty,
						CASE WHEN ISNULL(Sum(BuyValue),0)=0 THEN NULL Else SUM(BuyValue) End BuyValue,
						Sum(SellQty) SellQty,
						CASE WHEN ISNULL(Sum(SellValue),0)=0 THEN NULL Else Sum(SellValue) End SellValue,
						CASE WHEN ISNULL(Sum(LTPL),0)=0 THEN NULL WHEN Sum(LTPL)<0 THEN Sum(LTPL) ELSE Sum(LTPL) END  LTPL
						from #ShortLongTermGainLoss 
						Group By ProductSeriesID
						Having ABS(Sum(LTPL))>0) LTPL
						
						Union 
						
						Select 'Total : ',
						dbo.fn_FormatNumber(CAST(Sum(BuyQty) AS VARCHAR(8000)),'N'),
						CASE WHEN ISNULL(Sum(BuyValue),0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(Sum(BuyValue) AS VARCHAR(8000)),'N') END AS BuyValue,
						dbo.fn_FormatNumber(CAST(Sum(SellQty) AS VARCHAR(8000)),'N'),
						CASE WHEN ISNULL(Sum(SellValue),0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(Sum(SellValue) AS VARCHAR(8000)),'N') END AS SellValue,
						CASE WHEN ISNULL(Sum(LTPL),0)=0 THEN NULL WHEN Sum(LTPL)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(Sum(LTPL)) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(Sum(LTPL) AS VARCHAR(8000)),'N') END AS LTPL
						from #ShortLongTermGainLoss Where ABS(LTPL)>0 ) LongTermGainLoss
						order by Case When ProductName='Total : ' Then 999 End
					End
					Else if (@rpttype='6')
					Begin
						Select * from
						(Select ProductName,
						dbo.fn_FormatNumber(CAST(BuyQty AS VARCHAR(8000)),'N') BuyQty,
						CASE WHEN ISNULL(BuyValue,0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(BuyValue AS VARCHAR(8000)),'N') END AS BuyValue,
						dbo.fn_FormatNumber(CAST(SellQty AS VARCHAR(8000)),'N') SellQty,
						CASE WHEN ISNULL(SellValue,0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(SellValue AS VARCHAR(8000)),'N') END AS SellValue,
						CASE WHEN ISNULL(STPL,0)=0 THEN NULL WHEN STPL<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(STPL) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(STPL AS VARCHAR(8000)),'N') END AS STPL
						From
						(Select 
						(Select Top 1 LTRIM(Rtrim(isnull(Equity_TickerSymbol,'')))+' '+Ltrim(RTRIM(isnull(Equity_Series,'')))
						from Master_Equity Where Equity_ProductID=ProductSeriesID) ProductName,
						Sum(BuyQty) BuyQty,
						CASE WHEN ISNULL(Sum(BuyValue),0)=0 THEN NULL Else SUM(BuyValue) End BuyValue,
						Sum(SellQty) SellQty,
						CASE WHEN ISNULL(Sum(SellValue),0)=0 THEN NULL Else Sum(SellValue) End SellValue,
						CASE WHEN ISNULL(Sum(STPL),0)=0 THEN NULL WHEN Sum(STPL)<0 THEN Sum(STPL) ELSE Sum(STPL) END  STPL
						from #ShortLongTermGainLoss 
						Group By ProductSeriesID
						Having ABS(Sum(STPL))>0) STPL
						
						Union 
						
						Select 'Total : ',
						dbo.fn_FormatNumber(CAST(Sum(BuyQty) AS VARCHAR(8000)),'N'),
						CASE WHEN ISNULL(Sum(BuyValue),0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(Sum(BuyValue) AS VARCHAR(8000)),'N') END AS BuyValue,
						dbo.fn_FormatNumber(CAST(Sum(SellQty) AS VARCHAR(8000)),'N'),
						CASE WHEN ISNULL(Sum(SellValue),0)=0 THEN NULL Else dbo.fn_FormatNumber(CAST(Sum(SellValue) AS VARCHAR(8000)),'N') END AS SellValue,
						CASE WHEN ISNULL(Sum(STPL),0)=0 THEN NULL WHEN Sum(STPL)<0 THEN '-'+dbo.fn_FormatNumber(CAST(ABS(Sum(STPL)) AS VARCHAR(8000)),'N') ELSE dbo.fn_FormatNumber(CAST(Sum(STPL) AS VARCHAR(8000)),'N') END AS STPL
						from #ShortLongTermGainLoss Where ABS(STPL)>0 ) LongTermGainLoss
						order by Case When ProductName='Total : ' Then 999 End
					End
					
				End	
			End
			
				
			--Select * from #TempSqlData
			DROP TABLE #TAB
			Drop Table #TbAucDiffPl
			Drop Table #TbInterSegment
	END--------TO DATE END
		
end 
	try
	begin catch
	if @@trancount >0
	rollback
	end 
catch



END-------------LST END SP









